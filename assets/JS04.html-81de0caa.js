import{_ as n,X as s,Y as a,$ as p}from"./framework-5dd7fabc.js";const t={},e=p,o=s,c=a,i=e(`<h1 id="前端代码埋点实现" tabindex="-1"><a class="header-anchor" href="#前端代码埋点实现" aria-hidden="true">#</a> 前端代码埋点实现</h1><h2 id="_1-环境及需求介绍" tabindex="-1"><a class="header-anchor" href="#_1-环境及需求介绍" aria-hidden="true">#</a> 1. 环境及需求介绍</h2><ul><li>环境： <code>Vue2.7</code></li><li>需求：全页面访问、事件点击等全监听</li></ul><h2 id="_2-封装逻辑" tabindex="-1"><a class="header-anchor" href="#_2-封装逻辑" aria-hidden="true">#</a> 2. 封装逻辑</h2><ul><li>由于需要监听页面访问事件，为了统一封装，我们将用到 <code>Mixins</code> 混入监听页面的生命周期；</li><li>所有的事件发送参数分为公参和特定事件参数，因此我们需要将公参数据进行提取，统一修改。</li><li>埋点的核心逻辑，用到的是 GIF 请求发送</li></ul><p>使用 GIF 请求发送的原因其实很好理解：</p><ol><li><p>防止跨域问题:</p><p>为了防止数据请求收发的的地址和项目当前地址不同，而产生跨域问题。所以我们一般使用 <code>&lt;img src=&#39;xxx&#39;&gt;</code> 图片进行数据请求。</p></li><li><p>防止阻塞页面加载，影响用户体验：</p><p>由于创建资源节点，需要将对象注入到浏览器 DOM 树，浏览器才会发送数据请求。但是仿佛操作 DOM 会产生性能问题，并且反复载入 <code>js/css</code> 资源会阻塞页面渲染。但是 图片请求 能够很好的解决这个问题。在 <code>JavaScript</code> 中 <code>new</code> 一个 <code>image</code> 对象就能发起数据请求，并且不会产生阻塞问题。</p></li><li><p>GIF 体积最小</p><p>与常见的 Jpg 和 PNG 格式的图片相比，GIF 的体积最小：PNG 需要 67 个字节，而 GIF 只需 43 个字节。</p></li></ol><h2 id="_3-封装基础库" tabindex="-1"><a class="header-anchor" href="#_3-封装基础库" aria-hidden="true">#</a> 3. 封装基础库</h2><ol><li><p>封装 <code>Debug</code> 函数</p><p>由于模块间的独立性，我们将打印数据埋点的 <code>Debug</code> 进行统一封装：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 控制台输出信息
 * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">...</span>any<span class="token punctuation">}</span></span> <span class="token parameter">args</span> 输出信息
 */</span>
<span class="token keyword">const</span> <span class="token constant">DEBUG_LOG</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 是否输出采集信息</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DEBUG_LOG</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>GIF 核心请求模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">QS</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;querystring&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> apiGIF <span class="token operator">=</span> <span class="token string">&#39;http://\${project}.\${host}/logstores/\${logstore}/track.gif&#39;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@function</span> 具体的track动作
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">params</span> 具体发送的数据
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">apiUrl</span> 发送的接口请求
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trackAction</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> apiUrl <span class="token operator">=</span> apiGIF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 如果参数不是字符串则转换为query-string  */</span>
  <span class="token keyword">let</span> _params <span class="token operator">=</span> <span class="token keyword">typeof</span> params <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">?</span> params <span class="token operator">:</span> <span class="token constant">QS</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
  <span class="token comment">/* 创建Image对象来发送请求 */</span>
  <span class="token comment">/* &lt;img src=&#39;http://\${project}.\${host}/logstores/\${logstore}/track.gif?APIVersion=0.6.0&amp;key1=val1&amp;key2=val2&#39;/&gt; */</span>
  <span class="token keyword">let</span> src <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>_params<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;发送日志, 内容参数为: &#39;</span><span class="token punctuation">,</span> <span class="token constant">QS</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>_params<span class="token punctuation">)</span><span class="token punctuation">)</span>
  img<span class="token punctuation">.</span>src <span class="token operator">=</span> src
  <span class="token comment">/* 请求发送, load和error事件监听动作的完成 */</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;success!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    img<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>发送日志实际函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> priorParameters <span class="token operator">=</span> <span class="token punctuation">{</span>
 <span class="token comment">// 公共参数</span>
 <span class="token literal-property property">count_version</span><span class="token operator">:</span> <span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 统计版本号</span>
 <span class="token literal-property property">app_version</span><span class="token operator">:</span> <span class="token string">&#39;1.0,0&#39;</span><span class="token punctuation">,</span> <span class="token comment">// apk应用版本号</span>
  <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 获取当前时间
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 发送日志
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">trackData</span> 特定信息
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">triggerLog</span><span class="token punctuation">(</span><span class="token parameter">trackData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">let</span> session_id <span class="token operator">=</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 毫秒级时间戳，单次使用</span>
 trackData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>priorParameters<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> <span class="token operator">...</span>trackData <span class="token punctuation">}</span>
 trackData <span class="token operator">=</span> <span class="token constant">QS</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>trackData<span class="token punctuation">)</span>
 <span class="token keyword">return</span> <span class="token function">trackAction</span><span class="token punctuation">(</span>trackData<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此，我们封装好了，埋点数据收发的主体函数，后续只需要依据特定事件，调用 <code>triggerLog</code> 函数传输特定参数 <code>trackData</code> 就完成了埋点的数据请求。</p></li><li><p>利用 <code>Mixins</code> 混入封装页面返回事件</p><p>如点击事件等页面详细事件，不同项目可以做到不同封装，在此不做具体分析了。我们来看看页面返回事件的统一封装。</p><p>混入(<code>Mixins</code>) 可以捕获页面的生命周期，由于切换页面会触发页面的生命周期，因此，我们可以借此完成页面访问的埋点。</p><blockquote><p><strong>Tips</strong> 生命周期遵从“从外到内，再从内到外，mixins 先于组件”的原则</p><p>所以，页面生命周期会先加载 <code>Mixins</code>，而后若有相同的事件，则由页面内部进行覆盖。</p></blockquote><p>最终的 <code>trackMixins</code> 如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@module</span> 组件混入埋点
 */</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> trigger<span class="token punctuation">,</span> debug <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./trackBase&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> trackMixins <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">__is_first_create</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否初次访问</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;-----------页面创建初始化-----------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> pageName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>name
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">__triggerPageview</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">.</span>__is_first_create<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 首次访问, 不执行该初始化</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">.</span>__is_first_create <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;-----------页面重新挂载-----------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">__triggerPageview</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;-----------页面即将刷新-----------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">__triggerPageview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 发送刷新前当页信息事件</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;-----------页面刷新-----------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">__pageRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 页面刷新, 发送页返事件</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;-----------页面关闭-----------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">__triggerPageview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 发送页面关闭事件</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">/* ---------页面点击事件---------- */</span>
    <span class="token function">mixinTriggerClick</span><span class="token punctuation">(</span><span class="token parameter">clickData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> trackData <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token comment">// xxxxx</span>
      <span class="token punctuation">}</span>
      <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;-----------发送点击事件-----------&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token function">trigger</span><span class="token punctuation">(</span>trackData<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">/* ------------------- 内部封装事件方法 ------------------- */</span>
    <span class="token comment">/* ---------触发页面访问事件---------- */</span>
    <span class="token function">__triggerPageview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 用户进行页面访问，离开页面时发送该统计请求; 主要用途：记录用户在页面上的浏览操作行为</span>
      <span class="token keyword">let</span> trackData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token comment">// 此处省略时间处理函数</span>
      <span class="token keyword">return</span> <span class="token function">trigger</span><span class="token punctuation">(</span>trackData<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">__pageRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 页面内容更新</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">__triggerPageview</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，我们还将页面点击事件进行了封装。实际项目，我们依据需要进行处理。</p></li><li><p>具体页面使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> trackMixins<span class="token punctuation">,</span> trigger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/log/index.js&#39;</span> <span class="token comment">// 导入埋点组件</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>trackMixins<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// .....</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>前端代码埋点还是需要依据不同的项目需要，进行设计。核心逻辑依旧是封装 GIF 请求的 src 发送。</p><p>笔者只是提供一个思路，感谢你的浏览。</p><p>以上。</p>`,12),l=[i];function u(r,k){return o(),c("div",null,l)}const v=n(t,[["render",u],["__file","JS04.html.vue"]]);export{v as default};
