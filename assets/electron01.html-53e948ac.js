const n=JSON.parse(`{"key":"v-543c2dda","path":"/Framework/Electron/electron01.html","title":"electron 笔记","lang":"zh-CN","frontmatter":{"title":"electron 笔记","icon":"go","date":"2024-10-20T00:00:00.000Z","category":["框架"],"tag":["electron"],"star":false,"sticky":false},"headers":[{"level":2,"title":"electron 介绍","slug":"electron-介绍","link":"#electron-介绍","children":[]},{"level":2,"title":"electron 通信","slug":"electron-通信","link":"#electron-通信","children":[]}],"git":{"createdTime":1732119514000,"updatedTime":1732119514000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.05,"words":614},"filePathRelative":"Framework/Electron/electron01.md","localizedDate":"2024年10月20日","excerpt":"<h2> electron 介绍</h2>\\n<h2> electron 通信</h2>\\n<p>进程间通信（Inter-Process Communication，简称 IPC）是用于在至少两个进程或线程之间传输数据或信号。每个进程都有自己独立的系统资源，彼此隔离。为了实现不同进程之间的资源访问和协调工作，需要使用进程间通信。</p>\\n<p>在 Electron 中，无论是渲染进程给主进程发消息，还是主进程给渲染进程发消息，都是通过 IPC 机制实现的。此通信过程中随消息发送的 Json 对象会被序列化和反序列化，因此 Json 对象中包含的方法和原型链上的数据不会被传送。</p>\\n<ol>\\n<li>\\n<p>渲染进程向主进程发消息</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 渲染进程发送消息</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> ipcRenderer <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'electron'</span><span class=\\"token punctuation\\">)</span>\\nipcRenderer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">send</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'message'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Hello from renderer process'</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 主进程接收消息</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> ipcMain <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'electron'</span><span class=\\"token punctuation\\">)</span>\\nipcMain<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'message'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">event<span class=\\"token punctuation\\">,</span> arg</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// event 包含了 sender 属性，表示发送消息的渲染进程的 webContents 对象实例</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>arg<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// Prints: 'Hello from renderer process'</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>注意点，若主进程中设置了多处监听同一管道代码，则渲染进程发送消息时，会触发所有监听该管道的代码；其次，上面的消息传递是异步的，若需要同步传递，则可以使用 <code>ipcRenderer.sendSync</code> 和 <code>ipcMain.onSync</code>。</p>\\n</li>\\n<li>\\n<p>主进程向渲染进程发消息</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 主进程发送消息</span>\\nwin<span class=\\"token punctuation\\">.</span>webContents<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">send</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'message'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Hello from main process'</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 渲染进程接收消息</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> ipcRenderer <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'electron'</span><span class=\\"token punctuation\\">)</span>\\nipcRenderer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'message'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">event<span class=\\"token punctuation\\">,</span> arg</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>arg<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// Prints: 'Hello from main process'</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>渲染进程之间消息传递</p>\\n<p>渲染进程之间传递消息，需要借助主进程作为中介，因为 Electron 的渲染进程之间是相互隔离的，无法直接通信。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 渲染进程A发送消息</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> ipcRenderer <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'electron'</span><span class=\\"token punctuation\\">)</span>\\nipcRenderer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">send</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'message'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Hello from renderer process A'</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 主进程接收消息</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> ipcMain <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'electron'</span><span class=\\"token punctuation\\">)</span>\\nipcMain<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'message'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">event<span class=\\"token punctuation\\">,</span> arg</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>arg<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// Prints: 'Hello from renderer process A'</span>\\n  winB<span class=\\"token punctuation\\">.</span>webContent<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">send</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'message'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Hello from main process'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 渲染进程B接收消息</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> ipcRenderer <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'electron'</span><span class=\\"token punctuation\\">)</span>\\nipcRenderer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'message'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">event<span class=\\"token punctuation\\">,</span> arg</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>arg<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// Prints: 'Hello from main process'</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>当然如果知道窗口 B 的 webContents 对象实例，也可以直接发送消息。利用 <code>sendTo</code> 方法。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 窗口 A 直接向窗口 B 发送消息</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> ipcRenderer <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'electron'</span><span class=\\"token punctuation\\">)</span>\\nipcRenderer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sendTo</span><span class=\\"token punctuation\\">(</span>\\n  winB<span class=\\"token punctuation\\">.</span>webContents<span class=\\"token punctuation\\">.</span>id<span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token string\\">'message'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token string\\">'Hello from renderer process A'</span>\\n<span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 窗口 B 接收消息</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> ipcRenderer <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'electron'</span><span class=\\"token punctuation\\">)</span>\\nipcRenderer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'message'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">event<span class=\\"token punctuation\\">,</span> arg</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>arg<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// Prints: 'Hello from renderer process A'</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>"}`);export{n as data};
