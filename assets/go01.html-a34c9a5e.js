import{_ as n,X as s,Y as a,$ as t}from"./framework-5dd7fabc.js";const p={},e=t,o=s,c=a,i=e(`<p>从这一节起，入门一下 Go 语音。</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202408042019407.png" alt="golang" tabindex="0" loading="lazy"><figcaption>golang</figcaption></figure><h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h2><p>基本的数据类型如下：</p><ol><li>布尔型(boolean): <code>true</code> 和 <code>false</code>;</li><li>整型(integer): <ul><li>有符号：<code>int</code>(依据系统为 32/64 位)、<code>int8</code>、<code>int16</code>、<code>int32</code>、<code>int64</code>;</li><li>无符号：<code>uint</code>(依据系统为 32/64 位)、<code>uint8</code>、<code>uint16</code>、<code>uint32</code>、<code>uint64</code>、<code>uintptr</code>(无符号整型，用于存放指针);</li></ul></li><li>浮点型(float): <code>float32</code>、<code>float64</code>;</li><li>复数类型(complex): <code>complex64</code>、<code>complex128</code>;</li><li>字符串类型：<code>string</code>, 字符串是不可变的字节序列;</li><li>字符类型(character)：Go 语言没有专门的字符类型，但可以用 <code>byte</code>（表示单个字节的 ASCII 字符，等同于 <code>uint8</code> 的别名）或 <code>rune</code>（表示 Unicode 码点，等同于 <code>int32</code>）来表示字符。</li></ol><p>和 js 类似，go 语音中用 <code>var</code> 定义一个变量; <code>const</code> 定义一个常量。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 一般声明格式</span>
<span class="token keyword">var</span> 变量名字 类型 <span class="token operator">=</span> 值

<span class="token comment">// 简短声明</span>
变量名字 <span class="token operator">:=</span> 值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数值的大小:</strong></p><ol><li><code>int8</code> 的范围是 -128 到 127，uint8 的范围是 0 到 255，即 <code>2^8</code> 有符号的情况下正负对半，0 占一数值，以此类推。</li><li><code>float32</code> 浮点数，精确到小数点后 7 位，<code>32/2/2 - 1</code> 正负各一半，再加上小数点的偏移量，所以精确到小数点后 7 位。; 以此类推， <code>float64</code> 浮点数，精确到小数点后 15 位(<code>64/2/2 - 1</code>)。</li><li>复数类型，<code>complex64</code>：由两个<code>float32</code>类型的值分别表示复数的实数部分和虚数部分。可通过 <code>real()</code> 和 <code>imag()</code> 函数获取复数的实部和虚部。</li><li><code>rune</code> 类型，<code>rune</code> 类型是 Go 语言中的一种特殊类型，用于表示 Unicode 码点。它实际上是 <code>int32</code> 类型的别名，因此可以存储任何 Unicode 字符。<code>rune</code> 类型通常用于处理 Unicode 字符串，因为它们可以表示任何语言的字符。</li></ol><p><strong>特殊字符:</strong></p><p><code>iota</code>是一个常量生成器，用于简化常量的声明。它在每个 const 声明块中从 0 开始自动递增。iota 常用于枚举类型的定义，可以帮助你生成一系列相关的常量，而不必手动赋值。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
    <span class="token comment">// iota 在每个 const 关键字出现时被重置为 0</span>
    <span class="token comment">// 每调用一次，iota 的值加 1</span>
    a <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// a == 0</span>
    b <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// b == 1</span>
    c <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// c == 2</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
    d <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// d == 0</span>
    e <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// e == 1</span>
    f <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// f == 2</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
    g <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// g == 1</span>
    h            <span class="token comment">// h == 2 (默认情况下，h = iota + 1)</span>
    i            <span class="token comment">// i == 3 (默认情况下，i = iota + 1)</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">// 输出: 0 1 2</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span> <span class="token comment">// 输出: 0 1 2</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> h<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// 输出: 1 2 3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>nil</code> 是一个预定义标识符，用于表示接口、指针、映射、切片、通道和函数类型的零值。可以把 <code>nil</code> 理解为这些类型的“空值”或“零值”。当这些类型的变量<strong>没有被初始化或没有指向任何有效的内存位置</strong>时，它们的默认值就是 <code>nil</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// 输出: true</span>

s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// 输出: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 Go 语言中，切片的零值是 <code>nil</code>。但是，空切片 <code>[]int{}</code> 和 <code>nil</code> 切片之间存在一些微妙的区别。</p><ol><li><p>空切片 <code>[]int{}</code>：有一个指向底层数组的指针（即使这个数组是长度为零的数组）。通常用来表示明确的空集合，表示初始化了但没有元素。</p></li><li><p><code>nil</code> 切片：没有指向任何底层数组的指针。通常用来表示未初始化的切片，表示没有分配内存。</p></li></ol></blockquote><p>用法: 可以将 <code>nil</code> 作为参数传递给函数，以表示空值或未初始化的状态。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>slice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> slice <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;收到一个 nil 切片&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;收到一个非 nil 切片&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">process</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 收到一个 nil 切片</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复合数据类型" tabindex="-1"><a class="header-anchor" href="#复合数据类型" aria-hidden="true">#</a> 复合数据类型</h2><ol><li>数组(array): 一组<strong>相同类型</strong>元素的集合，<strong>长度固定</strong>;</li><li>切片(slice): 动态数组，<strong>长度可变</strong>，底层是数组;</li><li>结构体(struct): 一组不同类型字段的集合，用于表示一个对象，<strong>大小固定</strong>;</li><li>映射(map): 键值对的集合，键是唯一的，值可以是<strong>任意类型</strong>;</li></ol><p>简单理解，在 go 语音中，复合数据类型分为俩类：同构元素组成的类型<strong>数组</strong>和异构元素组成的<strong>结构体</strong>。这俩者都有固定的内存大小;而相对应的动态增长的数据结构则为<strong>切片</strong><code>slice</code>和<strong>映射</strong><code>map</code>。</p><h3 id="数组-array" tabindex="-1"><a class="header-anchor" href="#数组-array" aria-hidden="true">#</a> 数组 array</h3><p>和 js 类似，数据的每个元素可以通过索引下标来访问，索引下标的范围是从 0 开始到数组长度减 1 的位置。数组长度由内置方法 <code>len()</code> 获取。值得注意的是数组的每个元素都被<strong>初始化为元素类型对应的零值</strong>，对于数字类型来说就是 0。js 中则为 <code>undefined</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> m <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 1</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 2</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>技巧: 在 go 中, 如果数组长度位置由 <code>...</code> 省略号代替，则表示数组的长度由初始化时元素的个数决定。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>此外数组若作为函数的参数传入，此时是<strong>值传递</strong>，即传入的是数组的副本，函数内部对数组的修改不会影响到原数组。如果希望函数内部修改数组，可以将数组作为指针传递。</p><h3 id="切片-slice" tabindex="-1"><a class="header-anchor" href="#切片-slice" aria-hidden="true">#</a> 切片 slice</h3><p>切片是 Go 语言中的一种动态数组，它允许在运行时动态地增加和减少元素的数量。切片是基于数组实现的，它包含<strong>一个指向底层数组的指针、切片的长度和容量</strong>。</p><p>切片的创建方式主要有俩种：1. 基于数组创建; 2. 直接创建。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 基于数组创建</span>
arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
s <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">// s 是一个切片，包含 arr 的前两个元素, 第三个参数表示切片的容量，即切片可以容纳的最大元素数量。可省略，但不建议省略。</span>

<span class="token comment">// 直接创建 1</span>
s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token comment">// s 是一个切片，包含三个元素</span>

<span class="token comment">// 直接创建 2</span>
s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// s 是一个切片，长度为 3，容量为 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>内置的 <code>make</code> 函数创建一个指定元素类型、长度和容量的 <code>slice</code>。容量部分可以省略，在这种情况下，容量将等于长度。</p><p>实际上，<code>make</code> 函数创建的 <code>slice</code> 是指向一个底层数组的指针，这个底层数组的大小由容量决定。当向 <code>slice</code> 添加元素时，如果 <code>slice</code> 的容量不足，Go 语言会自动分配一个新的底层数组，并将原来的元素复制到新的数组中。</p></blockquote><p>不常见的直接创建:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> p <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>创建了一个指向切片类型 <code>[]int</code> 的指针 <code>p</code>。</li><li>使用 <code>new</code> 函数分配了一块内存，这块内存是一个 <code>[]int</code> 类型的切片，并将指向这块内存的指针赋值给 <code>p</code>。</li></ol><p>实际上这样做的结果是 <code>p</code> 是一个指向 []int 类型的指针，它本身的值是一个内存地址，指向一个 <code>[]int</code> 类型的切片。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> p <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// 分配一个空的 []int 切片，并返回一个指向它的指针 p</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 通过 *p 解引用这个指针，访问并修改切片的内容</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span>  <span class="token comment">// 输出: [1 2 3]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上文中创建切片中的第一种方式，需要着重说一下踩坑点。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>
  arr2 <span class="token operator">:=</span> arr1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
  arr2 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;the arr1 value:&quot;</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span> <span class="token comment">// the arr1 value: [1 2 5 4]</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;the arr2 value:&quot;</span><span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token comment">// the arr2 value: [1 2 5]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有点反直觉，为什么 <code>append</code> 篡改了原数组的值。原因在于 go 允许多个 <code>slice</code> 指向同一个底层数组，这就导致了，slice 在没有扩容的情况下直接修改了原数组的值，正确的做法是给 slice 第一 cap 容量。<code>arr2 := arr1[:2:2]</code> 即第三个参数 cap 值。</p><p><strong>使用小技巧：</strong></p><ol><li><p>去除空值:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">nonempty</span><span class="token punctuation">(</span>strings <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
    i <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token comment">// range strings 会依次返回切片中每个元素的索引和值。</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> strings <span class="token punctuation">{</span>
        <span class="token keyword">if</span> s <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
            strings<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s
        i<span class="token operator">++</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> strings<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%q\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">nonempty</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;one&quot; &quot;three&quot;]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%q\\n&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token comment">// [&quot;one&quot; &quot;three&quot; &quot;three&quot;]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 Go 编程语言中，range 是一个关键字，用于迭代不同类型的数据结构。它通常与 for 循环结合使用，可以用于迭代数组、切片（slice）、映射（map）、字符串和通道（channel）。</p></blockquote></li><li><p>切片复制:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    src <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
    dst <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">)</span>

    src<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;src:&quot;</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span> <span class="token comment">// src: [100 2 3 4 5]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;dst:&quot;</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span> <span class="token comment">// dst: [1 2 3 4 5]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>切片删除元素:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// [1 2 4 5]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>切片截取:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
    s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// [2 3 4]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="无序集合-map" tabindex="-1"><a class="header-anchor" href="#无序集合-map" aria-hidden="true">#</a> 无序集合 Map</h3><p>Map 是无序的 <code>key/value</code> 对集合，Go 语言中的 Map 是引用类型，必须初始化才能使用。</p><ol><li><p>声明：<code>var m map[string] string</code>。</p></li><li><p>创建：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 1. 使用内置 make 函数创建</span>
m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token builtin">string</span><span class="token punctuation">)</span>

<span class="token comment">// 2. 直接声明并赋值(字面量创建)</span>
m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;18&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 等价于</span>
m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
m<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Tom&quot;</span>
m<span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;18&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取元素：<code>m[&quot;name&quot;]</code>。但不可对 map 元素进行<strong>取址操作</strong>，原因可能在于 map 的元素是无序的，无法确定取值顺序。且元素数量会变化，因此地址不固定。当然也可接着数组对 map 的 key 进行显示排序。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> sort

<span class="token keyword">var</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
<span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>
    keys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 对 key 进行排序</span>
sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除元素：<code>delete(m, &quot;name&quot;)</code>。</p></li><li><p>判断元素是否存在：<code>v, ok := m[&quot;name&quot;]</code>。</p></li></ol>`,43),l=[i];function u(d,k){return o(),c("div",null,l)}const m=n(p,[["render",u],["__file","go01.html.vue"]]);export{m as default};
