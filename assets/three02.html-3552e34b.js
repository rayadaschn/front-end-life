import{_ as e,Z as o,a0 as d,F as c,a1 as r,X as l,Y as p,$ as i}from"./framework-97fa2d96.js";const u={},t=o,a=d,h=c,s=r,k=i,m=l,b=p,v=t("p",null,"GLSL 是为图形计算量身定制的用于编写着色器的语言，它包含一些针对向量和矩阵操作的特性，使渲染管线具有可编程性。",-1),g=t("h2",{id:"vscode-插件",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#vscode-插件","aria-hidden":"true"},"#"),a(" vscode 插件")],-1),_={href:"https://marketplace.visualstudio.com/items?itemName=slevesque.shader",target:"_blank",rel:"noopener noreferrer"},f=k(`<h2 id="变量语法" tabindex="-1"><a class="header-anchor" href="#变量语法" aria-hidden="true">#</a> 变量语法</h2><blockquote><p>Vector 表示向量</p></blockquote><table><thead><tr><th>变量类型</th><th>说明</th><th>默认值</th><th>可选项</th></tr></thead><tbody><tr><td><code>bool</code></td><td>布尔型标量数据类型</td><td>false</td><td>无</td></tr><tr><td><code>int</code>/<code>ivec2</code>/<code>ivec3</code>/<code>ivec4</code></td><td>包含 1/2/3/4 个整型向量</td><td>0/[0, 0]/[0, 0, 0]/[0, 0, 0, 0]</td><td>无</td></tr><tr><td><code>float</code>/<code>vec2</code>/<code>vec3</code>/<code>vec4</code></td><td>包含 1，2，3，4 个浮点型向量</td><td>0/[0, 0]/[0, 0, 0]/[0, 0, 0, 0]</td><td>无</td></tr><tr><td><code>sampler2D </code></td><td>表示 2D 纹理</td><td>default</td><td>black、grey、white、normal、default</td></tr><tr><td><code>samplerCube</code></td><td>表示立方体纹理</td><td>default-cube</td><td>black-cube、white-cube、default-cube</td></tr><tr><td><code>mat[2..3] </code></td><td>表示 2x2 和 3x3 的矩阵</td><td>不可用</td><td>无</td></tr><tr><td><code>mat4 </code></td><td>表示 4x4 的矩阵</td><td>[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]</td><td>无</td></tr></tbody></table><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p>数组的用法和 C 语言类似，规则如下：</p><ul><li>数组必须声明长度</li><li>数组不能在声明的同时初始化</li><li>数组必须由常量表达式初始化</li><li>数组不能用 const 修饰</li><li>不支持多维数组</li></ul><p>数组声明和初始化的代码示例如下：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">float</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数语法" tabindex="-1"><a class="header-anchor" href="#函数语法" aria-hidden="true">#</a> 函数语法</h2><p>GLSL 的函数由 <strong>返回值</strong>、<strong>函数名</strong> 和 <strong>参数</strong> 构成，其中返回值和函数名是必须的。若无返回值，需要使用 void 代替。</p><blockquote><p>注意：GLSL 的函数不能递归。</p></blockquote><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">void</span> <span class="token function">scaleMatrix</span> <span class="token punctuation">(</span><span class="token keyword">inout</span> <span class="token keyword">mat4</span> m<span class="token punctuation">,</span> <span class="token keyword">float</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
  m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*=</span> s<span class="token punctuation">;</span>
  m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*=</span> s<span class="token punctuation">;</span>
  m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xyz <span class="token operator">*=</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="限定符" tabindex="-1"><a class="header-anchor" href="#限定符" aria-hidden="true">#</a> 限定符</h2><p>存储限定符用于描述变量在管线中的作用。</p><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>const</td><td>编译时为常量或作为参数时只读</td></tr><tr><td>attribute</td><td><strong>应用程序</strong>和<strong>顶点着色器</strong>间通信，用于确定顶点格式</td></tr><tr><td>varying</td><td><strong>顶点着色器</strong>传输给<strong>片元着色器</strong>的插值</td></tr><tr><td>uniform</td><td><strong>应用程序</strong> 和 <strong>着色器</strong>(包含定点着色器和片元着色器)之间交互数据。在顶点着色器和片元着色器中保持一致</td></tr></tbody></table><blockquote><p>注意: 在一个渲染过程内声明的 uniform <strong>不能重复</strong>。例如在顶点着色器中定义了变量 variableA，variableA 也会存在于片元着色器且值相同，那么也就是 variableA 不能在片元着色器中再次定义。</p></blockquote><h2 id="精度" tabindex="-1"><a class="header-anchor" href="#精度" aria-hidden="true">#</a> 精度</h2><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>highp</td><td>高精度。浮点型精度范围 [-2^62, 2^62]，整型精度范围 [-2^16, 2^16]。</td></tr><tr><td>mediump</td><td>中精度。浮点型精度范围 [-2^14, 2^14]，整型精度范围 [-2^10, 2^10]。</td></tr><tr><td>lowp</td><td>低精度。浮点型精度范围 [-2^8, 2^8]，整型精度范围 [-2^8, 2^8]。</td></tr></tbody></table><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">highp</span> <span class="token keyword">mat4</span> cc_matWorld<span class="token punctuation">;</span>
<span class="token keyword">mediump</span> <span class="token keyword">vec2</span> dir<span class="token punctuation">;</span>
<span class="token keyword">lowp</span> <span class="token keyword">vec4</span> cc_shadowColor<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,20),y={href:"https://docs.cocos.com/creator/manual/zh/shader/glsl.html",target:"_blank",rel:"noopener noreferrer"};function x(w,L){const n=h("ExternalLinkIcon");return m(),b("div",null,[v,g,t("p",null,[a("在 vscode 中需要安装插件 "),t("a",_,[a("Shader languages support for VS Code"),s(n)]),a(" 才可以获得较好的语法提示。")]),f,t("ul",null,[t("li",null,[t("a",y,[a("《GLSL 语法简介》"),s(n)])])])])}const N=e(u,[["render",x],["__file","three02.html.vue"]]);export{N as default};
