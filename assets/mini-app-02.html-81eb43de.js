import{_ as p,Z as o,a0 as l,F as i,a1 as c,X as u,Y as r,$ as d}from"./framework-97fa2d96.js";const k={},n=o,s=l,v=i,t=c,e=d,m=u,g=r,h=e(`<p>本节对微信小程序做一些基础的介绍梳理。</p><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h2><p>不同的技术对应不同的应用场景，下面是小程序、APP 和 H5 的比较</p><table><thead><tr><th style="text-align:center;">运行载体</th><th style="text-align:center;">运行环境</th><th style="text-align:center;">功能性</th><th style="text-align:center;">便捷性</th><th style="text-align:center;">交互体验</th><th style="text-align:center;">开发成本</th><th style="text-align:center;">推广难度</th><th style="text-align:center;">消息推送</th></tr></thead><tbody><tr><td style="text-align:center;">小程序</td><td style="text-align:center;">微信</td><td style="text-align:center;">轻应用</td><td style="text-align:center;">无需安装</td><td style="text-align:center;">解决原生 APP</td><td style="text-align:center;">中</td><td style="text-align:center;">低</td><td style="text-align:center;">受限</td></tr><tr><td style="text-align:center;">公众号</td><td style="text-align:center;">H5</td><td style="text-align:center;">简单</td><td style="text-align:center;">无需安装</td><td style="text-align:center;">一般</td><td style="text-align:center;">低</td><td style="text-align:center;">低</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;">APP</td><td style="text-align:center;">原生系统</td><td style="text-align:center;">丰富</td><td style="text-align:center;">需要安装</td><td style="text-align:center;">最流畅</td><td style="text-align:center;">高</td><td style="text-align:center;">高</td><td style="text-align:center;">支持</td></tr></tbody></table><p>为什么会快？这个实际上和小程序的架构有关。</p><p>传统的 Web 技术在做页面渲染时，页面的逻辑执行脚本和页面 DOM 渲染是共用同一个线程。因此，业务逻辑和 UI 渲染常常相互抢占资源，容易出现性能问题。</p><p>而小程序是采用了 Hybrid 技术，使用的是混合开发模式。界面采用 Web 技术渲染，再将客户端原生能力封装成接口供开发者调用，并通过双线程模型分离界面渲染和逻辑处理，从而提高小程序的渲染性能和管控安全。</p><h2 id="小程序的文件结构" tabindex="-1"><a class="header-anchor" href="#小程序的文件结构" aria-hidden="true">#</a> 小程序的文件结构</h2><div class="language-tree line-numbers-mode" data-ext="tree"><pre class="language-tree"><code>├──app.wxss              小程序公共样式表【非必须】
├──app.json              小程序公共应用配置【必须】
├──app.js                小程序逻辑【必须】
├──project.config.json   小程序项目配置【必须】
└──pages
    ├─index.js           页面逻辑【必须】
    ├─index.json         页面配置【必须】
    ├─index.wxml         页面结构【非必须】
    └─index.wxss         页面样式表【非必须】
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：为了方便开发者减少配置项，<strong>描述页面的四个文件必须具有相同的路径与文件名</strong>。 在小程序中，<code>project.config.json</code> 和 <code>app.json</code> 是两个重要的配置文件，它们之间有以下区别：</p><ul><li><code>project.config.json</code>：这个文件是整个小程序项目的配置文件，用于配置项目的基本信息，如项目名称、版本号、appid、开发者信息等。它是整个小程序项目的配置文件中<strong>最高级别的文件</strong>，它的配置会影响到整个小程序项目的所有部分。</li><li><code>app.json</code>：这个文件是小程序应用的配置文件，用于配置小程序的全局设置，如页面路径、窗口背景色、导航栏样式、底部 tab 栏等。它是小程序中每个页面的配置文件的父级文件，它的配置会影响到所有小程序页面的表现和功能。</li></ul></blockquote><p>由上可知，一个小程序项目主要分为两部分：主体文件和页面文件。</p><ul><li>主体文件必须放在项目的根目录，它的配置会影响整个小程序项目。</li><li>页面文件必须放在 pages 目录下，每个页面都有一个独立的文件夹。</li></ul><h2 id="小程序的生命周期" tabindex="-1"><a class="header-anchor" href="#小程序的生命周期" aria-hidden="true">#</a> 小程序的生命周期</h2><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202307041625994.png" alt="小程序的主要生命周期" tabindex="0" loading="lazy"><figcaption>小程序的主要生命周期</figcaption></figure><p>如上图所示，一个完整的小程序生命周期实际上包括<strong>组件生命周期</strong>和<strong>页面生命周期</strong>两部分。</p><ul><li>一个微信小程序启动后，首次加载页面，会触发页面的 <strong>onLoad</strong> 事件（这个事件只会在页面首次加载时才会触发）；</li><li>当页面显示的时候会触发 <strong>onShow</strong> 事件，若这个页面是首次渲染完成，则会接着触发 <strong>onReady</strong> 事件；</li><li>若将小程序切换到后台，页面就会被隐藏同时触发 <strong>onHide</strong> 事件；下次从后台切换到前台时，则会再次触发 <strong>onShow</strong> 事件。</li><li>最后，当页面被回收销毁时，会触发 <strong>onUnload</strong> 事件。</li></ul><p>完整的生命周期：</p><figure><img src="https://res.wx.qq.com/wxdoc/dist/assets/img/page-lifecycle.2e646c86.png" alt="完整的生命周期" tabindex="0" loading="lazy"><figcaption>完整的生命周期</figcaption></figure><h3 id="项目生命周期" tabindex="-1"><a class="header-anchor" href="#项目生命周期" aria-hidden="true">#</a> 项目生命周期</h3><p>小程序的生命周期一般使用 App（Object object）来注册小程序， 从而管理自己的生命周期。</p><blockquote><p>注意，App() 方法有且只有一个,不能注册多个,否则会出现无法与其的后果。</p></blockquote><p>在根目录下的 <code>app.js</code> 文件中书写生命周期:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// app.js</span>
<span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">onLaunch</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 监听小程序初始化</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onShow</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 监听小程序 显示</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onHide</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 监听小程序隐藏</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 监听错误</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 全局数据对象</span>
  <span class="token literal-property property">globalData</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="页面生命周期的注册" tabindex="-1"><a class="header-anchor" href="#页面生命周期的注册" aria-hidden="true">#</a> 页面生命周期的注册</h3><p>在页面下的 index.js 中使用 Page 构造器注册页面:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;页面注册生命周期&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onReady</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onShow</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onHide</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onUnload</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onPullDownRefresh</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onReachBottom</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onShareAppMessage</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="渲染页面" tabindex="-1"><a class="header-anchor" href="#渲染页面" aria-hidden="true">#</a> 渲染页面</h3><p>页面渲染分为三个部分：如何渲染页面、如何绑定事件和如何修改页面。</p><ul><li>如何渲染页面： 在页面初始化的时候，data 数据会以 JSON 的形式由逻辑层传递给渲染层。渲染层通过 <strong>WXML</strong> 对数据进行绑定。</li><li>如何绑定事件：这块同 Vue 类似，渲染层可以在组件中加入事件绑定。</li><li>如何修改页面：通过调用 <code>this.setData()</code> 方法来修改。 <blockquote><p>注意 单次设置的数据不要超过 1024kb，并且注意不要见 value 值设置为 underlined。</p></blockquote></li></ul><h3 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h3><p>小程序采用的是 commonJS 的模块化标准。</p><ul><li>通过 module.exports 导出</li><li>通过 require 导入</li></ul>`,32),b={href:"https://developers.weixin.qq.com/miniprogram/dev/devtools/npm.html",target:"_blank",rel:"noopener noreferrer"},x=e(`<p>使用 npm 下载的包，需额外添加构建 npm 过程：点击开发者工具中的菜单栏：工具 --&gt; 构建 npm</p><ul><li>js 中引入 npm 包：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myPackage <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;packageName&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> packageOther <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;packageName/other&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 npm 包中的自定义组件：</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;usingComponents&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;myPackage&quot;</span><span class="token operator">:</span> <span class="token string">&quot;packageName&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;package-other&quot;</span><span class="token operator">:</span> <span class="token string">&quot;packageName/other&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>tips：此处使用 npm 包时如果只引入包名，则默认寻找包名下的 index.js 文件或者 index 组件。</p></blockquote><h3 id="原生-api" tabindex="-1"><a class="header-anchor" href="#原生-api" aria-hidden="true">#</a> 原生 API</h3><p>微信小程序提供了大量好用的 API，基本可以分为三类：事件监听类、同步执行类和异步执行类。</p><ol><li><p>事件监听类</p><p>通常以“on”开头，用于监听某个事件是否触发。这类 API 接收一个回调函数作为参数，当事件触发时会调用这个回调函数，并将相关数据以参数形式传入。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>wx<span class="token punctuation">.</span><span class="token function">onCompassChange</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>同步执行类</p><p>通常以“Sync”结尾的 API 都是同步 API，同步 API 的执行结果可以通过函数返回值直接获取，若执行出错则会抛出异常。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>异步执行类</p><p>这类 API 通常接收一个 Object 类型的参数，一般有如下字段：</p><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:center;">是否必填</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">success</td><td style="text-align:left;">function</td><td style="text-align:center;">否</td><td style="text-align:left;">接口调用<strong>成功</strong>的回调函数</td></tr><tr><td style="text-align:left;">fail</td><td style="text-align:left;">function</td><td style="text-align:center;">否</td><td style="text-align:left;">接口调用<strong>失败</strong>的回调函数</td></tr><tr><td style="text-align:left;">complete</td><td style="text-align:left;">function</td><td style="text-align:center;">否</td><td style="text-align:left;">接口调用<strong>结束</strong>的回调函数</td></tr><tr><td style="text-align:left;">其它</td><td style="text-align:left;">Any</td><td style="text-align:center;">-</td><td style="text-align:left;">接口定义的其他参数</td></tr></tbody></table><p>微信小程序支持 ES6 但是没有给出 Promise API 的调用方法，因此需要对其进行封装：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> getImageInfoPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  wx<span class="token punctuation">.</span><span class="token function">getImageInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">&#39;xxx.png&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="渲染层开发" tabindex="-1"><a class="header-anchor" href="#渲染层开发" aria-hidden="true">#</a> 渲染层开发</h2><p>小程序的渲染层由 WXML(weixin markup language) 和 WXSS(weixin style sheet) 编写，并交由组件来进行展示。</p><p>通过将逻辑层的数据渲染成视图，同时将渲染层的事件发送给逻辑层。这里介绍一些常用组件。</p><h3 id="视图容器" tabindex="-1"><a class="header-anchor" href="#视图容器" aria-hidden="true">#</a> 视图容器</h3><p>视图容器是包裹其他组件的容器，主要用于界面的布局和展示。如 view、scroll-view、swiper 和 swiper-item 等。</p><ol><li><p>view 组件，相当于 HTML 中的 div 标签。有 4 个基本属性。</p><ul><li>hover-class：设置鼠标悬停时的样式类。</li><li>hover-stop-propagation：设置鼠标悬停时是否阻止事件冒泡。</li><li>hover-start-time：设置鼠标悬停开始的延迟时间。</li><li>hover-stay-time：设置鼠标悬停持续的时间。</li></ul></li><li><p>scroll-view 组件， 是小程序中用于滚动显示内容的组件，其常用的属性如下：</p><ul><li>scroll-x：设置横向滚动，可以为 true 或 false。</li><li>scroll-y：设置纵向滚动，可以为 true 或 false。</li><li>scroll-with-animation：设置滚动时是否使用动画效果，可以为 true 或 false。</li><li>scroll-left：设置横向滚动条位置，单位为 px。</li><li>scroll-top：设置纵向滚动条位置，单位为 px。</li><li>scroll-into-view：设置滚动到指定组件的位置，可以为组件的 id 或选择器。</li><li>scroll-with-paging：设置是否开启分页滚动，可以为 true 或 false。</li><li>enable-back-to-top：设置是否开启快速返回顶部功能，可以为 true 或 false。</li><li>bindscroll：设置滚动时触发的事件处理函数。</li><li>bindscrolltolower：设置滚动到底部时触发的事件处理函数。</li><li>bindscrolltoupper：设置滚动到顶部时触发的事件处理函数。</li></ul><p>除了以上属性，scroll-view 组件还有一些其他的属性，例如：</p><ul><li>scroll-anchoring：设置是否开启滚动时自动定位到最近的锚点位置，可以为 true 或 false。</li><li>upper-threshold：设置滚动到顶部时触发上拉加载的距离阈值，单位为 px。</li><li>lower-threshold：设置滚动到底部时触发下拉刷新的距离阈值，单位为 px。</li><li>scroll-sensitivity：设置滚动灵敏度，即滚动距离与手指滑动距离之间的比例关系。</li></ul></li><li><p>swiper-item 组件则是一种用于轮播显示内容的容器，通常用于显示轮播图或幻灯片等场景。swiper-item 组件必须嵌套在 swiper 组件中使用，而且它只能包含图片或者其他 swiper-item 组件。swiper 组件可以通过设置 autoplay、circular、indicator-dots 等属性来控制轮播的效果和样式。</p></li></ol><h3 id="基础组件" tabindex="-1"><a class="header-anchor" href="#基础组件" aria-hidden="true">#</a> 基础组件</h3><p>基础组件包括图标（icon）、进度条（progress）、富文本（rich-text）和文本（text）等。</p><h3 id="表单组件" tabindex="-1"><a class="header-anchor" href="#表单组件" aria-hidden="true">#</a> 表单组件</h3><p>表单组件包括 button 按钮、checkbox、checkbox-group、editor、form、input、label、picker、picker-view、picker-view-column、radio、radio-group 等。</p><h3 id="wxml-页面结构" tabindex="-1"><a class="header-anchor" href="#wxml-页面结构" aria-hidden="true">#</a> WXML 页面结构</h3><ol><li><p>数据绑定 WXML 中的动态数据均来自对应 Page 的 data。数据绑定同 Vue 一样采用 Mustache 语法，双括号将变量包起来。一般可以将绑定内容和组件属性（class 类等），还可以把数据绑定用在控制语句中。</p></li><li><p>列表渲染 在组件上使用 <code>wx:for</code> 控制属性绑定一个数组，即可使用数组中的各项数据重复渲染该组件。 此外，需要使用 <code>wx:key</code> 来指定列表中项目的唯一标识符。</p></li><li><p>条件渲染 <code>wx:if</code> 条件渲染代码块，同时可以配合 <code>wx:elif</code> 和 <code>wx:else</code> 来添加 else 块。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--wxml--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{view === &#39;webview&#39;}}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> webview <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>elif</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{view === &#39;app&#39;}}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> elif app <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>else</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{view === &#39;other&#39;}}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> else other <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>模版 WXML 提供了模版，可以在模版中定义代码片段，然后在不同的地方调用。 使用 name 属性作为模版的名字，然后在内定义代码的片段：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--wxml--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>staffName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{...staffA}}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>事件 事件是渲染层到逻辑层的通信方式，可以将用户的行为反馈到逻辑层进行处理。事件可以绑定在组件上，当触发时间时，就会执行逻辑层中对应的事件处理函数。事件对象可以携带额外信息，如 id、dataset 和 touches。</p><p>在组件中绑定一个事件处理函数，如 <code>bindtap</code>，当用户点击该组件的时候，会在该页面对应的 Page 中找到相应的事件处理函数。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在相应的 Page 定义中写上相应的事件处理函数，参数是 event：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事件分为冒泡事件和非冒泡事件。</p><ul><li>冒泡事件：当一个组件上的事件被触发后，该事件<strong>会</strong>向父节点传递；</li><li>非冒泡事件：当一个组件上的事件被触发后，该事件<strong>不会</strong>向父节点传递。</li></ul></li></ol><h3 id="wxss" tabindex="-1"><a class="header-anchor" href="#wxss" aria-hidden="true">#</a> WXSS</h3><ol><li><p>值得注意的是，微信中采用的尺寸单位是 <code>rpx</code> ，类似于 CSS 中的 <code>rem</code> 单位。微信采用的是 iPhone6 的屏幕尺寸，iPhone6 上，屏幕实际宽度为 375px，共有 750 个物理像素。因此，750rpx = 375px = 750 物理像素，1rpx = 0.5px。而其它设备宽度则不一定为 375px，因此 1rpx 可能不为 0.5px。但是开发者不需要关系不同设备下的宽度。只需遵守“所有的设备屏幕宽度都为 750rpx ”这一约定即可，小程序会对任意屏幕进行自适应布局。当然这样的做法可能在较小的屏幕上会产生“毛刺”，所以还是需要注意的。</p></li><li><p>另外，对于一些特殊机型，如 iPhoneX 后面的新机型，在底部会有一条黑线条遮挡，这个时候应该使用 <code>padding-bottom: env(safe-area-inset-bottom)</code> 来告诉微信进行自动适配。 这个函数式用于设定安全区域与边界的距离。</p></li><li><p>样式导入。在小程序中可以用 <code>@import</code> 语句导入外联样式表。<code>@import</code> 后面跟需要导入的外联岩石表的相对路径，用“<code>；</code>”表示语句结束。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/** app.wxss */</span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">&#39;common.wxss&#39;</span><span class="token punctuation">;</span></span>
<span class="token selector">.middle-p</span> <span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 15rex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>`,24),f=n("li",null,"《小程序开发原理与实战》",-1),y={href:"https://developers.weixin.qq.com/miniprogram/dev/framework/",target:"_blank",rel:"noopener noreferrer"};function w(j,q){const a=v("ExternalLinkIcon");return m(),g("div",null,[h,n("p",null,[s("值得注意的是，小程序不支持直接引入 node_modules，这是由小程序自定义组件的特殊性决定的。详情可见"),n("a",b,[s("官方说明"),t(a)]),s("。")]),x,n("ul",null,[f,n("li",null,[n("a",y,[s("微信小程序官方文档"),t(a)])])])])}const P=p(k,[["render",w],["__file","mini-app-02.html.vue"]]);export{P as default};
