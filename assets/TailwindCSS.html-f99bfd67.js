import{_ as t,Z as e,a0 as i,F as l,a1 as o,X as c,Y as p,$ as u}from"./framework-97fa2d96.js";const d={},a=e,n=i,r=l,k=o,v=u,m=c,b=p,S=v(`<blockquote><p>前言：在接触 Tailwind 的刚开始，并没有感受到它的好处，反而觉得这是一种非常繁琐的事情。入门了几次都以失败告终，非常不适应。但是这一次，终于有一点小感悟了，遂记录下来，梳理总结使用规律和用法。</p></blockquote><p>章节系列共分为 7 个小节，每小节开头介绍使用规律，再介绍具体使用方法，各自小节独立可依照需求进行查阅。</p><ol><li><a href="./TailwindCSS01">Tailwind 安装及配置</a></li><li><a href="./TailwindCSS02">Tailwind 布局</a></li><li><a href="./TailwindCSS03">Tailwind 间距和尺寸</a></li><li><a href="./TailwindCSS04">Tailwind 排版</a></li><li><a href="./TailwindCSS05">Tailwind 背景</a></li><li><a href="./TailwindCSS06">Tailwind 边框</a></li><li><a href="./TailwindCSS07">Tailwind Transitions &amp; Animation</a></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Unocss 同兼容 Tailwind，因此仅需学习 Tailwind 的用法即可。</p></div><h2 id="tailwind-的优势" tabindex="-1"><a class="header-anchor" href="#tailwind-的优势" aria-hidden="true">#</a> Tailwind 的优势</h2><p>利用 Tailwind 去构建 CSS 的一些实在的好处：</p><ul><li><strong>无需再为给类命名而浪费时间</strong>。觉得这个真的非常棒，这对于统一一代码规范非常友好，不用再纠结这个项目是 BEM(Block-Element-Modifier)的规范，而下一个项目是 SMACSS (Scalable and Modular Architecture for CSS)。Tailwind 用的是 Atomic CSS，全为 inline-style，暂时理解为行内 CSS。</li><li>CSS 的代码不再增加。因为所有的 CSS 都是可复用的，所以在大部分情况下都无需再写新的 CSS 样式了。</li><li>改写样式更加安全。在以往的项目中，CSS 样式可能是全局的，所以一旦更改可能会对其它 HTML 造成破坏，从一部分情况上看，是降低了用户心智。</li></ul><h2 id="tailwind-的一些劣势" tabindex="-1"><a class="header-anchor" href="#tailwind-的一些劣势" aria-hidden="true">#</a> Tailwind 的一些劣势</h2><ul><li>相较于其它的 CSS 构建方法，Tailwind 由于是行内 CSS，所以无法使用类选择器等，只能手动自定义功能类生成变体而后进行引入，并不是很灵活。</li><li>每个样式各自独立，若是样式过多则较为混乱，这一点上 unocss 更具优势。因为 Unocss 有 <code>Attributify Mode</code> 可以将大量的 css 样式进行归类，看起来更加方便，不用转浏览器了，下面是俩者的差异。</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- Tailwindcss CSS --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-blue-400 hover:bg-blue-500 text-sm text-white font-mono font-light py-2 px-4 rounded border-2 border-blue-200 dark:bg-blue-500 dark:hover:bg-blue-600<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  Button
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- UnoCSS with Attributify Mode --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
  <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blue-400 hover:blue-500 dark:blue-500 dark:hover:blue-600&#39;
  text=<span class="token punctuation">&quot;</span></span><span class="token attr-name">sm</span> <span class="token attr-name">white&quot;</span>
  <span class="token attr-name">font</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mono light<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>y-2 X-4<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2 rounded blue-200<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  Button
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个例子：在 Unocss 中 <code>text-sm text-white</code> 可以合并写成 <code>text=&quot;sm white&quot;</code>，以<strong>抽取共同的前缀</strong>。</p>`,11),h={href:"https://unocss.dev/presets/attributify",target:"_blank",rel:"noopener noreferrer"},w=a("p",null,"唯一不足的就是在 React + TS 中可能兼容性不佳，推荐在 Vue 中使用。",-1);function g(T,_){const s=r("ExternalLinkIcon");return m(),b("div",null,[S,a("p",null,[n("具体使用可见 "),a("a",h,[n("Unocss"),k(s)]),n(" 的介绍。")]),w])}const C=t(d,[["render",g],["__file","TailwindCSS.html.vue"]]);export{C as default};
