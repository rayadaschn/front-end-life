import{_ as t,Z as p,a0 as o,F as l,a1 as c,X as r,Y as i,$ as d}from"./framework-5dd7fabc.js";const u={},n=p,s=o,k=l,e=c,v=d,m=r,b=i,h=v(`<p>长期以来对于 ts 一直停留在「入门」阶段，实际并不理解，ts 为什么在社区中被称为「类型体操」。本文就 ts 类型体操进行梳理，以作回顾。</p><h2 id="ts-为什么被称为「类型体操」" tabindex="-1"><a class="header-anchor" href="#ts-为什么被称为「类型体操」" aria-hidden="true">#</a> ts 为什么被称为「类型体操」?</h2><p>这其实是因为 js 这门语言过于灵活导致的，ts 作为 js 的超集，旨在编译过程中做类型检查，并不会改变 js 的语法。我们可以先看一下其它静态语言的特点：</p><ol><li><p>简单增加类型系统</p><p>仅仅对定义的变量、函数和类等进行类型声明。类型不匹配时会报错。（这也是笔者此前简单使用 ts 的途径）这种类型系统，过于死板了。比如同一个加法函数，对整数和浮点数需要分别声明,这里以 c++ 为例：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>int add(int a, int b) {
    return a + b;
}

double add(double a, double b) {
    return a + b;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>支持泛型的类型系统</p><p>ts 中也有泛型，泛型旨在通过一种通用的类型，来减少重复的代码。这里不过多介绍。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>T add&lt;T&gt;(T a, T b) {
    return a + b;
}

add(1,2);
add(1.111, 2.2222);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java 就是这种类型系统，但是这对于 js 来说还是不够。因为 在 java 中对象都是通过类 new 出来的，但 js 可以凭空创建对象，并且在 ts 中，有时还需要对泛型 T 进行一些逻辑处理。由此诞生了 ts 这种「支持类型编程的类型系统」</p></li><li><p>支持类型编程的类型系统</p><p>在 ts 中，经常能看到<strong>对传入的类型参数（泛型）做各种逻辑运算，产生新的类型，这就是类型编程。</strong></p><p>比如下面这个类型体操题目：实现一个类型 <code>Flatten&lt;T&gt;</code>，把嵌套的数组类型展开成一个一维数组：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Flatten<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span>
  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>Flatten<span class="token operator">&lt;</span>First<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>Flatten<span class="token operator">&lt;</span>Rest<span class="token operator">&gt;</span><span class="token punctuation">]</span>
  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> Flatten<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
<span class="token comment">// 结果是 [1, 2, 3, 4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就像在类型层面实现了一个“数组扁平化”，完全不依赖 JS 运行逻辑，全靠类型推导实现，非常绕脑，但也很优雅。</p></li></ol><h2 id="ts-体操套路" tabindex="-1"><a class="header-anchor" href="#ts-体操套路" aria-hidden="true">#</a> ts 体操套路</h2><p>虽然 ts 体操虽然复杂，但是也是有套路的。</p><h3 id="_1-条件类型-extends" tabindex="-1"><a class="header-anchor" href="#_1-条件类型-extends" aria-hidden="true">#</a> 1. <strong>条件类型</strong>（<code>extends ? :</code>）</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">X</span> <span class="token operator">:</span> <span class="token constant">Y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>核心是 <strong>判断类型</strong>。</li><li>用来做类型分支、类型过滤、模式匹配等。</li></ul><p>应用：判断类型、过滤联合类型、递归控制流。</p><h3 id="_2-类型推断-infer" tabindex="-1"><a class="header-anchor" href="#_2-类型推断-infer" aria-hidden="true">#</a> 2. <strong>类型推断 infer</strong></h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">SomeType<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>用于从类型中“提取”子类型，类似于模式匹配。</li><li>常用于数组、函数、对象结构的拆解。</li></ul><p>应用：提取参数、返回值、数组元素、对象属性等。</p><h3 id="_3-递归类型" tabindex="-1"><a class="header-anchor" href="#_3-递归类型" aria-hidden="true">#</a> 3. <strong>递归类型</strong></h3><ul><li>类型可以调用自己，做递归处理。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Flatten<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span>
  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>Flatten<span class="token operator">&lt;</span>First<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>Flatten<span class="token operator">&lt;</span>Rest<span class="token operator">&gt;</span><span class="token punctuation">]</span>
  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用：数组展开、深度映射、路径处理等。</p><h3 id="_4-联合类型分发特性" tabindex="-1"><a class="header-anchor" href="#_4-联合类型分发特性" aria-hidden="true">#</a> 4. <strong>联合类型分发特性</strong></h3><p>条件类型在联合类型中会<strong>自动分发</strong>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ToArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> ToArray<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token operator">&gt;</span> <span class="token comment">// 结果是 1[] | 2[] | 3[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用：对联合类型分别处理，比如类型过滤、映射等。</p><h3 id="_5-字符串模板类型" tabindex="-1"><a class="header-anchor" href="#_5-字符串模板类型" aria-hidden="true">#</a> 5. <strong>字符串模板类型</strong></h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Hello<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>应用：路径拼接、字符串变换（驼峰/下划线等）。</p><h3 id="_6-映射类型" tabindex="-1"><a class="header-anchor" href="#_6-映射类型" aria-hidden="true">#</a> 6. <strong>映射类型</strong></h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用：属性变换、key 重命名、deep readonly、optional 处理等。</p><h3 id="_7-keyof、in、typeof-等关键字" tabindex="-1"><a class="header-anchor" href="#_7-keyof、in、typeof-等关键字" aria-hidden="true">#</a> 7. <strong>keyof、in、typeof 等关键字</strong></h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token comment">// &#39;a&#39; | &#39;b&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>应用：属性遍历、类型映射、对象处理等。</p><h3 id="_8-分布式条件-递归的组合拳" tabindex="-1"><a class="header-anchor" href="#_8-分布式条件-递归的组合拳" aria-hidden="true">#</a> 8. <strong>分布式条件 + 递归的组合拳</strong></h3><p>很多高级类型体操题都依赖这两个一起使用，比如实现类型过滤器、转置器、路径分解器等。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>`,34),g={href:"https://wangdoc.com/typescript/intro",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/type-challenges/type-challenges",target:"_blank",rel:"noopener noreferrer"};function _(f,x){const a=k("ExternalLinkIcon");return m(),b("div",null,[h,n("p",null,[s("对于新手而言，还是推荐先看阮一峰老师的 ts 入门教程"),n("a",g,[s("Typescript 教程"),e(a)]),s("。而后，在了解 ts 类型体操后，可以在 afu 老师的 "),n("a",y,[s("type-challenges"),e(a)]),s(" 仓库中进行练习~")])])}const w=t(u,[["render",_],["__file","ts03.html.vue"]]);export{w as default};
