import{_ as o,Z as t,a0 as c,F as p,a1 as l,X as i,Y as r,$ as u}from"./framework-5dd7fabc.js";const d={},s=t,n=c,k=p,f=l,a=u,m=i,b=r,v=a(`<p>本文重新梳理一遍 Node.js 中的 Buffer 概念和使用方法。</p><blockquote><p>[!NOTE] 为什么需要 Buffer? 在 Node.js 中，Buffer 是处理二进制数据的核心对象。JavaScript 本身是基于 Unicode 的字符串处理，但在网络通信、文件操作等场景中，我们经常需要处理原始的二进制数据。Buffer 提供了一种高效的方式来存储和操作这些数据。(Blob 不能直接进行问卷的处理，ArrayBuffer 不能直接操作二进制数据，而 Buffer 则可以直接操作二进制数据)</p></blockquote><h2 id="关于字节" tabindex="-1"><a class="header-anchor" href="#关于字节" aria-hidden="true">#</a> 关于字节</h2><p>计算机内部，所有信息最终都是一个二进制值。每一个二进制位（bit）有 0 和 1 两种状态，因此八个二进制位就可以组合出 256 种状态，这被称为一个字节(byte) 。</p><p>因此对应的的单位有：</p><ul><li>8 位 = 1 字节</li><li>1024 字节 = 1K</li><li>1024K = 1M</li><li>1024M = 1G</li><li>1024G = 1T</li></ul><p>在 Javascript 中的进制转换</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 二进制转十进制</span>
<span class="token keyword">const</span> binary <span class="token operator">=</span> <span class="token string">&#39;101010&#39;</span>
<span class="token keyword">const</span> decimal <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>binary<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span> <span class="token comment">// 输出: 42</span>

<span class="token comment">// 2. 十进制转二进制</span>
<span class="token keyword">const</span> decimalNumber <span class="token operator">=</span> <span class="token number">42</span>
<span class="token keyword">const</span> binaryString <span class="token operator">=</span> decimalNumber<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>binaryString<span class="token punctuation">)</span> <span class="token comment">// 输出: &#39;101010&#39;</span>

<span class="token comment">// 3. 十六进制转十进制</span>
<span class="token keyword">const</span> hex <span class="token operator">=</span> <span class="token string">&#39;2A&#39;</span>
<span class="token keyword">const</span> decimalFromHex <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>hex<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decimalFromHex<span class="token punctuation">)</span> <span class="token comment">// 输出: 42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!NOTE] 为什么 0.1 + 0.2 !== 0.3? 在 JavaScript 中，浮点数的表示方式会导致某些小数无法精确表示，因此在进行浮点数运算时可能会出现微小的误差。 这就是为什么 <code>0.1 + 0.2 !== 0.3</code> 的原因。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token comment">// 输出: false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 0.30000000000000004</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="常见的编码" tabindex="-1"><a class="header-anchor" href="#常见的编码" aria-hidden="true">#</a> 常见的编码</h2><p>常见的编码方式有：</p><ul><li>UTF-8 缺点就是它是一种变长编码方式。</li><li>UTF-16 是每次 16 个位置，因此它是一种定长编码方式。</li><li>ASCII，一种单字节编码方式，主要用于英文</li><li>GBK，一种双字节编码方式，主要用于中文</li><li>base64，一种基于 64 个可打印字符来表示二进制数据的方法</li></ul>`,12),B={href:"https://www.ruanyifeng.com/blog/2014/12/unicode.html",target:"_blank",rel:"noopener noreferrer"},h=a(`<p>简单梳理就是最早编码采用的是 ascii 编码，后来每个国家为了支持更多的字符集，产生了不同的编码方式，如 GBK。而 unicode 则是为了统一所有字符集而产生的编码方式。它的实现由 utf 组织实现，utf-8 是最常用的编码方式。</p><p>而 base64 编码主要解决的是<strong>传输问题</strong>，例如中文是不好传输的。传输过程中如果发生中断，则容易乱码。它是将二进制数据转换为 ASCII 字符串的编码方式。base64 和 base32 的区别在于 base64 使用 64 个字符来表示数据，而 base32 使用 32 个字符。base64 编码的效率更高，但 base32 更适合于 URL 和文件名等场景。</p><p>base64 的缺点是以前是 3 个字节，编码后是 4 个字节，因此会增加数据的大小。base64 编码的效率是 3:4，即每 3 个字节的数据会被编码为 4 个字节的字符串，大了 1/3。</p><h2 id="定义-buffer-的三种方式" tabindex="-1"><a class="header-anchor" href="#定义-buffer-的三种方式" aria-hidden="true">#</a> 定义 Buffer 的三种方式</h2><p>上文提到 Buffer 是用来存放内容处理操作二进制的，实质就是标识的就是内存空间。创建的方式有：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** 1. 通过长度定义 */</span>
<span class="token comment">// 创建一个长度为 10、且用 0 填充的 Buffer。 alloc 也就是allocate，分配的意思</span>
<span class="token keyword">const</span> buf1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment">// 创建一个长度为 10、且用 0x1 填充的 Buffer。</span>
<span class="token keyword">const</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// 创建一个长度为 10、且未初始化的 Buffer。</span>
<span class="token keyword">const</span> buf3 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">allocUnsafe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token doc-comment comment">/** 2. 通过数组定义 */</span>
<span class="token comment">// 创建一个包含 [0x1, 0x2, 0x3] 的 Buffer。</span>
<span class="token keyword">const</span> buf4 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token doc-comment comment">/** 通过字符串创建 */</span>
<span class="token keyword">const</span> buf5 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;字符串创建&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面主要用到了俩个方法：</p><ol><li><code>Buffer.alloc()</code>: 分配内存大小;</li><li><code>Buffer.from()</code>: 将内容转换为 buffer;</li></ol><h2 id="buffer-常用方法" tabindex="-1"><a class="header-anchor" href="#buffer-常用方法" aria-hidden="true">#</a> buffer 常用方法</h2><ol><li><code>Buffer.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])</code>: 将一个 Buffer 复制到另一个 Buffer。</li><li><code>Buffer.fill(value[, offset[, end]][, encoding])</code>：用指定的字节填充一个 Buffer。</li><li><code>Buffer.concat(list[, totalLength])</code>: 将多个 Buffer 连接成一个 Buffer。</li><li><code>Buffer.slice([start[, end]])</code>: 返回一个新的 Buffer，包含原 Buffer 中指定范围内的字节。</li><li><code>Buffer.toString([encoding[, start[, end]]])</code>: 将 Buffer 转换为字符串。</li><li><code>Buffer.write(string[, offset[, length]][, encoding])</code>: 将字符串写入 Buffer。</li><li><code>Buffer.isBuffer(obj)</code>: 检查一个对象是否为 Buffer。</li><li><code>Buffer.byteLength(string[, encoding])</code>: 返回字符串的字节长度。</li></ol>`,10);function g(_,x){const e=k("ExternalLinkIcon");return m(),b("div",null,[v,s("p",null,[n("在 node 中，Buffer 默认使用 UTF-8 编码。编码格式可参考阮一峰老师 "),s("a",B,[n("《Unicode 与 JavaScript 详解》"),f(e)]),n("。")]),h])}const N=o(d,[["render",g],["__file","Node14.html.vue"]]);export{N as default};
