import{_ as e,X as i,Y as a,$ as l}from"./framework-97fa2d96.js";const r={},t=l,n=i,s=a,d=t('<p>总结一下常用的 DOM 和 BOM 操作。</p><h2 id="dom" tabindex="-1"><a class="header-anchor" href="#dom" aria-hidden="true">#</a> DOM</h2><p>DOM 是指文档对象模型，常用的操作有获取元素、操作元素内容、创建和修改元素、事件处理和遍历查找。</p><h3 id="获取元素" tabindex="-1"><a class="header-anchor" href="#获取元素" aria-hidden="true">#</a> 获取元素</h3><ul><li>getElementById(id)：根据元素的 id 获取元素;</li><li>getElementsByClassName(className)：根据元素的 Class 类名获取元素，需要注意的是这里是 Element<strong>s</strong>，类名是可以重复的得到的元素不止一个！</li><li>querySelector(selector)：根据 CSS 选择器获取元素，返回第一个匹配的元素;</li><li>querySelectorAll(selector)：根据 CSS 选择器获取一组元素，返回所有匹配的元素。</li></ul><h3 id="操作元素内容" tabindex="-1"><a class="header-anchor" href="#操作元素内容" aria-hidden="true">#</a> 操作元素内容</h3><ul><li>innerHTML: 获取或设置元素的 HTML 内容。</li><li>innerText 或 textContent: 获取或设置元素的文本内容。</li></ul><h3 id="操作元素属性和样式" tabindex="-1"><a class="header-anchor" href="#操作元素属性和样式" aria-hidden="true">#</a> 操作元素属性和样式</h3><ul><li>getAttribute(attributeName): 获取元素的属性值。</li><li>setAttribute(attributeName, value): 设置元素的属性值。</li><li>classList: 操作元素的类名，例如添加、删除、切换类名等。常见的 classList 方法包括： <ul><li>add(className): 添加指定的类名。</li><li>remove(className): 移除指定的类名。</li><li>toggle(className): 切换指定的类名，如果存在则移除，如果不存在则添加。</li><li>contains(className): 检查元素是否包含指定的类名。</li></ul></li><li>style: 操作元素的样式，同 classList 一样，例如设置元素的宽度、颜色等。</li></ul><h3 id="创建和修改元素" tabindex="-1"><a class="header-anchor" href="#创建和修改元素" aria-hidden="true">#</a> 创建和修改元素</h3><ul><li>createElement(tagName): 创建新的元素节点。</li><li>appendChild(node): 将节点添加为另一个节点的子节点。</li><li>removeChild(node): 从父节点中移除指定的子节点。</li><li>cloneNode(deep): 复制节点，其中 deep 参数表示是否同时复制子节点。</li></ul><h3 id="事件处理" tabindex="-1"><a class="header-anchor" href="#事件处理" aria-hidden="true">#</a> 事件处理</h3><ul><li>addEventListener(event, handler): 添加事件监听器。</li><li>removeEventListener(event, handler): 移除事件监听器。</li></ul><h3 id="遍历和查找" tabindex="-1"><a class="header-anchor" href="#遍历和查找" aria-hidden="true">#</a> 遍历和查找</h3><ul><li>parentNode: 获取元素的父节点。</li><li>childNodes: 获取元素的所有子节点。</li><li>nextSibling 和 previousSibling: 获取元素的下一个兄弟节点和上一个兄弟节点。</li><li>querySelector 和 querySelectorAll: 根据 CSS 选择器在元素的后代节点中查找匹配的元素。</li></ul><h2 id="bom" tabindex="-1"><a class="header-anchor" href="#bom" aria-hidden="true">#</a> BOM</h2><p>BOM 是指浏览器对象模，提供了一系列用于操作浏览器窗口和浏览器本身的对象和方法。</p><h3 id="window-对象" tabindex="-1"><a class="header-anchor" href="#window-对象" aria-hidden="true">#</a> window 对象</h3><ul><li>window.open(url, name, features): 打开一个新窗口或标签页。</li><li>window.close(): 关闭当前窗口。</li><li>window.location: 获取或设置当前窗口的 URL。</li><li>window.alert(message): 弹出一个包含指定消息的警告框。</li><li>window.confirm(message): 弹出一个包含指定消息和确定/取消按钮的确认框。</li><li>window.prompt(message, defaultText): 弹出一个包含指定消息和输入框的提示框。</li><li>window.setTimeout(function, delay): 在指定的延迟时间后执行函数。</li><li>window.setInterval(function, interval): 每隔一定时间重复执行函数。</li></ul><h3 id="navigator-对象" tabindex="-1"><a class="header-anchor" href="#navigator-对象" aria-hidden="true">#</a> navigator 对象</h3><ul><li>navigator.userAgent: 获取浏览器的用户代理字符串。</li><li>navigator.language: 获取浏览器的语言设置。</li></ul><h3 id="screen-对象" tabindex="-1"><a class="header-anchor" href="#screen-对象" aria-hidden="true">#</a> screen 对象</h3><p>screen.width 和 screen.height: 获取屏幕的宽度和高度。 screen.availWidth 和 screen.availHeight: 获取屏幕可用的宽度和高度。</p><h3 id="history-对象" tabindex="-1"><a class="header-anchor" href="#history-对象" aria-hidden="true">#</a> history 对象</h3><ul><li>history.back(): 后退到上一页。</li><li>history.forward(): 前进到下一页。</li><li>history.go(number): 前进或后退指定数量的页面。</li></ul><h3 id="localstorage-和-sessionstorage" tabindex="-1"><a class="header-anchor" href="#localstorage-和-sessionstorage" aria-hidden="true">#</a> localStorage 和 sessionStorage</h3><p>使用 localStorage 和 sessionStorage 存储和获取数据，实现本地存储功能。都是通过 getItem 和 setItem 进行操作。</p>',27),o=[d];function h(c,u){return n(),s("div",null,o)}const g=e(r,[["render",h],["__file","interview06.html.vue"]]);export{g as default};
