import{_ as e,V as a,W as c,$ as i}from"./framework-2060dede.js";const l={},r=i('<h1 id="webpack-性能优化" tabindex="-1"><a class="header-anchor" href="#webpack-性能优化" aria-hidden="true">#</a> Webpack 性能优化</h1><p>Webpack 性能优化可分为俩方面：</p><ul><li>优化一：打包后的结果，上线时的性能优化。(比如分包处理、减小包体积、CDN服务器等)</li><li>优化二：优化打包速度，开发或者构建时优化打包速度。(比如exclude、cache-loader等)</li></ul><p>实际上，Webpack 在配置 mode 时，已经自动为项目做了很多优化了。但是，也可以定制一些相关配置。</p><h2 id="代码分离" tabindex="-1"><a class="header-anchor" href="#代码分离" aria-hidden="true">#</a> 代码分离</h2><p>代码分离的主要目的是将代码分离到不同的bundle中，之后我们可以按需加载，或者并行加载这些文件。如默认情况下，所有的JavaScript代码（业务代码、第三方依赖、暂时没有用到的模块）在首页全部都加载，就会影响首页 的加载速度。代码分离可以分出更小的bundle，以及控制资源加载优先级，提供代码的加载性能。</p><p>Webpack 中常见的代码分离有三种：</p><ul><li>入口起点：使用entry配置手动分离代码;</li><li>防止重复：使用Entry Dependencies或者SplitChunksPlugin去重和分离代码;</li><li>动态导入：通过模块的内联函数调用来分离代码;</li></ul><h3 id="多入口起点" tabindex="-1"><a class="header-anchor" href="#多入口起点" aria-hidden="true">#</a> 多入口起点</h3>',9),n=[r];function t(d,h){return a(),c("div",null,n)}const s=e(l,[["render",t],["__file","webpack03.html.vue"]]);export{s as default};
