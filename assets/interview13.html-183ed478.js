import{_ as n,X as a,Y as s,$ as e}from"./framework-97fa2d96.js";const i={},l=e,t=a,p=s,c=l(`<p>总述算法的一些常见考题和常见数据结构等。</p><h2 id="常见数据结构" tabindex="-1"><a class="header-anchor" href="#常见数据结构" aria-hidden="true">#</a> 常见数据结构</h2><h3 id="栈-stack" tabindex="-1"><a class="header-anchor" href="#栈-stack" aria-hidden="true">#</a> 栈 Stack</h3><p>栈是先进后出的一种数据结构。</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202308310907807.png" alt="栈" tabindex="0" loading="lazy"><figcaption>栈</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 压栈</span>
stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 出栈</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="队列-queue" tabindex="-1"><a class="header-anchor" href="#队列-queue" aria-hidden="true">#</a> 队列 Queue</h3><p>队列是先进先出的一种数据结构。</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202308310909775.png" alt="队列" tabindex="0" loading="lazy"><figcaption>队列</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 入队</span>
queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 出队</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链表-linked-list" tabindex="-1"><a class="header-anchor" href="#链表-linked-list" aria-hidden="true">#</a> 链表 Linked list</h3><p>链表不是连续的数据结构，而是由一些列的节点组成，各个节点之间通过指针连接。</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202308310912878.png" alt="链表" tabindex="0" loading="lazy"><figcaption>链表</figcaption></figure><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IListNode</span> <span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token builtin">any</span>
  next<span class="token operator">:</span> IListNode <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="树-tree" tabindex="-1"><a class="header-anchor" href="#树-tree" aria-hidden="true">#</a> 树 Tree</h3><p>树，是一种有序的层次结构，每个节点下面都可以有若干个子节点。常见的树有 DOM 树。</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202308310915590.png" alt="树" tabindex="0" loading="lazy"><figcaption>树</figcaption></figure><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ITreeNode</span> <span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token builtin">any</span>
  children<span class="token operator">:</span> ITreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h3><p>二叉树，是树的一种特殊结构，它的每个节点最多只有只有俩个，分别为 left 和 right。</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202308310917757.png" alt="二叉树" tabindex="0" loading="lazy"><figcaption>二叉树</figcaption></figure><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IBinaryTreeNode</span> <span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token builtin">any</span>
  left<span class="token operator">:</span> IBinaryTreeNode <span class="token operator">|</span> <span class="token keyword">null</span>
  right<span class="token operator">:</span> IBinaryTreeNode <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见算法" tabindex="-1"><a class="header-anchor" href="#常见算法" aria-hidden="true">#</a> 常见算法</h2><p>梳理排序算法</p><ol><li><p>冒泡排序（Bubble Sort）：</p><ul><li>每次比较相邻的元素，如果顺序错误就交换它们，直到整个序列排序完成。</li><li>时间复杂度：平均情况和最坏情况下为 O(n^2)，最好情况下为 O(n)（当输入已经有序时）。</li><li>空间复杂度：O(1)。</li><li>稳定性：稳定排序算法。</li></ul></li><li><p>插入排序（Insertion Sort）：</p><ul><li>将数组分为已排序和未排序两部分，每次从未排序部分取一个元素插入到已排序部分的正确位置。</li><li>时间复杂度：平均情况和最坏情况下为 O(n^2)，最好情况下为 O(n)（当输入已经有序时）。</li><li>空间复杂度：O(1)。</li><li>稳定性：稳定排序算法。</li></ul></li><li><p>选择排序（Selection Sort）：</p><ul><li>每次从未排序部分选择最小（或最大）的元素，放到已排序部分的末尾。</li><li>时间复杂度：平均情况和最坏情况下为 O(n^2)，不论输入的初始状态如何。</li><li>空间复杂度：O(1)。</li><li>稳定性：不稳定排序算法。</li></ul></li><li><p>希尔排序（Shell Sort）:</p><ul><li><p>希尔排序是选择排序的一种改良，也被称为缩小增量排序。它通过将待排序的序列分割成多个子序列来进行排序，最终逐步缩小增量，直至整个序列有序。</p></li><li><p>排序步骤：</p><ul><li>选择增量序列: 选择一种初始增量序列，常见的是希尔增量序列（N/2、N/4、N/8...）</li><li>按增量进行插入排序：从第一个开始以增量序列为间距，数字俩俩比较排序；排序完毕后缩小增量序列（如 N/2 --&gt; N/4），继续插入排序，直至增量序列变为 1。</li></ul></li><li><p>希尔排序的时间复杂度取决于增量序列的选择，最坏情况下为 O(n^2)，但在平均情况下，其性能通常较好。希尔排序是一种不稳定的排序算法。</p></li></ul></li><li><p>快速排序（Quick Sort）：</p><ul><li>选择一个基准元素，将序列分为小于等于基准和大于基准的两部分，然后对这两部分递归地进行快速排序。</li><li>时间复杂度：平均情况下为 O(nlogn)，最坏情况下为 O(n^2)（当输入已经有序时）。</li><li>空间复杂度：取决于递归调用栈的深度，平均情况下为 O(logn)，最坏情况下为 O(n)。</li><li>稳定性：不稳定排序算法。</li></ul></li><li><p>归并排序（Merge Sort）：</p><ul><li>将序列递归地分成两半，对每一半进行归并排序，然后将两个有序的半部分归并成一个有序的序列。具体步骤为: <ul><li>分割：将待排序的序列不断地二分，直到分割成单个元素的子序列（递归的基本情况）。</li><li>合并：将两个有序的子序列合并成一个有序的序列。创建一个临时数组（或列表）来存储合并后的序列。比较两个子序列的首个元素，将较小（或较大）的元素放入临时数组，并将对应子序列的索引向后移动。</li><li>重复上述步骤，直到一个子序列的所有元素都放入了临时数组。将另一个子序列中剩余的元素依次放入临时数组。将临时数组中的元素复制回原始序列的相应位置。</li><li>递归：对分割后的子序列递归地应用上述步骤，直到所有子序列都排序完成。</li></ul></li><li>时间复杂度：平均情况和最坏情况下为 O(nlogn)，不论输入的初始状态如何。</li><li>空间复杂度：取决于递归调用栈的深度，平均情况和最坏情况下为 O(n)。</li><li>稳定性：稳定排序算法。</li></ul></li><li><p>堆排序（Heap Sort）</p><ul><li>堆排序（Heap Sort）是一种利用堆数据结构进行排序的算法。堆是一种特殊的完全二叉树，具有以下性质： <ul><li>对于大顶堆（或大根堆），任意节点的值都大于（或等于）其子节点的值。</li><li>对于小顶堆（或小根堆），任意节点的值都小于（或等于）其子节点的值。</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>堆排序的基本思想是将待排序序列构建成一个堆，然后依次从堆顶取出最大（或最小）元素，放入已排序的部分，再调整堆，重复这个过程，直到整个序列排序完成。</p></div><p>下面是堆排序的基本步骤：</p><ul><li>构建堆：将待排序序列构建成一个堆。 <ul><li>从最后一个非叶子节点开始，向上遍历到根节点，对每个节点进行下沉操作，使其满足堆的性质。</li><li>下沉操作：比较节点与其子节点的值，如果节点的值小于（或大于）子节点的值，则交换它们，并继续向下比较。</li></ul></li><li>排序：重复以下步骤，直到堆为空。 <ul><li>将堆顶元素（最大或最小元素）与堆的最后一个元素交换位置。</li><li>将堆的大小减 1（即将最后一个元素从堆中移除）。</li><li>对新的堆顶元素进行下沉操作，使其满足堆的性质。</li></ul></li></ul><p>堆排序的时间复杂度是 O(nlogn)，其中 n 是待排序序列的大小。构建堆的时间复杂度是 O(n)，排序的过程需要执行 n 次下沉操作，每次下沉的时间复杂度是 O(logn)。堆排序是一种不稳定的排序算法，因为在堆的调整过程中，元素的相对顺序可能发生改变。</p><p>堆排序的优点是原地排序（只需要常数级的额外空间），适用于大规模数据的排序。然而，由于堆排序的元素访问方式不连续，对于缓存性能较差的计算机体系结构，可能导致较高的缓存失效率。</p></li></ol>`,25),o=[c];function r(d,u){return t(),p("div",null,o)}const k=n(i,[["render",r],["__file","interview13.html.vue"]]);export{k as default};
