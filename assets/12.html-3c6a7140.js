import{_ as n,X as a,Y as s,$ as e}from"./framework-97fa2d96.js";const p={},l=e,t=a,i=s,o=l(`<p>对于 webpack，在框架类中有几篇<a href="../Framework/webpack01">专题</a>介绍，此处仅做面试题集梳理。</p><h2 id="基础梳理" tabindex="-1"><a class="header-anchor" href="#基础梳理" aria-hidden="true">#</a> 基础梳理</h2><ul><li><p>多入口，通常 SPA 为单入口。多入口配置：</p><ul><li><p>在 entry 中配置多入口；</p></li><li><p>在 output 中配置多出口 <code>filename: [name].[contentHash:8].js</code></p></li><li><p>在 plugins 中为每个入口做插件解析。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 生成 index.html</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 只引用 index.js</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 生成 other.html</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> <span class="token string">&#39;other.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;other.html&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;other&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 只引用 other.js</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>抽离公共代码</p><ul><li><p>在<code>optimization</code>中的<code>splitChunks</code>配置生成单独的 chunks 文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// 生成单独的chunks文件配置</span>
  <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">maxAsyncRequests</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
    <span class="token literal-property property">maxInitialRequests</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">Axios</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]axios[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;common/axios&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>还需要在入口插件的<code>HtmlWebpackPlugin</code>中的 chunk 内加入抽离的公共组件，如上的 axios，这样在入口文件中才会导入该公共抽离的组件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 生成 index.html</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;common/axios&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 引用 index.js 和 common/axios.js</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>懒加载</p></li><li><p>处理 Vue 等特殊格式文件</p></li></ul><h2 id="module、chunk-和-bundle-的区别是什么" tabindex="-1"><a class="header-anchor" href="#module、chunk-和-bundle-的区别是什么" aria-hidden="true">#</a> module、chunk 和 bundle 的区别是什么？</h2><ul><li>module：在 webpack 中各个源文件都是模块（module）</li><li>chunk：多个模块合并而成的，如 entry、import()、splitChunk</li><li>bundle：最终的输出文件</li></ul><h2 id="webpack-的性能优化-构建速度" tabindex="-1"><a class="header-anchor" href="#webpack-的性能优化-构建速度" aria-hidden="true">#</a> webpack 的性能优化-构建速度</h2><ul><li>优化 babel-loader</li><li>IgnorePlugins</li><li>noParse</li><li>happyPack</li><li>ParallelUglifyPlugin</li><li>自动刷新</li><li>热更新</li><li>DllPlugin</li></ul><h3 id="优化-babel-loader" tabindex="-1"><a class="header-anchor" href="#优化-babel-loader" aria-hidden="true">#</a> 优化 babel-loader</h3><ul><li>开启缓存，没有改变的不再更新</li><li>明确 babel 的作用范围：include 和 exclude 二者选其一即可</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;babel-loader?cacheDirectory&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 开启缓存</span>
  <span class="token literal-property property">include</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 明确范围</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ignoreplugins-避免引入无用模块" tabindex="-1"><a class="header-anchor" href="#ignoreplugins-避免引入无用模块" aria-hidden="true">#</a> IgnorePlugins 避免引入无用模块</h3><blockquote><p>以 <code>moment.js</code> 为例，<code>import moment from &#39;moment&#39;</code> 默认会引入所有语言的 JS 代码，这样代码就过于的大了。 此时我们便需要避免引入其它语言的模块了。</p></blockquote><p>需要利用在 plugins 下，引入 <code>new webpack.IgnorePlugin({ resourceRegExp, contextRegExp })</code>：</p><ul><li>resourceRegExp: 用于检测资源的正则。</li><li>contextRegExp: (optional) 用于检测资源上下文(目录)的正则。</li></ul><p>以 moment.js 为例，多语言目录在<code>/locale/**</code>下，因此有：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 忽略 moment 下的 /locale 目录</span>
<span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span><span class="token operator">/</span>\\<span class="token punctuation">.</span><span class="token operator">/</span>locale<span class="token operator">/</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">moment</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其次在需要使用的地方手动引入需要使用的语言包:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">&#39;moment&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;moment/locale/zh-cn&#39;</span> <span class="token comment">// 此处多加一行, 手动引入中文语音包</span>

moment<span class="token punctuation">.</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token string">&#39;zh-cn&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 设置语言为中文</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;ll&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="noparse-避免重复打包" tabindex="-1"><a class="header-anchor" href="#noparse-避免重复打包" aria-hidden="true">#</a> noParse 避免重复打包</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对于优化后的&#39;react.min.js&#39; 文件,就没有必要重复打包</span>
    <span class="token comment">// 因此忽略对&#39;react.min.js&#39; 文件的递归解析处理</span>
    <span class="token literal-property property">noParse</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">react\\.min\\.js</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>区别于 IgnorePlugin，noParse 引入了文件，但不打包。而 IgnorePlugin 直接不引入，代码中没有该文件。</p><h3 id="happypack-多进程打包" tabindex="-1"><a class="header-anchor" href="#happypack-多进程打包" aria-hidden="true">#</a> happyPack 多进程打包</h3><ul><li>JS 单线程，开启多进程打包</li><li>提高构建速度（特别是多核 CPU）</li></ul><p>也是在 plugins 中引入:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// happyPack 开启多进程打包</span>
<span class="token keyword">new</span> <span class="token class-name">HappyPack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 用唯一标识符 id 来代表当前的 HappyPack 是用来处理一类特定的文件</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;babel&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 如何处理 .js 文件, 用啊和 Loader 配置中医院</span>
  <span class="token literal-property property">loaders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;babel-loader?cacheDirectory&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="paralleluglifyplugin-多进程压缩-js" tabindex="-1"><a class="header-anchor" href="#paralleluglifyplugin-多进程压缩-js" aria-hidden="true">#</a> ParallelUglifyPlugin 多进程压缩 JS</h3><ul><li>webpack 内置 Uglify 工具压缩 JS</li><li>JS 单线程,开启多进程压缩更快</li></ul><blockquote><p>关于开启多进程</p><ul><li>项目较大，打包较慢，开启多进程能提高速度；</li><li>项目较小，打包很快，开启多进程会降低速度（存在进程开销）；</li><li>因此需要按需使用。</li></ul></blockquote><h3 id="自动刷新和热更新" tabindex="-1"><a class="header-anchor" href="#自动刷新和热更新" aria-hidden="true">#</a> 自动刷新和热更新</h3><ul><li>自动刷新： 整个网页全部刷新，速度较慢，且状态会丢失；</li><li>热更新：新代码生效，网页不会刷新，状态不会丢失。</li></ul><h3 id="dllplugin-动态链接库插件" tabindex="-1"><a class="header-anchor" href="#dllplugin-动态链接库插件" aria-hidden="true">#</a> DllPlugin 动态链接库插件</h3><ul><li>前端框架如 vue 和 react，体积较大，构建慢；</li><li>但是框架较为稳定，不常升级。因此，同一个版本只构建一次即可，不用每次都重新构建。</li><li>webpack 已经内置 DllPlugin 支持</li></ul><h2 id="webpack-性能优化-产出代码" tabindex="-1"><a class="header-anchor" href="#webpack-性能优化-产出代码" aria-hidden="true">#</a> webpack 性能优化-产出代码</h2><blockquote><p>优化产出代码的好处有很多:</p><ul><li>体积更小</li><li>合理分包,不重复加载</li><li>速度更快,内存使用更少</li></ul></blockquote><ul><li><p>小图片采用 base64 编码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpg|jpeg|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 小于 5kb 的图片采用 base64 格式产出, 否则产出 url 格式</span>
      <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
      <span class="token comment">// 打包到 img 目录下</span>
      <span class="token literal-property property">outputPath</span><span class="token operator">:</span> <span class="token string">&#39;/img/&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>bundle 加 hash</p></li><li><p>懒加载</p></li><li><p>提取公共代码</p></li><li><p>IgnorePlugin</p></li><li><p>使用 CDN 加速</p></li><li><p>开启 Scope Hosting</p></li><li><p>使用 production 模式</p><ul><li>使用 production 模式，则会开始自动开始压缩代码；</li><li>Vue、React 等会自动删除调试代码（如开发环境的 warning）</li><li>启动 Tree-Shaking</li></ul></li></ul><blockquote><p>ES6 Module 和 CommonJS 的区别</p><ul><li>ES6 Module 是静态引入, 可以编译时引入;</li><li>CommonJS 是动态引入, 可以执行时引入;</li><li>只有 ES6 Module 才能静态分析，实现 Tree-Shaking。</li></ul></blockquote><h2 id="babel-的基础使用" tabindex="-1"><a class="header-anchor" href="#babel-的基础使用" aria-hidden="true">#</a> babel 的基础使用</h2><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><p>配置 <code>.babelrc</code> 或者 <code>babel.config.js</code>添加 babel 的预设， 以<code>.babelrc</code>为例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="babel-polyfill" tabindex="-1"><a class="header-anchor" href="#babel-polyfill" aria-hidden="true">#</a> babel-polyfill</h3><p>babel-polyfill 是一个用于在旧版浏览器中支持新的 JavaScript 特性和 API 的 Babel 插件。在 ES6（ECMAScript 2015）之后，JavaScript 引入了许多新的语法和全局对象方法，但这些功能在一些旧版浏览器中并不被支持。babel-polyfill 的目的是填充这些缺失的功能，以便在这些浏览器中使用最新的 JavaScript 特性。</p><p>babel-polyfill 在编译过程中会自动分析你的代码，并向目标环境中注入缺失的功能和 API 的代码。</p><p>需要注意的是，从 Babel 7.x 开始，推荐使用 @babel/preset-env 配合 core-js 来替代 babel-polyfill。@babel/preset-env 可以根据目标环境和配置自动引入所需的 polyfill，而 core-js 则提供了具体的 polyfill 实现。这种方式更加灵活和可定制，可以减小打包文件的体积，并且不会污染全局命名空间。</p><blockquote><p>core-js 是一个 JavaScript 库，提供了对新的 ECMAScript 标准（如 ES6、ES7、ES8 等）中新增特性的 polyfill 支持。它的目标是在不支持这些新特性的旧版 JavaScript 引擎中，通过注入缺失的功能代码来实现对这些特性的支持。</p></blockquote><h2 id="前端代码为何要进行构建和打包" tabindex="-1"><a class="header-anchor" href="#前端代码为何要进行构建和打包" aria-hidden="true">#</a> 前端代码为何要进行构建和打包?</h2><ul><li>使得代码体积更小（Tree-Shaking、压缩、合并），加载更快；</li><li>使得项目能够编译高级语言或语法（TS、ES6+、模块化、less 等）；</li><li>使得 js 代码具备兼容性和错误检查功能（Polyfill、postcss、eslint）</li><li>可以是项目组拥有统一高效的开发环境；</li><li>可以统一的构建流程和产出标准；</li><li>能够集成公司的构建规范（提测、上线等）；</li></ul><h2 id="loader-和-plugin-的区别是什么" tabindex="-1"><a class="header-anchor" href="#loader-和-plugin-的区别是什么" aria-hidden="true">#</a> loader 和 plugin 的区别是什么?</h2><ul><li>loader 是模块装换器： less -&gt; css</li><li>plugin 是扩展插件，如 HtmlWebpackPlugin</li></ul><h2 id="babel-和-webpack-的区别是什么" tabindex="-1"><a class="header-anchor" href="#babel-和-webpack-的区别是什么" aria-hidden="true">#</a> babel 和 webpack 的区别是什么?</h2><ul><li>babel 是 JS 的新语法编译转换工具，不关系模块化；</li><li>webpack 是打包构建工具，是多个 loader、plugin 的集合。</li></ul><h2 id="webpack-如何实现懒加载" tabindex="-1"><a class="header-anchor" href="#webpack-如何实现懒加载" aria-hidden="true">#</a> webpack 如何实现懒加载?</h2><p>使用动态 import：</p><p>动态 import 是 ES6 中的语法，它可以在运行时异步加载模块。Webpack 在打包时会将动态 import 转换为代码分割（code splitting），生成独立的文件，然后在需要时按需加载。</p><p>在使用动态 import 时，你可以结合使用 <code>import()</code> 函数或 <code>import(/* webpackChunkName: &quot;chunk-name&quot; */&#39;module&#39;)</code> 形式的语法。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;module&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 使用加载的模块</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="babel-runtime-和-babel-polyfill-的区别是什么" tabindex="-1"><a class="header-anchor" href="#babel-runtime-和-babel-polyfill-的区别是什么" aria-hidden="true">#</a> babel-runtime 和 babel-polyfill 的区别是什么?</h2><ul><li><p><code>@babel/runtime</code>：它是一个运行时工具库，主要用于解决编译过程中产生的重复代码问题。它包含了一组公共的辅助函数，用于替代转换过程中重复的代码片段，从而减小生成的代码体积。</p></li><li><p><code>@babel/polyfill</code>：它是一个用于在旧版浏览器中支持新的 JavaScript 特性和 API 的 polyfill 库。它会根据目标环境和配置自动引入所需的 polyfill，以填充浏览器缺失的功能和 API。</p></li></ul><h2 id="为什么-proxy-不能被-polyfill" tabindex="-1"><a class="header-anchor" href="#为什么-proxy-不能被-polyfill" aria-hidden="true">#</a> 为什么 Proxy 不能被 Polyfill?</h2><p>原因在于 Proxy 的功能用 Object.defineProperty 无法模拟。</p>`,60),c=[o];function r(u,d){return t(),i("div",null,c)}const m=n(p,[["render",r],["__file","12.html.vue"]]);export{m as default};
