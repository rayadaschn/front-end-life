const e=JSON.parse('{"key":"v-eeb7f1f0","path":"/JavaScript/Node06.html","title":"Nest、Nuxt 和 Next 的关系","lang":"zh-CN","frontmatter":{"title":"Nest、Nuxt 和 Next 的关系","icon":"nodeJS","category":["javascript"],"tag":["node"],"date":"2023-06-02T00:00:00.000Z"},"headers":[{"level":2,"title":"如何选择：","slug":"如何选择","link":"#如何选择","children":[]},{"level":2,"title":"OneMoreThing","slug":"onemorething","link":"#onemorething","children":[]}],"git":{"createdTime":1685682925000,"updatedTime":1691896604000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":3.43,"words":1030},"filePathRelative":"JavaScript/Node06.md","localizedDate":"2023年6月2日","excerpt":"<h1> Nest、Nuxt 和 Next 的关系</h1>\\n<blockquote>\\n<p>先说结论：Nest.js 是后端框架，而 Nuxt.js 和 Next.js 都是前端框架。</p>\\n</blockquote>\\n<ul>\\n<li><code>Nest.js</code> 是一个基于 TypeScript 的后端框架，它使用优秀的模块化体系结构，支持多种协议（如：HTTP、WebSocket 等），致力于提供可扩展性和高效性。它可以与现有的 Node.js 库和第三方库很好地集成，并且在大型应用程序中非常实用。</li>\\n<li><code>Nuxt.js</code> 是一个基于 Vue.js 的前端框架，它允许创建快速、可维护、SEO 友好的单页面应用程序 (SPA)。它内置了 Vuex 状态管理、Vue Router 路由解决方案和整合 SSR（服务器端渲染）能力，开发人员可以更轻松地处理 SPA 中的常见问题，如路由、异步数据、压缩和代码分割等。</li>\\n<li><code>Next.js</code> 是一个基于 React 的前端框架，它也支持服务器端渲染 (SSR)，实现了一些先进的性能优化技术并保证了 SEO 最佳实践。除此之外，它还包括可选的静态网站生成 (SSG) 功能，从而将构建时和运行时的优点结合起来，使得开发人员可以更轻松地创建高性能，易于维护的 React 应用程序和网站。</li>\\n</ul>"}');export{e as data};
