import{_ as n,X as a,Y as s,$ as e}from"./framework-97fa2d96.js";const t={},c=e,p=a,o=s,i=c(`<h2 id="函数声明和函数表达式的区别" tabindex="-1"><a class="header-anchor" href="#函数声明和函数表达式的区别" aria-hidden="true">#</a> 函数声明和函数表达式的区别</h2><ul><li>函数声明 <code>function fn() {}</code></li><li>函数表达式 <code>const fn = function() {}</code></li><li>函数声明会在代码执行前预加载，而函数表达式不会;</li><li>函数声明无法立即执行，函数表达式可以通过添加括号或调用立即执行。</li></ul><h2 id="new-object-和-object-create-的区别" tabindex="-1"><a class="header-anchor" href="#new-object-和-object-create-的区别" aria-hidden="true">#</a> new Object() 和 Object.create() 的区别</h2><ul><li><code>{}</code> 等同于 <code>new Object()</code>，原型均为 <code>Object.prototype</code>；</li><li><code>Object.create(null)</code> 没有原型，为空对象;</li><li><code>Object.create({...})</code> 可指定原型，并以此为原型返回一个“空对象”。</li></ul><blockquote><p>Object.create() 方法创建的对象并不是空对象，它是一个以指定的原型对象为原型的新对象。 <img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202308102215506.png" alt="Object.create 返回“空对象”" loading="lazy"></p></blockquote><h2 id="手写字符串-trim-方法-保证浏览器兼容性" tabindex="-1"><a class="header-anchor" href="#手写字符串-trim-方法-保证浏览器兼容性" aria-hidden="true">#</a> 手写字符串 trim 方法，保证浏览器兼容性</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">trim</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何捕获-js-中的异常" tabindex="-1"><a class="header-anchor" href="#如何捕获-js-中的异常" aria-hidden="true">#</a> 如何捕获 JS 中的异常</h2><p>手动捕获异常 try-catch-finally:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 尝试执行可能会引发异常的代码</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> a <span class="token operator">/</span> b
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Division result:&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在异常发生时执行的代码，可以对异常进行处理</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;An error occurred:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">// 无论是否发生异常，都会执行的代码块</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Finally block executed.&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 输出：Division result: 5, Finally block executed.</span>
<span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 输出：An error occurred: Infinity, Finally block executed.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析-url-参数" tabindex="-1"><a class="header-anchor" href="#解析-url-参数" aria-hidden="true">#</a> 解析 url 参数</h2><h2 id="map-和-set-有序和无序" tabindex="-1"><a class="header-anchor" href="#map-和-set-有序和无序" aria-hidden="true">#</a> Map 和 Set 有序和无序</h2><h2 id="map-和-object-的区别" tabindex="-1"><a class="header-anchor" href="#map-和-object-的区别" aria-hidden="true">#</a> Map 和 Object 的区别</h2><h2 id="set-和-array-的区别" tabindex="-1"><a class="header-anchor" href="#set-和-array-的区别" aria-hidden="true">#</a> Set 和 Array 的区别</h2><h2 id="weakmap-和-weakset" tabindex="-1"><a class="header-anchor" href="#weakmap-和-weakset" aria-hidden="true">#</a> WeakMap 和 WeakSet</h2>`,15),l=[i];function r(u,d){return p(),o("div",null,l)}const h=n(t,[["render",r],["__file","interview08.html.vue"]]);export{h as default};
