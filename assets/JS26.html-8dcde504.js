import{_ as o,Z as p,a3 as c,a0 as l,F as i,a1 as u,X as d,Y as r,$ as k}from"./framework-5dd7fabc.js";const v={},n=p,m=c,s=l,b=i,t=u,a=k,y=d,g=r,_=n("p",null,"本文将梳理一遍在 js 中如何去监听键盘按键。",-1),h=a(`<h2 id="监听键盘按键" tabindex="-1"><a class="header-anchor" href="#监听键盘按键" aria-hidden="true">#</a> 监听键盘按键</h2><p>在 js 中，可以使用 <code>addEventListener</code> 方法来监听键盘按键。具体用法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在这里编写按键被按下的逻辑</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>keydown</code> 是一个事件类型，表示监听键盘按键事件。当用户按下键盘上的按键时，会触发该事件，并在事件处理函数中执行相应的逻辑。</p><p>要获取用户按下的按键，可以使用事件对象的 <code>key</code> 属性。该属性会返回一个字符串，表示用户按下的按键。例如，如果用户按下了 <code>A</code> 键，<code>key</code> 属性的值将会是 <code>&quot;A&quot;</code>。</p><h2 id="ascii-编码" tabindex="-1"><a class="header-anchor" href="#ascii-编码" aria-hidden="true">#</a> ASCII 编码</h2>`,6),f=n("code",null,"event.key",-1),C=n("code",null,"event.key",-1),E={href:"https://datatracker.ietf.org/doc/html/rfc20",target:"_blank",rel:"noopener noreferrer"},w=a(`<p>其中数字 0-9 的 ASCII 编码值分别为 48-57，大写字母 A-Z 的 ASCII 编码值分别为 65-90，小写字母 a-z 的 ASCII 编码值分别为 97-122。</p><p>在 event 对象中 keycode 表示按键的 ASCII 编码，由此可以得到第一个按键监听处理函数:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** 按键监听器函数 */</span>
<span class="token keyword">function</span> <span class="token function">listenForKeyPress</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 监听 keydown 事件</span>
  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取按键代码</span>
    <span class="token keyword">const</span> keyCode <span class="token operator">=</span> event<span class="token punctuation">.</span>keyCode

    <span class="token comment">// 检查是否是 a-z 、A-Z 和 0-9</span>
    <span class="token keyword">const</span> isLetter <span class="token operator">=</span>
      <span class="token punctuation">(</span>keyCode <span class="token operator">&gt;=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> keyCode <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>keyCode <span class="token operator">&gt;=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> keyCode <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> isNumber <span class="token operator">=</span> keyCode <span class="token operator">&gt;=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> keyCode <span class="token operator">&lt;=</span> <span class="token number">57</span>

    <span class="token comment">// 如果是符合条件的按键，调用回调函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLetter <span class="token operator">||</span> isNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用示例</span>
<span class="token function">listenForKeyPress</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">🚀 ~ You pressed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="被淘汰的keyboardevent-keycode" tabindex="-1"><a class="header-anchor" href="#被淘汰的keyboardevent-keycode" aria-hidden="true">#</a> 被淘汰的<code>KeyboardEvent.keyCode</code></h2><p>值得注意的是 <code>KeyboardEvent.keyCode</code> 属性已经被废弃了，但是目前主流浏览器目前仍旧可以使用该属性来监听键盘按键。因此可转用 <code>KeyboardEvent.key</code> 或者 <code>KeyboardEvent.code</code> 来检测按键。它们三者的区别如下:</p>`,5),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/keyCode#%E9%94%AE%E7%A0%81%E5%80%BC%C3%A5",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"KeyboardEvent.keyCode",-1),K=n("ul",null,[n("li",null,"类型: 数字"),n("li",null,"内容: 表示物理按键的数字代码"),n("li",null,[s("特点: "),n("s",null,"已被废弃"),s("，不推荐使用，因为它在不同浏览器和键盘布局中不一致。")])],-1),I=a("<li><code>KeyboardEvent.key</code>: <ul><li>类型: 字符串</li><li>内容: 表示按键的值，和用户按下的键相关。比如，按下 <code>a</code> 键时，返回 <code>&quot;a&quot;</code>，按下 <code>Shift + a</code> 时，返回 <code>&quot;A&quot;</code>。</li><li>特点: <strong>区分大小写</strong>，反映用户输入的字符，<strong>支持不同的键盘布局</strong>。</li></ul></li><li><code>KeyboardEvent.code</code>: <ul><li>类型: 字符串</li><li>内容: 表示物理按键的位置。例如，QWERTY 布局键盘上的 <code>“q”</code> 键返回的 code 是 <code>“KeyQ”</code> ，但 Dvorak 键盘上的<code>“&#39;”</code> 键和 AZERTY 键盘上的<code>“a”</code>键也返回的相同 code 值。</li><li>特点: 稳定性不如<code>KeyboardEvent.key</code>。</li></ul></li>",2),N=a(`<p>因此目前，最为稳妥的是采用 <code>KeyboardEvent.key</code> 用字符串去监听按键事件。</p><ol><li><p>方式一：直接定义所有有效按键。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 直接定义所有有效按键</span>
<span class="token keyword">const</span> validKeys <span class="token operator">=</span>
  <span class="token string">&#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;</span>

<span class="token keyword">const</span> key <span class="token operator">=</span> event<span class="token punctuation">.</span>key

<span class="token comment">// 检查按键是否在有效按键集合中</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>validKeys<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">🚀 ~ You pressed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方式二：用正则检测字符。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 按键监听器函数</span>
<span class="token keyword">function</span> <span class="token function">listenForKeyPress</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 监听 keydown 事件</span>
  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取按键值</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> event<span class="token punctuation">.</span>key

    <span class="token comment">// 检查是否是 A-Z a-z 或 0-9</span>
    <span class="token keyword">const</span> isLetter <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token keyword">const</span> isNumber <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>

    <span class="token comment">// 如果是符合条件的按键，调用回调函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLetter <span class="token operator">||</span> isNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用示例</span>
<span class="token function">listenForKeyPress</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">🚀 ~ You pressed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,2);function j(S,L){const e=b("ExternalLinkIcon");return y(),g("div",null,[_,m(" more "),h,n("p",null,[s("若是依据 "),f,s(" 属性值来监听键盘的各种按键，无需对各个按键来一次判断，因为 "),C,s(" 属性值会返回对应按键的 ASCII ("),n("a",E,[s("RFC 20"),t(e)]),s(") 编码值。")]),w,n("ol",null,[n("li",null,[n("a",x,[A,t(e)]),s(": "),K]),I]),N])}const q=o(v,[["render",j],["__file","JS26.html.vue"]]);export{q as default};
