const e=JSON.parse('{"key":"v-02a60773","path":"/JavaScript/Node/Node11.html","title":"检查多语言重复","lang":"zh-CN","frontmatter":{"title":"检查多语言重复","icon":"nodeJS","date":"2024-11-14T00:00:00.000Z","category":["javascript"],"tag":["node"]},"headers":[{"level":2,"title":"实现逻辑","slug":"实现逻辑","link":"#实现逻辑","children":[{"level":3,"title":"1. 基本路径和目录初始化","slug":"_1-基本路径和目录初始化","link":"#_1-基本路径和目录初始化","children":[]},{"level":3,"title":"2. 创建缓存目录（如果不存在）","slug":"_2-创建缓存目录-如果不存在","link":"#_2-创建缓存目录-如果不存在","children":[]},{"level":3,"title":"3. 加载传入的文件路径列表","slug":"_3-加载传入的文件路径列表","link":"#_3-加载传入的文件路径列表","children":[]},{"level":3,"title":"4. 加载缓存并生成所有键的 Set 集合","slug":"_4-加载缓存并生成所有键的-set-集合","link":"#_4-加载缓存并生成所有键的-set-集合","children":[]},{"level":3,"title":"5. 从指定目录初始化缓存","slug":"_5-从指定目录初始化缓存","link":"#_5-从指定目录初始化缓存","children":[]},{"level":3,"title":"6. 获取 JSON 对象的最后一级键","slug":"_6-获取-json-对象的最后一级键","link":"#_6-获取-json-对象的最后一级键","children":[]},{"level":3,"title":"7. 检查重复键并更新缓存","slug":"_7-检查重复键并更新缓存","link":"#_7-检查重复键并更新缓存","children":[]},{"level":3,"title":"8. 检查文件并输出结果","slug":"_8-检查文件并输出结果","link":"#_8-检查文件并输出结果","children":[]}]},{"level":2,"title":"代码展示","slug":"代码展示","link":"#代码展示","children":[]}],"git":{"createdTime":1731514124000,"updatedTime":1731597178000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":5.04,"words":1512},"filePathRelative":"JavaScript/Node/Node11.md","localizedDate":"2024年11月14日","excerpt":"<p>最近需要检查多语言文件中是否有重复的 key，于是写了一个 Node.js 脚本来实现这个功能。</p>\\n<p>这个脚本会在 git 提交代码时，对提交的多语言文件进行校验。通过遍历指定目录下的所有 JSON 文件，检查每个文件中的 key 是否有重复，并将结果输出到控制台。同时，脚本还会将所有 key 存入一个缓存文件中，以便下次运行时可以快速查询。</p>\\n<h2> 实现逻辑</h2>\\n<p>理论依据：由于 <code>lint-staged</code> 会将<strong>暂存区中被修改的文件路径</strong>作为参数传入定义的脚本。这意味着可以在 <code>lint-staged</code> 中配置的命令中直接访问提交的文件列表，而不需要手动指定文件路径。</p>"}');export{e as data};
