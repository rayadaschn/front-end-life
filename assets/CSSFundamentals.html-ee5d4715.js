import{_ as t,X as c,Y as i,Z as p,V as l,W as d,F as u,$ as r}from"./framework-2060dede.js";const k={},n=c,s=i,v=u,o=p,a=r,g=l,m=d,b=a(`<h1 id="css-基本常识" tabindex="-1"><a class="header-anchor" href="#css-基本常识" aria-hidden="true">#</a> CSS 基本常识</h1><blockquote><p>三读《CSS 世界》，记录一些基本常识笔记，以便加固理解。</p><p>说是基本常识，实际上还是算内容进阶。</p></blockquote><h2 id="基础内容" tabindex="-1"><a class="header-anchor" href="#基础内容" aria-hidden="true">#</a> 基础内容</h2><ul><li><p><strong>长度单位</strong></p><ul><li>相对字体长度单位：<code>em</code> 、<code>rem</code>、<code>ch</code>（字符 0 的宽度）；</li><li>相对视区长度单位： <code>vh</code>（视高）、<code>vw</code>（视宽）。</li></ul></li><li><p><strong>选择器</strong></p><ul><li>类 选择器：“<code>.</code>” 开头；</li><li>ID 选择器：“<code>#</code>” 开头；</li><li>属性选择器： 指含有“<code>[]</code>”选择器，如 <code>[title]{}</code>；</li><li>伪类选择器： 指前面有一个英文冒号（<code>:</code>）</li><li>伪元素选择器： 指前面有一个英文冒号（<code>::</code>），如： <code>::before</code>、<code>::after</code>。</li></ul></li><li><p><strong>关系选择器</strong></p><ul><li>后代选择器： 空格连接；</li><li>相邻后代选择器：<code>&gt;</code> 连接；</li><li>兄弟选择器：<code>~</code> 连接；</li><li>相邻兄弟选择器：+连接。</li></ul></li><li><p><strong>块级元素</strong></p><p><code>display</code> 为 <code>block</code>、<code>table</code>和如 <code>&lt;li&gt;</code>元素的 <code>list-item</code> 。</p><p>代表: <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;table&gt;</code> 等</p><p>块级元素具有换行特性，可以配合 <code>clear</code> 属性清除浮动带来的影响。</p><ul><li><code>list-item</code>是标记盒子，专门用于存放圆点和数字这些项目符号。</li><li>如行内块 <code>display：inline-block</code> ，实际上是由俩个盒子共同组成，一个内部块级的“容器盒子”和一个外部的内联级的外在盒子共同组成。</li></ul></li><li><p><strong>内联元素</strong></p><p><code>display</code> 为<code>inline</code>、 <code>inline-bloc</code> 和 <code>inline-table</code>。</p><p>如： <code>&lt;span&gt;</code>、 <code>&lt;button&gt;</code> 、 <code>&lt;img&gt;</code> 、<code>&lt;em&gt;</code></p><p>需要注意的是，内联盒子模型中，存在一个幽灵空白节点，在 <code>line-height</code> 和 <code>vertical-align</code> 影响巨大。</p><h3 id="内容区域、内联盒子、行框盒子、包含盒子" tabindex="-1"><a class="header-anchor" href="#内容区域、内联盒子、行框盒子、包含盒子" aria-hidden="true">#</a> 内容区域、内联盒子、行框盒子、包含盒子</h3><ul><li><p><strong>内容区域(content area)</strong>：是一种围绕文字看不见的盒子，其大小仅受字符本身特性控制，本质上是一个字符盒子（character box）。内容区域的大小与 <code>font-size</code> 大小和 <code>font-family</code> 相关，与 <code>line-height</code> 没有任何关系。</p></li><li><p><strong>内联盒子(inline boxes)</strong>：<strong>每个行内元素会生成一个行内框</strong>，行内框是一个浏览器渲染模型中的一个概念，无法显示出来。内联盒子不会让内容成块显示，而是排成一行。</p><p>如：外部包含 inline 水平的标签(span、a、em、strong 等)，则属于内联盒子。如果是个光秃秃的文字，则属于匿名内联盒子。行内框默认等于内容区域，除非设置了 padding。</p></li><li><p><strong>行框盒子(line boxes)：</strong> <strong>每一行就是一个行框盒子，每个行框盒子又是由一个一个内联盒子组成</strong>。行框盒子是浏览器渲染模式中的一个概念，无法显示出来。行框高度等于本行中所有行内框高度的最大值。<strong>当有多行内容时，每一行都有自己的行框</strong>。</p></li><li><p><strong>包含盒子(containing box)</strong>：或者准确为<strong>包含块</strong>，<strong>由一行一行的行框盒子组成</strong>，<strong>高度就是单行文本高度的累加</strong>。</p></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/20230318123201.png" alt="盒子模型" tabindex="0" loading="lazy"><figcaption>盒子模型</figcaption></figure></li><li><p><strong>幽灵空白节点</strong>，内联元素的所有解析和渲染表现就如同每个行框盒子的前面有一个“空白节点”，这个“空白节点”永远透明，不占据任何宽度，看不见也无法通过脚本获取，就如同幽灵一样，但又确确实实地存在，表现如图文本节点一般。</p></li></ul><h2 id="width-宽度特性" tabindex="-1"><a class="header-anchor" href="#width-宽度特性" aria-hidden="true">#</a> width 宽度特性</h2><ul><li><p><code>width:auto</code> 特性</p><ul><li>充分利用可用空间</li><li>收缩与包裹</li><li>收缩到最小</li><li>超出容器限制</li></ul><p><code>width</code> 宽度是加在 <code>content box</code>内容盒子上的。</p><p>包裹性实用案例:</p><p>页面某个模块文字内容是动态的，希望文字较少时居中显示，文字超过一行时局左显示：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 方案一 */</span>
<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.content</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 方案二 css3 fit-content */</span>
<span class="token selector">.content</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> fit-content<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>fit-content</code> 相当于紧身裤，内容多宽，盒子就多宽。</p><p>优点: 保留了 <code>display</code> 的计算值，让尺寸有了确定的值。</p></blockquote></li><li><p><code>box-sizing: border-box</code></p><p><code>width</code> 的宽度最终是施加于 <code>content box</code> 内容盒子上。影响盒子的大小可以用 css3 中的 <code>box-sizing</code> 改变，或者用 “宽度分离” ，在外部增加一个设置宽度确定的父级元素。</p><p>一般而言，需要重置 <code>width</code> 宽度的为：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">input,
textarea,
img,
video,
object</span> <span class="token punctuation">{</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="height-高度特性" tabindex="-1"><a class="header-anchor" href="#height-高度特性" aria-hidden="true">#</a> height 高度特性</h2><ul><li>百分比%</li></ul><p><code>width</code> 宽度就算父元素 <code>width:auto</code> ，其百分比也是支持的。但是对于 <code>height</code> ，百分比高度必须其父级有一个可以生效的高度值！</p><blockquote><p>为何父元素高度不指定，子元素的百分比无法渲染计算？这是由浏览器渲染原理造成的。</p><p>浏览器首先，先下载文档内容，加载头部样式资源。然后，<strong>按照从上而下、自外而内的顺序渲染 DOM 内容。即，先渲染父级元素，后渲染子集元素。</strong></p><p>对于宽度而言，父级元素是先以子元素的占位宽度为加载宽度的，等到子元素渲染时，<code>width：100%</code>，便会继承该宽度，多元素宽度叠加超过了父元素宽度，则造成溢出。</p><p>对于高度而言，父级元素的高度没有显示指定（高度由内容决定），并且该元素不是绝对定位，则计算值为 <code>auto</code>，因此，子元素的高度用 百分比无法计算。</p></blockquote><p>解决办法:</p><ol><li>设定显示高度值；</li><li>使用绝对定位。绝对定位的宽高百分比是基于 <code>padding box</code>，非绝对定位则是基于 <code>content box</code>。</li></ol><p><code>min-width</code>、<code>min-height</code> 初始值是 <code>auto</code>；<code>min-width</code>、<code>min-width</code>初始值是 <code>none</code>。</p><p>它们的覆盖值超越 <code>!important</code> 。</p><p>应用实例，点击按钮，高度动画展开：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.element</span> <span class="token punctuation">{</span>
  <span class="token property">max-height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> max-height 0.25s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.element.active</span> <span class="token punctuation">{</span>
  <span class="token property">max-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，此处的展开高度应设置的足够小。在回收缩放的时候，使得延迟难以察觉。</p></blockquote><h2 id="替换元素-和-非替换元素" tabindex="-1"><a class="header-anchor" href="#替换元素-和-非替换元素" aria-hidden="true">#</a> 替换元素 和 非替换元素</h2><p>替换元素的定义是通过修改某个属性值呈现的内容就可以被替换的元素。如： <code>&lt;img&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;iframe&gt;</code>和表单元素<code>&lt;textarea&gt;</code>和<code>&lt;input&gt;</code>都是替换元素。</p><p>替换元素的特性：</p><ul><li>内容的外观不受页面上的 CSS 影响；</li><li>拥有自己的尺寸，可能为 0；</li><li>在很多 CSS 属性上拥有自己的一套表现规则：<code>vertical-align</code> 非替换元素为字符<code>x</code>的下边缘，而替换元素的基线为元素的下边缘。</li></ul><p><strong>替换元素和非替换元素之间只隔了一个 CSS <code>content</code>属性。</strong></p><ul><li><p>替换元素之所以可以替换，就是其拥有 <code>content</code>属性，这个属性替换的内容为 <code>content box</code>。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">img:hover</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>xxx.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>content</code>属性改变的仅仅是视觉呈现。所以保存图片时，保存的还是原来的 <code>src</code>所对应的图片。</p></li><li><p><code>content</code> 生成的文本是无法选中、复制的，就如同设置了 <code>user-select：none</code> 声明一般。</p></li><li><p>不能左右 <code>:empty</code> 伪类。</p></li><li><p><code>content</code> 动态生成值无法获取。</p></li></ul><h2 id="盒子模型" tabindex="-1"><a class="header-anchor" href="#盒子模型" aria-hidden="true">#</a> 盒子模型</h2><h3 id="padding-较为温和" tabindex="-1"><a class="header-anchor" href="#padding-较为温和" aria-hidden="true">#</a> padding 较为温和</h3><ul><li><p>在默认情况下，<code>css</code>的盒子里 <code>box-sizing:content-box</code>，所以 <code>padding</code> 会增加元素的尺寸。</p></li><li><p>对于非替换元素的内联元素，<code>padding</code> 和 <code>margin</code> 不会加入行盒子的高度计算。</p></li><li><p><code>padding</code> 垂直和水平的百分比是基于 <code>width</code> 宽度。</p><p>若是在块级特性上，<code>padding</code> 的百分比还有一个特性，就是会断行。</p></li></ul><h3 id="margin-较为激进" tabindex="-1"><a class="header-anchor" href="#margin-较为激进" aria-hidden="true">#</a> margin 较为激进</h3><p><code>padding</code>负责内间距，而 <code>margin</code> 负责外间距。俩者差别较大：</p><ul><li><p><code>margin</code> 的尺寸实际上相当于“空间”。所以它可以是负值，模块向内裁剪了。</p></li><li><p>需要注意的是： 对于普通流体元素，<code>margin</code> 只能改变元素的水平方向尺寸；对于具有拉伸特性的绝对定位元素，则水平或垂直方向都可以，此时符合“充分利用可用空间”原则。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 图片左侧, 右侧文字 */</span>
<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box &gt; img</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box &gt; p</span> <span class="token punctuation">{</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 除去行内块最后一块的 margin 间距 */</span>
<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box &gt; li</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> <span class="token comment">/* 最后一个会有 margin 间距 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 双栏瀑布流 */</span>
<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">ovewflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box-content-right,
.box-content-left</span> <span class="token punctuation">{</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -9999px<span class="token punctuation">;</span>
  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 9999px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释一下，<strong>双栏瀑布流</strong>：<code>margin-bottom: -9999px</code> 意味着元素的外部尺寸在垂直方向上小了 <code>-9999px</code> 。默认情况下，垂直方向块级元素上下距离为 0，一旦<code>margin-bottom: -9999px</code> 就意味着后面所有元素和上面元素的空间距离变成了 <code>-9999px</code> ，也就是后面的元素都向上移动了 <code>9999px</code>。此时，通过 <code>padding-bottom: 9999px</code> 增加元素高度，这正负一抵消，对布局层并无影响，但却带来了 <strong>视觉层 <code>9999px</code> 高度的可使用的背景色</strong> 。但是这里的 <code>9999px</code> 背景实在是太大了，所以父级用 <code>ovewflow: hidden</code> 把多出来的色块背景隐藏掉了，于是实现了视觉上的等高布局效果。</p><p>缺点：子元素如果需要定位到容器之外的地方，父级的 <code>ovewflow: hidden</code> 是一个棘手的限制；其次，当触发锚点定位或者使用 <code>DOM.scrollIntoview()</code> 方法时，可能会出现奇怪的定位问题。</p></li><li><p><code>margin</code> 的百分比值，<strong>无论是水平方向还是垂直方向都是相对于宽度计算的</strong>。</p></li><li><p><code>margin</code> 存在合并效果，这点也和 <code>padding</code> 不同。</p><p>发生条件： <strong>块级元素 并且 只发生在垂直方向。</strong></p><p>合并规则： “正正取大值”、“正负相抵消相加”、“负负最负值”。</p></li><li><p><code>margin: auto</code> 非常好用！！！，<strong><code>margin: auto</code> 的填充规则</strong>:</p><ul><li>如果一侧定值，一侧 <code>auto</code>，则 <code>auto</code> 为剩余空间大小;</li><li>如果俩侧都是 <code>auto</code>，则平分剩余空间。</li></ul></li></ul><h3 id="border-边框" tabindex="-1"><a class="header-anchor" href="#border-边框" aria-hidden="true">#</a> border 边框</h3><ul><li><p><code>border-width</code> 不支持百分比</p></li><li><p><code>border-style</code>，默认为 <code>none</code>。因此，单独设置以下样式是无边框的：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要加 <code>border-style: solid</code> :</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>border-color</code>在没有指定颜色时，会默认使用当前元素的<code>color</code>计算值作为边框颜色。</strong> 类似特性在 <code>outline</code>、<code>box-shadow</code>、<code>text-shadow</code> 都有类似特性。</p><p>应用：如利用行内元素（ <code>&lt;a&gt;</code> ）的边宽做下划线，则鼠标覆盖时，边框也会一同变色。</p></li><li><p>透明边框可以增加点击区域：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.icon</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 10px solid transparent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>三角形绘制:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 倒三角形 */</span>
<span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 10px solid<span class="token punctuation">;</span>
  <span class="token property">border-color</span><span class="token punctuation">:</span> #f30 transparent transparent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="最难内联元素" tabindex="-1"><a class="header-anchor" href="#最难内联元素" aria-hidden="true">#</a> 最难内联元素</h2><p>块级元素负责结构，而内联元素负责内容。</p><p><code>display</code> 计算值为 <code>inline</code>、<code>inline-block</code>、<code>inline-table</code> 或 <code>inline-cell</code> 的元素；</p><p>常见内联元素: <code>&lt;span&gt;</code> 、<code>&lt;strong&gt;</code> 、<code>&lt;em&gt;</code> ;</p><p>常见替换元素: <code>&lt;img&gt;</code> 、<code>&lt;button&gt;</code> 、<code>&lt;input&gt;</code> 。</p><h3 id="俩大难点-line-height和vertical-align" tabindex="-1"><a class="header-anchor" href="#俩大难点-line-height和vertical-align" aria-hidden="true">#</a> 俩大难点：<code>line-height</code>和<code>vertical-align</code></h3><h4 id="line-height-内联元素高度之本" tabindex="-1"><a class="header-anchor" href="#line-height-内联元素高度之本" aria-hidden="true">#</a> <code>line-height</code> 内联元素高度之本</h4>`,38),h=a("<li><p>对于非替换元素的纯内联元素，其可视高度完全由 <code>line-height</code> 决定。</p><p><code>line-height</code> 的高度由固定高度（行距）和不固定高度（<code>font-size</code>）决定。</p><p>行距就是文字之间的间隔，计算公式：<strong><code>行距 = line-height - font-size </code></strong> 。</p></li><li><p><code>line-height</code> 默认值在各个浏览器中的值不一样。其最终高度值同 <code>font-size</code> 相关，<strong>若为数值 一般建议为 1.5</strong>。</p><p>计算公式: <strong><code>line-height最终高度 = line-height数值 * font-size </code></strong> 。</p><p>也可以为百分比值，但百分比值的所有子元素继承的是计算结果的最终值，不会同数值一样，依据自身 <code>font-size</code>变化。</p><p>也可以为长度具体值， 如 15px。</p></li><li><p><code>line-height</code> 对块级元素本身没有任何作用，实质是通过改变块级元素里的内联级元素占据的高度而变化的。</p></li>",3),x=n("p",null,"需要注意的是每个行框盒子外部都有一个宽度为 0 ，表现形式都如同字符的“幽灵节点”。",-1),f=n("code",null,"line-height",-1),y={href:"https://demo.cssworld.cn/5/2-6.php",target:"_blank",rel:"noopener noreferrer"},w=a(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box box1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>span: line-height:20px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box box2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>span: line-height:20px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 280px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 1em auto<span class="token punctuation">;</span>
  <span class="token property">outline</span><span class="token punctuation">:</span> 1px solid #beceeb<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #f0f3f9<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box1</span> <span class="token punctuation">{</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 96px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box1 span</span> <span class="token punctuation">{</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.box2</span> <span class="token punctuation">{</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box2 span</span> <span class="token punctuation">{</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 96px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上，<strong>俩个 <code>.box</code> 的行高都是 <code>96px</code></strong> ，原因就是幽灵节点，高度也是 <code>96px</code>，而<strong>行框盒子</strong>的高度是由最高的那个内联盒子觉得，所以最终<code>.box</code> 的行高也是 <code>96px</code>。</p>`,3),_=a('<p>关于 <code>line-height</code> 的几个误区:</p><ul><li><p>误区 1：“要想让单行文字垂直居中，只要设置 <code>line-height</code> 大小和 <code>height</code>高度一样就行了。” 其实，当然从效果上看确实如此。（原理：行高等于盒子高度，中间内容天然垂直居中显示）但是这句话也存在误导，只需要设置 <code>line-height</code> 就行了（盒子高度由行高决定）。</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/20230318125852.png" alt="误区 1" tabindex="0" loading="lazy"><figcaption>误区 1</figcaption></figure></li><li><p>误区 2： “行高控制文字垂直居中，不使用于多行。”实际上，多行也可以。（准确是说近似居中，如微软雅黑文字会略微下沉）多行垂直居中的原理和单行的不同，需要借助 <strong><code>vertical-align</code></strong> 。原理如下：</p><p>多行文字用一个标签包裹起来，然后设置 <code>display: inline-block</code>。好处在于既能重置外部的 <code>line-height</code>为正常大小，又能保持内联元素 特性，从而可以设置 <code>vertical-align: middle</code> （只对内联元素有效），并且会带来一个幽灵空白节点，有了这个幽灵节点，可以让行高 <code>line-height</code> 有了作用对象，从而相当于在盒子外部撑起了一个高度与父元素相当的内联元素。</p><p>并且，内联元素默认基线对齐，所以，可以达到想要的结果。</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/20230318131410.png" alt="误区 2" tabindex="0" loading="lazy"><figcaption>误区 2</figcaption></figure></li></ul><h4 id="vertical-align" tabindex="-1"><a class="header-anchor" href="#vertical-align" aria-hidden="true">#</a> <code>vertical-align</code></h4><p><strong><code>vertical-align</code></strong> 用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式。它只对行内元素、表格单元格元素生效，<strong>不能用它垂直对齐块级元素</strong>。</p><p>取值：<code>top</code> 和 <code>bottom</code> 对齐边缘为行框盒子； <code>baseline</code> 和 <code>middle</code> 对齐为字符 x 。</p><p><strong>作用前提: 只能应用于内联元素以及 <code>display</code> 值为 <code>table-cell</code> 的元素。</strong></p><p><code>vertical-align</code> 同 <code>line-height</code> 的关系：<code>vertical-align</code> 的百分比值由 <code>line-height</code> 决定， <code>line-height</code> 同 <code>font-size</code> 相关。因此，<code>font-size</code> 越大，字符的基线等也会随之变化。</p><p>带来的影响，如图片底部留有空隙的问题：任意一个块级元素，里面若有图片，则块级元素高度基本上都要比图片的高度高。原理就是“幽灵空白节点”、“line-height” 和“vertical-align” 的共同作用。</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/20230318132718.png" alt="图片底部空隙" tabindex="0" loading="lazy"><figcaption>图片底部空隙</figcaption></figure>',9),q={href:"https://demo.cssworld.cn/5/3-5.php",target:"_blank",rel:"noopener noreferrer"},z=a("<ul><li>图片块状化。<code>display: block</code></li><li>容器 <code>line-height</code> 足够小。如 <code>line-height:0</code></li><li>容器 <code>font-size</code> 足够小。<code>line-height</code>和 <code>font-size</code>相关，因此可以设置 <code>font-size: 0</code></li><li>图片设置其它 <code>vertical-align</code> 值，可以设置成 <code>top</code>、<code>middle</code>和 <code>bottom</code>中的任意一个。</li></ul><p>注意点：<strong><code>vertical-align</code> 的属性默认值为 <code>baseline</code> 在文本之类的内联元素就是字符 <code>x</code> 的下边缘，对于替换元素则是替换元素的下边缘。但是，如果是 <code>display: inline-block</code> 元素，规则要复杂一些：</strong></p><ul><li>一个 <code>display: inline-block</code> 元素，如果里面没有内联元素，或者 <code>overflow</code> 不是 <code>visible</code> ，则该元素的基线就是其 <code>margin</code> 底边缘；否则，其<strong>基线就是元素里面最后一行内联元素的基线</strong>。</li></ul>",3),S={href:"https://demo.cssworld.cn/5/3-7.php",target:"_blank",rel:"noopener noreferrer"},C=a(`<ul><li>图标高度和当前行高都是 20px；</li><li>图标标签里面永远有字符；</li><li>图标 CSS 不使用 <code>overflow: hidden</code> ，保证基线为里面字符的基线，但是要让里面潜在的字符不可见。</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.icon</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
  <span class="token property">letter-spacing</span><span class="token punctuation">:</span> -1em<span class="token punctuation">;</span> <span class="token comment">/* 字符间隔 */</span>
  <span class="token property">text-indent</span><span class="token punctuation">:</span> -999em<span class="token punctuation">;</span> <span class="token comment">/* 隐藏文字 */</span>
<span class="token punctuation">}</span>
<span class="token selector">.icon:before</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;\\3000&quot;</span><span class="token punctuation">;</span> <span class="token comment">/* 图标里面有文字,此处为空格 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最终应用： 水平垂直居中弹窗</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialog<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>占位内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/* 弹窗水平居中*/</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token comment">/* 压缩中心点 */</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> 99<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 借助伪元素创建了一个和外部容器一样高的,宽度为0的 inline-bolck 元素。类似于“幽灵空白节点” */</span>
<span class="token selector">.container:after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span> <span class="token comment">/* inline-bolck 元素，中心点垂直居中 */</span>
<span class="token punctuation">}</span>
<span class="token selector">.dialog</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span> <span class="token comment">/* 弹窗元素也垂直居中, 不设置此,则只是近似垂直居中 */</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键原理：<code>vertical-align: middle</code> 定义了元素的中线和字符 x 中心点对齐。在上述中，<code>container</code>容器设置了 <code>font-size: 0</code> ，所以 x 中心点位置就是 <code>container</code> 的上边缘，此时，高度 100% 的宽度为 0 的伪元素和这个中心点位置对齐。如果中心点位置不动，这个伪元素的上半部分位置应该在容器的外部（好好理解一下这句话），但是 CSS 中默认是左上角排列对齐。所以伪元素和这个原本在容器上边缘的 x 中心点一起往下移动了半个容器高度。也就是说，此时 x 中心点就在容器的垂直中心线上。</p><p>其次， 弹窗元素也设置了 <code>vertical-align: middle</code> ，此时弹窗的垂直中心位置和 x 中心点位置对齐。x 中心点就在容器的垂直中心位置。于是弹窗和容器的垂直中心就对齐了。</p><h2 id="布局方式" tabindex="-1"><a class="header-anchor" href="#布局方式" aria-hidden="true">#</a> 布局方式</h2><h3 id="bfc-块级格式化上下文" tabindex="-1"><a class="header-anchor" href="#bfc-块级格式化上下文" aria-hidden="true">#</a> BFC 块级格式化上下文</h3><p>BFC 的全称为 block formatting context。实际作用：当一个元素具有 BFC，那么内部子元素不会影响到外部元素。相当于结界隔离起来了。</p><p>因此，能够触发 BFC 的方法有：</p><ol><li><code>&lt;html&gt;</code> 根元素；</li><li><code>float</code> 的值不为 none，浮动元素；</li><li><code>overflow</code> 的值为 <code>auto</code>、<code>scroll</code>或者 <code>hidden</code>，能够截取元素；</li><li><code>display</code>的值为 <code>table-cell</code>、<code>table-captain</code>和 <code>inline-block</code> 等行内块级化；</li><li><code>position</code> 不为 <code>relative</code> 和 <code>static</code>，脱离文档流。</li></ol><p>上面这些方法无需使用 <code>clear:both</code> 属性去除浮动的影响，即可实现 BFC。BFC 的实际目的就是为了去除浮动的影响，附带有去除 <code>margin</code> 重叠。</p><h3 id="关于-overflow" tabindex="-1"><a class="header-anchor" href="#关于-overflow" aria-hidden="true">#</a> 关于 overflow</h3><p><code>overflow</code>的属性值有：</p><ul><li><code>visible</code> 默认显示；</li><li><code>hidden</code> 裁剪；</li><li><code>scroll</code>：<strong>滚动条区域一直在</strong>；</li><li><code>auto</code>： 不足以滚动时没有滚动条，可以滚动时滚动条出现。</li></ul><blockquote><p>关于滚动条：HTML 中有俩个标签是默认可以产生滚动条的，一个是根元素<code>&lt;html&gt;</code> ，另一个是文本域<code>&lt;textarea&gt;</code>。产生原因，是因为这俩个标签的 <code>overflow</code> 属性不是 <code>visible</code> 而是 <code>auto</code>。</p></blockquote><p>自定义滚动条，需要支持 <code>-webkit-</code> 前缀的浏览器（如 Chrome）：</p><ul><li>整体部分，<code>::-webkit-scrollbar</code></li><li>两端部分，<code>::-webkit-scrollbar-button</code></li><li>外层轨道，<code>::-webkit-scrollbar-track</code></li><li>内层轨道，<code>::-webkit-scrollbar-track-piece</code></li><li>滚动滑块，<code>::-webkit-scrollbar-thumb</code></li><li>边角，<code>::-webkit-scrollbar-corner</code></li></ul><p>一般会用的自定义：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">::-webkit-scrollbar</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 定义整体血槽宽高 */</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">::-webkit-scrollbar-thumb</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 拖动条 */</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">::-webkit-scrollbar-track</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 底部背景墙 */</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用 <code>overflow</code> 单行文字溢出：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.text</span> <span class="token punctuation">{</span>
  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用 <code>overflow</code> 单多行文字溢出：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.text</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 最多显示两行 补充代码 */</span>
  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>
  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>
  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>
  <span class="token comment">/* 补充代码 */</span>
  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="锚点定位" tabindex="-1"><a class="header-anchor" href="#锚点定位" aria-hidden="true">#</a> 锚点定位</h3><p>锚点定位是改变<strong>容器</strong>滚动高度或者宽度来实现的，并且定位行为是由内而外的。</p><p>返回页面顶部的方法有俩种：</p><ul><li><p>URL 的 <code>#</code> 返回（推荐）</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>返回顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>URL 的 <code>JavaScript:</code> 返回</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript:<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>返回顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="绝对定位-absolute" tabindex="-1"><a class="header-anchor" href="#绝对定位-absolute" aria-hidden="true">#</a> 绝对定位 absolute</h2><p>设置了绝对定位的元素会被块状化。自适应的最大宽度由器“包含块”决定。</p><blockquote><p>普通元素的包含块是其父元素，而绝对定位元素的宽度是相对于第一个 <code>position</code> 不为 <code>static</code>的祖先元素决定。</p><ul><li>根元素（可看成<code>&lt;html&gt;</code>）被称为初始包含块，其尺寸等同于浏览器的可视窗口大小。</li><li>对于其它元素，若该元素的 <code>position</code> 为<code>relative</code>或 <code>static</code>，则包含块由其最近的块统一祖先盒的 content box 边界形成。</li><li>若元素的 <code>position:fixed</code>，则包含块是初始包含块，即<code>&lt;html&gt;</code>。</li><li>若元素的 <code>position:absolute</code>，则包含块位最近的<code>position</code> 不为 <code>static</code>的祖先元素决定。</li></ul></blockquote><h2 id="相对定位-relative" tabindex="-1"><a class="header-anchor" href="#相对定位-relative" aria-hidden="true">#</a> 相对定位 relative</h2><p><code>relative</code>的定位有俩大特性：相对自身、无侵入。</p><p>值得注意的是，虽然定位位移是相对于自身，但是百分比值的计算值不是。<code>top</code>和<code>bottom</code>的百分比计算值和 <code>height</code>一样。同时，若包含块的高度是 <code>auto</code>（父元素没有设置高度或不是“格式化高度”），那么计算值是 0，结果无偏移。</p><p>最小化影响原则：</p><ul><li>尽量不使用 <code>relative</code>，先试试能否用无依赖的绝对定位；</li><li>若场景受限，一定要使用 <code>relative</code>，并且改 <code>relative</code>务必最小化，即只影响我们需要的元素。</li></ul><h2 id="css-层叠规则" tabindex="-1"><a class="header-anchor" href="#css-层叠规则" aria-hidden="true">#</a> CSS 层叠规则</h2><p><code>z-index</code>值有定位元素不为 <code>static</code>时，才生效，可以是正数也可以是负数。（CSS3 中 <code>transform</code>不为 <code>none</code> 也会产生层叠上下文）</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202304281651927.png" alt="层叠规则" tabindex="0" loading="lazy"><figcaption>层叠规则</figcaption></figure><p>层叠规则：</p><ul><li>谁大谁上，层叠水平值大的覆盖层叠小的那一个；</li><li>后来居上，当层叠在同一水平时，DOM 流在后面的覆盖前面的。请注意务必根据 DOM 元素的层级关系进行层叠对比！</li></ul><p>层叠上下文元素和定位元素是一个层叠顺序的，于是当它们发生层叠时，遵循“后来居上”准则。</p><p>CSS3 中新的层叠顺序规则：</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202304281649520.png" alt="新的层叠顺序规则" tabindex="0" loading="lazy"><figcaption>新的层叠顺序规则</figcaption></figure><ul><li>若层叠上下文元素不依赖 <code>z-index</code>数值，则其层叠顺序是<code>z-index:auto</code>，可看成是<code>z-index:0</code>级别；</li><li>若层叠上下文元素依赖 <code>z-index</code>数值，则其层叠顺序由<code>z-index</code>数值决定。</li></ul><h2 id="文本处理能力" tabindex="-1"><a class="header-anchor" href="#文本处理能力" aria-hidden="true">#</a> 文本处理能力</h2><h3 id="_1-font-size" tabindex="-1"><a class="header-anchor" href="#_1-font-size" aria-hidden="true">#</a> 1. font-size</h3><p><code>line-height</code> 的部分类别属性值（数值型）是相对于 <code>font-size</code> 计算的，<code>vertical-align</code> 百分比值属性值又是相对于<code>line-height</code>计算的。</p><p>几个高度单位：</p><ul><li><code>ex</code>：字符 x 高度，显然和 font-size 关系密切。</li><li><code>em</code>：em 在传统排版中指一个字模的高度，其一般由<code>&#39;M&#39;</code>的宽度决定（方方正正），在中文中 em 就是“中”字的高度。em 相对于当前元素。</li><li><code>rem</code>：rem 相对于根元素（<code>&lt;html&gt;</code>）。</li></ul><h3 id="_2-font-family" tabindex="-1"><a class="header-anchor" href="#_2-font-family" aria-hidden="true">#</a> 2. font-family</h3><p>支持两类数值，一是“字体名”，二是“字体族”。</p><p>若是字体名包含空格，需要使用引号包起来。</p><h3 id="_3-font-weight" tabindex="-1"><a class="header-anchor" href="#_3-font-weight" aria-hidden="true">#</a> 3. font-weight</h3><p>表示&quot;字重&quot;，表示文字的粗细程度。</p><p>400 表示文字正常，等同于 normal；700 等同于 bold。</p><h3 id="_4-font-style" tabindex="-1"><a class="header-anchor" href="#_4-font-style" aria-hidden="true">#</a> 4. font-style</h3><p>表示文字是斜体还是正体。</p><ul><li><code>font-style: normal;</code></li><li><code>font-style: italic;</code> 使用当前字体的斜体字体。</li><li><code>font-style: oblique;</code> 只是单纯让字体形状变形。</li></ul><h3 id="_5-缩写-font" tabindex="-1"><a class="header-anchor" href="#_5-缩写-font" aria-hidden="true">#</a> 5. 缩写 font</h3><p>缩写在 font 属性中的属性非常多，包括 font-style、font-variant、 font-weight、font-size、line-height、font-family 等。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>[ [ font-style || font-variant || font-weight ]? font-size [ / line-height ]? font-family ]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ <code>||</code>表示或，<code>?</code>和正则表达式中的<code>?</code>的含义一致，表示 0 个或 1 个。仔细观察上面的语法，会发现 <code>font-size</code> 和 <code>font-family</code> 后面没有问号，也就是说是必需的，是不可以省略的。这和 <code>background</code> 属性不一样，<code>background</code> 属性虽然也支持缩写，但是并没有需要两个属性值同时存在的限制。</p><blockquote><p>如果你的 font 属性缩写无效，检查一下 <code>font-size</code> 和 <code>font-family</code> 这两个属 性是否同时存在。</p></blockquote><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 实践方法 */</span>
<span class="token selector">html</span> <span class="token punctuation">{</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> -apple-system<span class="token punctuation">,</span> BlinkMacSystemFont<span class="token punctuation">,</span> <span class="token string">&quot;Microsoft YaHei&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="background-背景" tabindex="-1"><a class="header-anchor" href="#background-背景" aria-hidden="true">#</a> background 背景</h2><p>当我们使用 <code>background</code> 属性的时候，实际上使用的是一系列 <code>background</code> 相关属性的集合，包括:</p><ul><li><code>background-image: none</code> 背景图片地址。</li><li><code>background-position: 0% 0%</code></li><li><code>background-repeat: repeat</code></li><li><code>background-color: transparent</code></li><li><code>background-attachment: scroll</code></li></ul><h3 id="background-position-百分比计算方式" tabindex="-1"><a class="header-anchor" href="#background-position-百分比计算方式" aria-hidden="true">#</a> background-position 百分比计算方式</h3><p><code>&lt;position&gt;</code>值支持 1~4 个值，可以是具体数值，也可以是百分比值，还可以是 <code>left</code>、 <code>top</code>、<code>right</code>、<code>center</code> 和 <code>bottom</code> 等关键字。</p><p>如果缺省偏移关键字，则会认为是 <code>center</code>，因此 <code>background-position:top center</code> 可以直接写成 <code>background-position:top</code>。</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202304281718773.png" alt="position 偏移方式" tabindex="0" loading="lazy"><figcaption>position 偏移方式</figcaption></figure><p>百分比计算公式：</p><ul><li><strong>positionX = (容器的宽度 - 图片的宽度) * percentX;</strong></li><li><strong>positionY = (容器的高度 - 图片的高度) * percentY;</strong></li></ul><h3 id="background-color" tabindex="-1"><a class="header-anchor" href="#background-color" aria-hidden="true">#</a> background-color</h3><p><code>background</code> 无论是单背景图还是多背景图，背景色一定是在最底下的位置。</p>`,77);function B(I,F){const e=v("ExternalLinkIcon");return g(),m("div",null,[b,n("ul",null,[h,n("li",null,[x,n("p",null,[s("因此，"),f,s(" 还有一个"),n("a",y,[s("大值特性"),o(e)]),s(" ：")]),w])]),_,n("p",null,[n("a",q,[s("解决办法"),o(e)]),s(":")]),z,n("p",null,[n("a",S,[s("20px 图标文字对齐办法"),o(e)]),s("：")]),C])}const V=t(k,[["render",B],["__file","CSSFundamentals.html.vue"]]);export{V as default};
