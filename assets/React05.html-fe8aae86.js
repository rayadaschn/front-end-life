const e=JSON.parse(`{"key":"v-6b57ee7f","path":"/Framework/React05.html","title":"React之路由管理","lang":"en-US","frontmatter":{"title":"React之路由管理","icon":"react","category":["框架"],"tag":["React"],"star":true,"sticky":false,"description":"React之路由管理 前言 前端路由的核心是改变 URL，但是也没不进行整体的刷新。由此带来了俩种模式：Hash 和HTML5 的 History。 URL 的 hash URL的hash也就是锚点(#)，本质上是改变window.location的href属性；我们可以通过直接赋值location.hash来改变href，但是页面不发生刷新。 以下是最常用的用法，当用户点击页面中的链接时，可以使用 hash 来实现不同内容的展示，而不需要重新加载整个页面。以下是一个简单的 HTML 示例，演示了如何在页面中使用 hash：","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/front-end-life/Framework/React05.html"}],["meta",{"property":"og:site_name","content":"Huy's Blog"}],["meta",{"property":"og:title","content":"React之路由管理"}],["meta",{"property":"og:description","content":"React之路由管理 前言 前端路由的核心是改变 URL，但是也没不进行整体的刷新。由此带来了俩种模式：Hash 和HTML5 的 History。 URL 的 hash URL的hash也就是锚点(#)，本质上是改变window.location的href属性；我们可以通过直接赋值location.hash来改变href，但是页面不发生刷新。 以下是最常用的用法，当用户点击页面中的链接时，可以使用 hash 来实现不同内容的展示，而不需要重新加载整个页面。以下是一个简单的 HTML 示例，演示了如何在页面中使用 hash："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-04-04T01:48:24.000Z"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:modified_time","content":"2023-04-04T01:48:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React之路由管理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-04T01:48:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[{"level":3,"title":"URL 的 hash","slug":"url-的-hash","link":"#url-的-hash","children":[]},{"level":3,"title":"HTML5 的 History","slug":"html5-的-history","link":"#html5-的-history","children":[]}]},{"level":2,"title":"React 中的 React-router","slug":"react-中的-react-router","link":"#react-中的-react-router","children":[]}],"git":{"createdTime":1680572904000,"updatedTime":1680572904000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.23,"words":1270},"filePathRelative":"Framework/React05.md","localizedDate":"April 4, 2023","excerpt":"<h1> React之路由管理</h1>\\n<h2> 前言</h2>\\n<p>前端路由的核心是改变 URL，但是也没不进行整体的刷新。由此带来了俩种模式：Hash 和HTML5 的 History。</p>\\n<h3> URL 的 hash</h3>\\n<p><strong>URL的hash也就是锚点(#)</strong>，本质上是改变<code>window.location</code>的<code>href</code>属性；我们可以通过直接赋值<code>location.hash</code>来改变<code>href</code>，但是页面不发生刷新。</p>\\n<p>以下是最常用的用法，当用户点击页面中的链接时，可以使用 hash 来实现不同内容的展示，而不需要重新加载整个页面。以下是一个简单的 HTML 示例，演示了如何在页面中使用 hash：</p>","autoDesc":true}`);export{e as data};
