const n=JSON.parse('{"key":"v-3cdfa5b1","path":"/Framework/Vue-mini.html","title":"手写 Vue3","lang":"zh-CN","frontmatter":{"title":"手写 Vue3","icon":"vue","date":"2023-11-20T00:00:00.000Z","category":["框架"],"tag":["Vue"],"star":true,"sticky":false},"headers":[{"level":2,"title":"理解命令式和声明式","slug":"理解命令式和声明式","link":"#理解命令式和声明式","children":[]},{"level":2,"title":"区分运行时和编译时","slug":"区分运行时和编译时","link":"#区分运行时和编译时","children":[]}],"git":{"createdTime":1700527435000,"updatedTime":1700527435000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.65,"words":495},"filePathRelative":"Framework/Vue-mini.md","localizedDate":"2023年11月20日","excerpt":"<blockquote>\\n<p>尤雨溪：框架的设计过程其实是一个不断取舍的过程。</p>\\n</blockquote>\\n<h2> 理解命令式和声明式</h2>\\n<p>\\"命令式\\"（Imperative）和\\"声明式\\"（Declarative）是两种编程范式，用来描述编程语言或编程风格的不同方式。</p>\\n<ol>\\n<li>\\n<p><strong>命令式（Imperative）</strong>：</p>\\n<ul>\\n<li><strong>关注步骤和过程：</strong> 命令式编程关注如何完成一个任务，通过指定每个步骤来达到目标。</li>\\n<li><strong>具体的控制流：</strong> 开发者需要详细说明程序的控制流程，包括循环、条件语句等。</li>\\n<li><strong>修改状态：</strong> 程序通过改变状态来实现目标，通常使用变量来存储和修改状态。</li>\\n<li><strong>示例：</strong> 常见的命令式编程语言包括 C、C++、Java。例如，下面是一个简单的命令式编程的示例，计算阶乘的函数：</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 计算阶乘的命令式函数</span>\\n\\n  <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">factorial</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">n</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> result <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> n<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  result \\\\<span class=\\"token operator\\">*=</span> i<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">factorial</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 输出: 120</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>声明式（Declarative）</strong>：</p>\\n<ul>\\n<li>\\n<p><strong>关注结果而非步骤：</strong> 声明式编程关注定义要达到的目标，而不是详细说明如何实现这个目标。</p>\\n</li>\\n<li>\\n<p><strong>抽象控制流：</strong> 具体的控制流程由编程语言或框架隐式处理，而不需要开发者明确指定。</p>\\n</li>\\n<li>\\n<p><strong>不修改状态：</strong> 避免直接修改状态，而是通过声明式的方式描述所需的状态。</p>\\n</li>\\n<li>\\n<p><strong>示例：</strong> 常见的声明式编程语言包括 SQL、HTML、React 中的 JSX。以下是一个声明式的 React 组件示例：</p>\\n<div class=\\"language-jsx line-numbers-mode\\" data-ext=\\"jsx\\"><pre class=\\"language-jsx\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Greeting</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token punctuation\\">{</span> name <span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">Hello, </span><span class=\\"token punctuation\\">{</span>name<span class=\\"token punctuation\\">}</span><span class=\\"token plain-text\\">!</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ol>"}');export{n as data};
