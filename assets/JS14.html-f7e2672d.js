import{_ as i,Z as o,a0 as c,F as d,a1 as r,X as t,Y as p,$ as u}from"./framework-5dd7fabc.js";const m={},n=o,e=c,h=d,l=r,a=u,v=t,k=p,b=a(`<p>在前端开发中最开始使用的工具便是脚手架了，但是脚手架的实现却较为“复杂”，本文开始梳理脚手架的创建过程。</p><h2 id="脚手架本地调试的流程" tabindex="-1"><a class="header-anchor" href="#脚手架本地调试的流程" aria-hidden="true">#</a> 脚手架本地调试的流程</h2><p>脚手架的调试离不开指令：<code>npm link</code>，这个指令有多种用途。</p><blockquote><p><code>npm link your-lib</code> 是将当前项目中的 <code>node_modules</code> 下指定的库文件链接到 node 全局 <code>node_modules</code> 下的库文件;</p><p><code>npm link</code> 是讲当前项目链接到 node 全局 <code>node_modules</code> 中作为一个库文件，并解析 bin 配置创建可执行文件；</p><p><code>npm unlink</code> 是将当前项目从 node 全局 <code>node_modules</code> 中移除；</p><p><code>npm unlink your-lib</code> 是将当前项目中的库文件依赖移除。</p></blockquote><ol><li><p>链接本地脚手架:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token builtin class-name">cd</span> your-cli-dir
$: <span class="token function">npm</span> <span class="token function">link</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>链接本地库文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换到需要被链接的本地库</span>
$: <span class="token builtin class-name">cd</span> your-lib-dir
$: <span class="token function">npm</span> <span class="token function">link</span>

<span class="token comment"># 切换回本地库, link 链接刚刚软连接的库</span>
$: <span class="token builtin class-name">cd</span> your-cli-dir
$: <span class="token function">npm</span> <span class="token function">link</span> your-lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>取消链接本地库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换到需要被链接的本地库</span>
$: <span class="token builtin class-name">cd</span> your-lib-dir
$: <span class="token function">npm</span> unlink

<span class="token comment"># 切换回本地库</span>
$: <span class="token builtin class-name">cd</span> your-cli-dir
$: <span class="token function">npm</span> unlink your-lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="脚手架参数解析" tabindex="-1"><a class="header-anchor" href="#脚手架参数解析" aria-hidden="true">#</a> 脚手架参数解析</h2><p>可以利用 node 的 process 对象来获取参数。process 是一个全局对象，它提供了与当前 Node.js 进程相关的信息和控制能力。而 argv 是 process 对象的一个属性，它是一个包含命令行参数的数组。</p><p>如执行 <code>node script.js arg1 arg2 arg3</code> 则 <code>process.argv</code> 的值将是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> argv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>argv <span class="token comment">// 返回一个包含命令行参数的数组</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span> <span class="token comment">// [&#39;/path/to/node&#39;, &#39;/path/to/script.js&#39;, &#39;arg1&#39;, &#39;arg2&#39;, &#39;arg3&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="脚手架框架-lerna" tabindex="-1"><a class="header-anchor" href="#脚手架框架-lerna" aria-hidden="true">#</a> 脚手架框架 lerna</h2>`,10),g={href:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer"},_=a('<p>Lerna 的主要功能包括：</p><ol><li><p><strong>版本管理：</strong> Lerna 可以在项目中的多个包之间同步版本号。当决定升级项目的主版本或次版本时，Lerna 会自动更新所有相关的包的版本。</p></li><li><p><strong>依赖关系管理：</strong> Lerna 允许在项目的不同包之间共享依赖关系。这有助于确保所有包都使用相同版本的依赖项，从而减少潜在的兼容性问题。</p></li><li><p><strong>协同开发：</strong> Lerna 提供了一组命令，使得在多个包之间进行协同开发更加容易。可以使用 Lerna 来运行测试、构建、发布等操作，而不必手动切换到每个包的目录。</p></li><li><p><strong>自动化发布：</strong> Lerna 支持将所有包一起发布，以确保它们都使用相同的版本号。这有助于简化发布流程并减少版本管理的繁琐性。</p></li></ol><h3 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令" aria-hidden="true">#</a> 常用指令</h3>',3),f=n("li",null,[n("code",null,"lerna create <packageName>"),e(" : 创建 Package")],-1),x=n("code",null,"lerna add <packageName>",-1),y={href:"https://lerna.js.org/docs/legacy-package-management#replacing-your-usage-of-lerna-add",target:"_blank",rel:"noopener noreferrer"},N=n("ul",null,[n("li",null,[e("最新版本是用 "),n("code",null,"npm install <dependency> -w <package>")])],-1),$=a("<li><code>lerna link</code>: 链接依赖</li><li><code>lerna exec</code>: 执行 shell 脚本</li><li><code>lerna run</code>: 执行 npm 命令</li><li><code>lerna clean</code> : 清空依赖</li><li><code>lerna bootstrap</code>: 重装依赖</li><li><code>lerna changed</code>: 查看上线版本依赖的所有变更</li><li><code>lerna diff</code>: 查看 diff</li><li><code>lerna publish</code>: 项目发布</li>",8),L=a('<h3 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h3><ol><li>建议全局安装: <code>npm install -g lerna</code></li><li>初始化项目(packages 下所有包共用一个版本号): <code>lerna init --independent</code></li><li>新建模块，如: <code>lerna create @huy-cli/core</code></li><li>提交代码到 git 仓库: <code>git add .</code> + <code>git commit -m &#39;init lerna&#39;</code></li><li>登录 npm: <code>npm login</code>， 复制登录地址到浏览器登录账号</li><li>发布包到 npm: <code>lerna publish</code>, 选择发布版本, 发布到线上</li></ol>',2);function V(j,B){const s=h("ExternalLinkIcon");return v(),k("div",null,[b,n("p",null,[n("a",g,[e("lerna"),l(s)]),e(' （发音为"lur-na"）是一个用于管理 JavaScript 项目中的多包存储库的工具。它的目标是使得在具有多个相关包（packages）的大型项目中更容易进行协同开发和版本管理。')]),_,n("ul",null,[f,n("li",null,[x,e(": 安装依赖。"),n("a",y,[e("【V7 版本已废弃】"),l(s)]),N]),$]),L])}const S=i(m,[["render",V],["__file","JS14.html.vue"]]);export{S as default};
