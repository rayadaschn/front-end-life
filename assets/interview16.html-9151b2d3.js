import{_ as n,X as s,Y as a,$ as p}from"./framework-97fa2d96.js";const t={},e=p,o=s,c=a,l=e(`<h2 id="_1-2-3-map-parseint" tabindex="-1"><a class="header-anchor" href="#_1-2-3-map-parseint" aria-hidden="true">#</a> [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;].map(parseInt)</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码最终输出 <code>[1, NaN, NaN]</code>。</p><p>分析原因：</p><p>parseInt 的实际上有俩个参数，第二参数取值为进制，即取 2-36。若省略第二个参数，默认为 10 进制；若第二个参数以 <code>0x</code> 开头，则表示 16 进制 <code>0x2F</code>。</p><p>因此有:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 转换为:</span>
<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span>
num<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// item1: &#39;1&#39;, index: 0 -&gt; 忽略 0 进制，按 10 进制处理</span>
  <span class="token comment">// item1: &#39;2&#39;, index: 1 -&gt; 进制 1 不符合 2-36 进制的范围，即返回 NaN</span>
  <span class="token comment">// item1: &#39;3&#39;, index: 2 -&gt; 进制 2 符合要求，但 2 进制下没有 3，因此依旧返回 NaN</span>
  <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>进制 0 是按照不存在处理，即忽略该参数，所以进制变为 10 进制；</p><p>进制 1 是不存在该进制，因此返回结果为 NaN，如: <code>console.log([&#39;1&#39;, &#39;1&#39;, &#39;3&#39;].map(parseInt))</code></p><p>返回结果依旧为: <code>[1, NaN, NaN]</code></p></blockquote><h2 id="函数修改形参-能否影响实参" tabindex="-1"><a class="header-anchor" href="#函数修改形参-能否影响实参" aria-hidden="true">#</a> 函数修改形参，能否影响实参？</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">changeArg</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  x <span class="token operator">=</span> <span class="token number">200</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">100</span>
<span class="token function">changeArg</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;changeArg num:&#39;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>

<span class="token keyword">let</span> Obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小明&#39;</span> <span class="token punctuation">}</span>
<span class="token function">changeArg</span><span class="token punctuation">(</span>Obj<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;changeArg Obj:&#39;</span><span class="token punctuation">,</span> Obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果为都不变：</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code><span class="token property">changeArg num:</span> <span class="token number">100</span>
<span class="token property">changeArg Obj:</span> <span class="token operator">{</span>name<span class="token operator">:</span> <span class="token string">&#39;小明&#39;</span><span class="token operator">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>关键点: 函数参数是赋值传递。先 let 定义 x，而后将参数 num、Obj 赋值给 x。</p><blockquote><p>eslint 建议函数参数不要修改，当做常量。</p></blockquote><h2 id="对象和属性的连续赋值" tabindex="-1"><a class="header-anchor" href="#对象和属性的连续赋值" aria-hidden="true">#</a> 对象和属性的连续赋值</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> a
a<span class="token punctuation">.</span>x <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为:</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code>console<span class="token punctuation">.</span>log<span class="token operator">(</span>a<span class="token punctuation">.</span>x<span class="token operator">)</span> <span class="token operator">/</span><span class="token operator">/</span> undefined
console<span class="token punctuation">.</span>log<span class="token operator">(</span>b<span class="token punctuation">.</span>x<span class="token operator">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">{</span>n<span class="token operator">:</span> <span class="token number">2</span><span class="token operator">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>分析原因:</p><ol><li><p>在 js 中，连续赋值的执行顺序为从右到左进行的。这意味着右边的表达式先于左边的表达式进行求值和赋值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">let</span> d

d <span class="token operator">=</span> c <span class="token operator">=</span> b <span class="token operator">=</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先，右侧的表达式 a 被求值，其结果为 1。</li><li>然后，右侧的表达式 b = a 被求值，将变量 b 的值设置为 1。</li><li>接着，右侧的表达式 c = b 被求值，将变量 c 的值设置为 1。</li><li>最后，左侧的表达式 d = c 被求值，将变量 d 的值设置为 1。</li></ul></li><li><p>a.x 的定义属性比赋值的优先级高，即表达式中<code>a.x = a = { n: 2 }</code>，需要先定义 <code>a.x = undefined</code> 再进行赋值计算。</p></li><li><p>因此在<code>a.x = a = { n: 2 }</code>这个复合赋值语句中，首先执行 <code>a.x</code>，但此时 a 还是指向对象 <code>{ n: 1 }</code>，所以将对象 <code>{ n: 1 }</code> 的属性 <code>x</code> 设置为 <code>undefined</code>；接着，执行 <code>a = { n: 2 }</code>，将变量 <code>a</code> 的引用指向新的对象 <code>{ n: 2 }</code>；最后将对象 <code>{n: 1, x: undefined}</code>的 <code>x</code> 属性赋值为对象 <code>{ n: 2 }</code>。</p></li></ol><h2 id="构造函数和原型的重名属性" tabindex="-1"><a class="header-anchor" href="#构造函数和原型的重名属性" aria-hidden="true">#</a> 构造函数和原型的重名属性</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Foo<span class="token punctuation">.</span><span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
Foo<span class="token punctuation">.</span><span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

Foo<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
Foo<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code>Foo<span class="token punctuation">.</span>a<span class="token operator">(</span><span class="token operator">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">4</span>
const obj <span class="token operator">=</span> new Foo<span class="token operator">(</span><span class="token operator">)</span>
obj<span class="token punctuation">.</span>a<span class="token operator">(</span><span class="token operator">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">2</span>
Foo<span class="token punctuation">.</span>a<span class="token operator">(</span><span class="token operator">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="promise-执行顺序问题" tabindex="-1"><a class="header-anchor" href="#promise-执行顺序问题" aria-hidden="true">#</a> promise 执行顺序问题</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为:</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>梳理问题关键：</p><ul><li>不同的 promise 是“交替执行”，分别插入到微任务队列中；</li><li>而在 Promise 的 then 中返回 promise 实例，会出现“慢俩拍”的效果；</li><li>第一拍，promise 需要由 pending 变为 fulfilled；</li><li>第二拍，then 函数挂载到 MicroTaskQueue。</li></ul>`,30),i=[l];function u(r,k){return o(),c("div",null,i)}const v=n(t,[["render",u],["__file","interview16.html.vue"]]);export{v as default};
