const l=JSON.parse('{"key":"v-2bbe24a6","path":"/JavaScript/JS01.html","title":"彻底理解 this 指向","lang":"zh-CN","frontmatter":{"title":"彻底理解 this 指向","icon":"javascript","date":"2023-02-16T00:00:00.000Z","category":["javascript"],"tag":["javascript"],"star":true,"sticky":false},"headers":[{"level":2,"title":"1. 什么是 this","slug":"_1-什么是-this","link":"#_1-什么是-this","children":[]},{"level":2,"title":"2. 绑定规则详谈","slug":"_2-绑定规则详谈","link":"#_2-绑定规则详谈","children":[{"level":3,"title":"2.1 默认绑定","slug":"_2-1-默认绑定","link":"#_2-1-默认绑定","children":[]},{"level":3,"title":"2.2 隐式绑定","slug":"_2-2-隐式绑定","link":"#_2-2-隐式绑定","children":[]},{"level":3,"title":"2.3 显示绑定 bind、call、apply","slug":"_2-3-显示绑定-bind、call、apply","link":"#_2-3-显示绑定-bind、call、apply","children":[]},{"level":3,"title":"2.4 new 绑定","slug":"_2-4-new-绑定","link":"#_2-4-new-绑定","children":[]},{"level":3,"title":"2.5 this 优先级","slug":"_2-5-this-优先级","link":"#_2-5-this-优先级","children":[]}]},{"level":2,"title":"3. 特殊规则","slug":"_3-特殊规则","link":"#_3-特殊规则","children":[{"level":3,"title":"3.1 间接函数引用","slug":"_3-1-间接函数引用","link":"#_3-1-间接函数引用","children":[]},{"level":3,"title":"3.2 箭头函数","slug":"_3-2-箭头函数","link":"#_3-2-箭头函数","children":[]}]},{"level":2,"title":"4. 测试练习","slug":"_4-测试练习","link":"#_4-测试练习","children":[]}],"git":{"createdTime":1683516320000,"updatedTime":1683887797000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":12.93,"words":3879},"filePathRelative":"JavaScript/JS01.md","localizedDate":"2023年2月16日","excerpt":"<h1> 彻底理解 this 指向</h1>\\n<p>|<code>this</code> 指向纷繁复杂，笔者也是学习了多遍才算搞懂。常学常新，不同阶段看都有收获。</p>\\n<h2> 1. 什么是 <code>this</code></h2>\\n<p>在常见的面向对象语言（如 java、C++）中，<code>this</code> 通常只出现在 <strong>类方法中</strong> 。this 也是用于指代当前调用的对象，但是 JavaScript 中的 this 则更加灵活，因此，也是一大难点。</p>\\n<p><strong>一句话总结 this 的指向</strong>： <strong>“谁调用它， this 就指向谁”</strong>。</p>"}');export{l as data};
