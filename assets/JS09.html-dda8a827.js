const n=JSON.parse(`{"key":"v-3964e99e","path":"/JavaScript/JS09.html","title":"简单手写 Promise","lang":"zh-CN","frontmatter":{"title":"简单手写 Promise","icon":"javascript","date":"2023-07-28T00:00:00.000Z","category":["javascript"],"tag":["javascript"],"sticky":false},"headers":[{"level":2,"title":"技术要点","slug":"技术要点","link":"#技术要点","children":[]},{"level":2,"title":"测试用例","slug":"测试用例","link":"#测试用例","children":[]},{"level":2,"title":"正式手写 Promise","slug":"正式手写-promise","link":"#正式手写-promise","children":[{"level":3,"title":"1. 手写基础构造函数","slug":"_1-手写基础构造函数","link":"#_1-手写基础构造函数","children":[]},{"level":3,"title":"2. 实现 then 和 catch 的链式调用","slug":"_2-实现-then-和-catch-的链式调用","link":"#_2-实现-then-和-catch-的链式调用","children":[]},{"level":3,"title":"3. 完善静态方法","slug":"_3-完善静态方法","link":"#_3-完善静态方法","children":[]}]},{"level":2,"title":"完整 Promise 代码","slug":"完整-promise-代码","link":"#完整-promise-代码","children":[]}],"git":{"createdTime":1690469971000,"updatedTime":1690469971000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.32,"words":995},"filePathRelative":"JavaScript/JS09.md","localizedDate":"2023年7月28日","excerpt":"<blockquote>\\n<p>在刚学 JS 的时候有尝试手写过完整的 Promise，但是代码量太过于庞大了，过了半年就忘记了。\\n这一次，手写一个简易版的 Promise，以加强理解。</p>\\n</blockquote>\\n<h2> 技术要点</h2>\\n<ul>\\n<li>能够初始化和异步调用</li>\\n<li>能够实现 then 和 catch 的链式调用</li>\\n<li>静态方法: resolve、reject、all 和 race</li>\\n</ul>\\n<h2> 测试用例</h2>\\n<p>首先准备测试用例：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> p <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyPromise</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve<span class=\\"token punctuation\\">,</span> reject</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 1. 常规调用</span>\\n  <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token comment\\">// 2. 异步调用</span>\\n  <span class=\\"token comment\\">// setTimeout(() =&gt; {</span>\\n  <span class=\\"token comment\\">//   resolve(200)</span>\\n  <span class=\\"token comment\\">// })</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">const</span> p1 <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> value <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">reason</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">error</span><span class=\\"token punctuation\\">(</span>reason<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">const</span> p2 <span class=\\"token operator\\">=</span> p1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">data</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> data <span class=\\"token operator\\">+</span> <span class=\\"token number\\">2</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">const</span> p3 <span class=\\"token operator\\">=</span> p2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">catch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">err</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">error</span><span class=\\"token punctuation\\">(</span>err<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">const</span> p4 <span class=\\"token operator\\">=</span> MyPromise<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">300</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">const</span> p5 <span class=\\"token operator\\">=</span> MyPromise<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">reject</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'错误信息'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">const</span> p6 <span class=\\"token operator\\">=</span> MyPromise<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">all</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span>p1<span class=\\"token punctuation\\">,</span> p4<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">const</span> p7 <span class=\\"token operator\\">=</span> MyPromise<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">race</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span>p1<span class=\\"token punctuation\\">,</span> p4<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{n as data};
