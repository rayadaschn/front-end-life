const n=JSON.parse(`{"key":"v-e2a8faf4","path":"/OneMoreThing/interview/13.html","title":"Interview -- 算法","lang":"zh-CN","frontmatter":{"title":"Interview -- 算法","icon":"note","date":"2023-09-01T00:00:00.000Z","category":["anonymous"],"tag":["note"],"star":false,"sticky":false},"headers":[{"level":2,"title":"常见数据结构","slug":"常见数据结构","link":"#常见数据结构","children":[{"level":3,"title":"栈 Stack","slug":"栈-stack","link":"#栈-stack","children":[]},{"level":3,"title":"队列 Queue","slug":"队列-queue","link":"#队列-queue","children":[]},{"level":3,"title":"链表 Linked list","slug":"链表-linked-list","link":"#链表-linked-list","children":[]},{"level":3,"title":"树 Tree","slug":"树-tree","link":"#树-tree","children":[]},{"level":3,"title":"二叉树","slug":"二叉树","link":"#二叉树","children":[]}]},{"level":2,"title":"常见算法","slug":"常见算法","link":"#常见算法","children":[]}],"git":{"createdTime":1705126883000,"updatedTime":1730046585000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":7.01,"words":2104},"filePathRelative":"OneMoreThing/interview/13.md","localizedDate":"2023年9月1日","excerpt":"<p>总述算法的一些常见考题和常见数据结构等。</p>\\n<h2> 常见数据结构</h2>\\n<h3> 栈 Stack</h3>\\n<p>栈是先进后出的一种数据结构。</p>\\n<figure><img src=\\"https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202308310907807.png\\" alt=\\"栈\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>栈</figcaption></figure>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> stack <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\nstack<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'xxx'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 压栈</span>\\nstack<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 出栈</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{n as data};
