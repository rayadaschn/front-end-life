const e=JSON.parse(`{"key":"v-69a315e0","path":"/Framework/React04.html","title":"React之数据管理 Redux","lang":"en-US","frontmatter":{"title":"React之数据管理 Redux","icon":"react","category":["框架"],"tag":["React"],"star":true,"sticky":false,"description":"React之数据管理 Redux JavaScript 中的纯函数 在 JavaScript 中，纯函数是指具有以下两个特性的函数： 相同的输入总是返回相同的输出 函数执行期间没有副作用，也就是说它不会修改任何在函数作用域外部的状态，如全局变量、输入参数、引用参数等。 因为纯函数的输出仅仅由输入决定，所以它们在并发编程和缓存数据等方面非常有用。由于不会修改外部状态，纯函数通常比有副作用的函数更容易测试、调试和优化。 function sum(a, b) { return a + b; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/front-end-life/Framework/React04.html"}],["meta",{"property":"og:site_name","content":"Huy's Blog"}],["meta",{"property":"og:title","content":"React之数据管理 Redux"}],["meta",{"property":"og:description","content":"React之数据管理 Redux JavaScript 中的纯函数 在 JavaScript 中，纯函数是指具有以下两个特性的函数： 相同的输入总是返回相同的输出 函数执行期间没有副作用，也就是说它不会修改任何在函数作用域外部的状态，如全局变量、输入参数、引用参数等。 因为纯函数的输出仅仅由输入决定，所以它们在并发编程和缓存数据等方面非常有用。由于不会修改外部状态，纯函数通常比有副作用的函数更容易测试、调试和优化。 function sum(a, b) { return a + b; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-04-01T15:55:51.000Z"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:modified_time","content":"2023-04-01T15:55:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React之数据管理 Redux\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-01T15:55:51.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"JavaScript 中的纯函数","slug":"javascript-中的纯函数","link":"#javascript-中的纯函数","children":[]},{"level":2,"title":"JavaScript 中的副概念","slug":"javascript-中的副概念","link":"#javascript-中的副概念","children":[]},{"level":2,"title":"什么是 Redux?","slug":"什么是-redux","link":"#什么是-redux","children":[{"level":3,"title":"Redux 的三大原则","slug":"redux-的三大原则","link":"#redux-的三大原则","children":[]},{"level":3,"title":"Redux使用方法","slug":"redux使用方法","link":"#redux使用方法","children":[]},{"level":3,"title":"Redux 处理异步函数","slug":"redux-处理异步函数","link":"#redux-处理异步函数","children":[]},{"level":3,"title":"合并多个 Reducer 函数","slug":"合并多个-reducer-函数","link":"#合并多个-reducer-函数","children":[]},{"level":3,"title":"Redux 调试","slug":"redux-调试","link":"#redux-调试","children":[]}]}],"git":{"createdTime":1680364551000,"updatedTime":1680364551000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":11.78,"words":3534},"filePathRelative":"Framework/React04.md","localizedDate":"April 1, 2023","excerpt":"<h1> React之数据管理 Redux</h1>\\n<h2> JavaScript 中的纯函数</h2>\\n<p>在 JavaScript 中，纯函数是指具有以下两个特性的函数：</p>\\n<ol>\\n<li>相同的输入总是返回相同的输出</li>\\n<li>函数执行期间没有副作用，也就是说它不会修改任何在函数作用域外部的状态，如全局变量、输入参数、引用参数等。</li>\\n</ol>\\n<p>因为纯函数的输出仅仅由输入决定，所以它们在并发编程和缓存数据等方面非常有用。由于不会修改外部状态，纯函数通常比有副作用的函数更容易测试、调试和优化。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">sum</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">a<span class=\\"token punctuation\\">,</span> b</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> a <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
