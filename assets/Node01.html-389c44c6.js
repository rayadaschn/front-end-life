import{_ as p,V as o,W as c,X as n,Y as s,Z as e,$ as t,F as i}from"./framework-2060dede.js";const l={},u=t('<h1 id="node-基础" tabindex="-1"><a class="header-anchor" href="#node-基础" aria-hidden="true">#</a> Node 基础</h1><p>首先要理解服务器开发是什么？简单的说就是通过一门语音，操作处理各种文件——增删改查。</p><h2 id="node-是什么" tabindex="-1"><a class="header-anchor" href="#node-是什么" aria-hidden="true">#</a> Node 是什么?</h2><p><strong>Node.js</strong> 是一个基于 V8 JavaScript 引擎的 JavaScrip t运行时环境。简单理解，就是 Node 是基于 V8 引擎的能够在本地运行 JavaScript 代码的环境。当然由于 Chrome 浏览器内部还需要解析、渲染 HTML和CSS等相关渲染引擎，另外还需要提供支持浏览器操作的API、浏览器自己的事件循环等，这部分做了取舍。但是同时由于要处理本地文件，所以 Node 自身也添加了一些额外的API如文件系统读/写、网络IO、加密、压缩解压文件等。</p><h3 id="体系架构" tabindex="-1"><a class="header-anchor" href="#体系架构" aria-hidden="true">#</a> 体系架构</h3><p>Node.js主要分为四大部分，Node Standard Library，Node Bindings，V8，Libuv，架构图如下：</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202304100919387.png" alt="Node 体系架构" tabindex="0" loading="lazy"><figcaption>Node 体系架构</figcaption></figure><ul><li>Node Standard Library 是我们每天都在用的标准库，如 Http, Buffer 模块。</li><li>Node Bindings 是沟通JS 和 C++的桥梁，封装V8和Libuv的细节，向上层提供基础API服务。</li><li>这一层是支撑 Node.js 运行的关键，由 C/C++ 实现。 <ul><li>V8 是Google开发的JavaScript引擎，提供JavaScript运行环境，可以说它就是 Node.js 的发动机。</li><li>Libuv 是专门为Node.js开发的一个封装库，提供跨平台的异步I/O能力.</li><li>C-ares：提供了异步处理 DNS 相关的能力。</li><li>http_parser、OpenSSL、zlib 等：提供包括 http 解析、SSL、数据压缩等其他的能力。</li></ul></li></ul><h2 id="文件系统-file-system" tabindex="-1"><a class="header-anchor" href="#文件系统-file-system" aria-hidden="true">#</a> 文件系统 File System</h2>',9),d={href:"https://nodejs.org/docs/latest-v16.x/api/fs.html",target:"_blank",rel:"noopener noreferrer"},r=t(`<h3 id="commonjs-导入模块" tabindex="-1"><a class="header-anchor" href="#commonjs-导入模块" aria-hidden="true">#</a> CommonJS 导入模块</h3><p>CommonJS 是一种模块规范，用于在 JavaScript 环境中定义模块的创建、导出和引入方式。它是 Node.js 中使用的默认模块系统，并且也被广泛地应用于其他 JavaScript 环境中。</p><p>在 CommonJS 规范下，每个模块都是一个独立的文件，可以通过 <code>require</code> 函数来导入其他模块，并通过 <code>module.exports</code> 或 <code>exports</code> 对象来导出自己的公共部分。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// moduleA.js</span>
<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// moduleB.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>moduleA.js</code> 中导出了一个名为 <code>add</code> 的函数，并将其赋值给 <code>module.exports</code> 对象。然后，在 <code>moduleB.js</code> 中，我们通过 <code>require</code> 函数引入了 <code>moduleA.js</code> 文件，并使用解构赋值语法来获取 <code>moduleA.js</code> 导出的 <code>add</code> 函数，然后调用了它。</p><p>需要注意的是，在 CommonJS 规范下，模块是同步加载的，这意味着当一个模块被加载时，它的所有依赖项也会被加载并执行。这可能会影响应用程序的性能，特别是当应用程序变得越来越大时。因此，随着 ECMAScript 2015 规范的推出，JavaScript 社区开始使用 ES6 模块系统来代替 CommonJS。</p><p><code>require</code> 和 <code>import</code> 都是用于在 JavaScript 中导入模块的关键字，但它们有以下区别：</p><ol><li>语法：<code>require</code> 是 CommonJS 规范定义的模块导入方式，而 <code>import</code> 是 ES6 模块化规范定义的模块导入方式。两者的语法和使用方法略有不同。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>javascript复制代码// CommonJS 导入方式
const moduleA = require(&#39;./moduleA&#39;)

// ES6 模块导入方式
import moduleA from &#39;./moduleA&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>动态导入：使用 <code>require</code> 导入的模块是在运行时动态加载的，可以在函数内部或其他条件下进行导入（实质是通过最后的 Webpack 进行打包编译处理）；而使用 <code>import</code> 导入的模块是在编译时静态加载的，不能在函数内部或其他条件下进行导入。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// CommonJS 动态导入方式</span>
<span class="token keyword">function</span> <span class="token function">loadModule</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// ES6 模块静态导入方式</span>
<span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token string">&#39;moduleA.js&#39;</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 执行操作</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>默认导出：在 CommonJS 规范中，使用 <code>module.exports</code> 或 <code>exports</code> 对象来导出模块的公共部分；而在 ES6 模块系统中，则默认导出一个模块，可以通过 <code>export default</code> 语句来指定默认导出。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// CommonJS 导出方式</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span> <span class="token comment">// 或者 exports.add = add</span>

<span class="token comment">// ES6 模块默认导出</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，虽然 <code>import</code> 和 <code>export</code> 是 ES6 模块化规范中定义的关键字，但它们在许多现代浏览器和 Node.js 环境中已经得到了支持。但在一些旧的浏览器或 Node.js 版本中，可能需要使用打包工具（如 webpack、Browserify 等）来转换成 CommonJS 规范的代码。</p><h3 id="读取文件的三种方式" tabindex="-1"><a class="header-anchor" href="#读取文件的三种方式" aria-hidden="true">#</a> 读取文件的三种方式</h3><p>fs 上有几个文件读取的 API 常用的有俩个：<code>fs.readFileSync</code>（同步读取）和 <code>fs.readFile</code>（异步读取，俩种方式）。</p><ol><li><p>同步读取</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 同步读取,获取返回值进行同步操作</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./text.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf8&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>异步读取: 回调函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// fs.readFile 第二个参数是回调函数</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./text.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf8&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;读取文件错误:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;读取文件结果:&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>异步读取：Promise</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过链式调用的 Promise 操作</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./text.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;获取到结果:&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;发生了错误:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="文件描述符的使用" tabindex="-1"><a class="header-anchor" href="#文件描述符的使用" aria-hidden="true">#</a> 文件描述符的使用</h3><p>在操作系统中，文件描述符（File Descriptor）是一个非负整数，用于标识打开的文件、网络连接或其他 I/O 设备。在 Node.js 中，文件描述符通常使用整数来表示，并用于执行底层的 I/O 操作。</p><blockquote><p>在常见的操作系统上，对于每个进程，内核都维护着一张当前打开着的文件和资源的表格。每个打开的文件都分配了一个称为文件描述符的简单的数字标识符。在系统层，所有文件系统操作都使用这些文件描述符来标识和跟踪每个特定的文件。（Windows 系统略有不同，但机制相同）</p><p>为了简化用户的工作，Node.js 抽象出操作系统之间的特定差异，并为所有打开的文件分配一个数字型的文件描述符。</p></blockquote><p>当您打开一个文件时，操作系统会为该文件分配一个唯一的文件描述符。您可以使用这个文件描述符来读取、写入或关闭文件。在 Node.js 中，您可以使用 <code>fs.open</code> 函数来打开一个文件，并获取该文件的文件描述符。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 打开文件，并获取文件描述符</span>
fs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;file.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> fd</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span> <span class="token comment">// 打印文件描述符</span>
  <span class="token comment">// 或使用文件描述符进行 I/O 操作</span>
  <span class="token comment">// ...</span>

  <span class="token comment">// 关闭文件</span>
  fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用 <code>fs.open</code> 函数打开了一个名为 <code>file.txt</code> 的文件，并获取了该文件的文件描述符 <code>fd</code>。接下来，我们可以使用 <code>fd</code> 来执行文件的 I/O 操作。最后，我们使用 <code>fs.close</code> 函数来关闭文件，释放文件描述符。</p><p>需要注意的是，文件描述符不仅被用于对文件的读写操作，还可以用于对套接字、管道等其他类型的文件进行 I/O 操作。</p><h3 id="文件写入" tabindex="-1"><a class="header-anchor" href="#文件写入" aria-hidden="true">#</a> 文件写入</h3><p>在 Node.js 中，可以使用 <code>fs.writeFile</code> 或 <code>fs.createWriteStream</code> 函数来写入文件。</p><p>先看 <code>fs.writeFile</code> 函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中：</p><ul><li><p><code>file</code>：要写入的文件名或文件描述符。</p></li><li><p><code>data</code>：要写入的数据。</p></li><li><p><code>options</code>：一个可选的对象，用于指定写入选项，例如编码、文件模式、标志等。默认值为 <code>{ encoding: &#39;utf8&#39;, mode: 0o666, flag: &#39;w&#39; }</code>。</p><ul><li><p><code>encoding</code>：字符编码形式，如果不填写<code>encoding</code>，返回的结果是<code>Buffer</code>（后续会介绍）。</p></li><li><p><code>flag</code>：读写模式，以下是几个常用的<code>flag</code> 标志：</p></li><li><p><code>&#39;r&#39;</code>：以只读模式打开文件。如果文件不存在，则会发生错误。</p></li><li><p><code>&#39;r+&#39;</code>：以读写模式打开文件。如果文件不存在，则会发生错误。</p></li><li><p><code>&#39;w&#39;</code>：以只写模式打开文件。如果文件不存在，则创建文件；如果存在，则清空文件内容。</p></li><li><p><code>&#39;w+&#39;</code>：以读写模式打开文件。如果文件不存在，则创建文件；如果文件已经存在，则清空文件内容。</p></li><li><p><code>&#39;a&#39;</code>：以追加模式打开文件。如果文件不存在，则创建文件。</p></li><li><p><code>&#39;a+&#39;</code>：以读取和追加模式打开文件。如果文件不存在，则创建文件。</p></li></ul></li><li><p><code>callback</code>：当写入操作完成或出错时，回调函数将被调用。如果写入成功，则回调函数不会接收任何参数；如果出错，则回调函数将接收一个错误对象作为参数。</p></li></ul><p>例如，以下代码在写入文件时使用了 <code>encoding</code> 和 <code>flag</code> 选项：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>
  <span class="token string">&quot;file.txt&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token string">&quot;a+&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Data written to file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们将字符串 <code>&#39;Hello, world!&#39;</code> 写入名为 <code>file.txt</code> 的文件中，并使用了 <code>encoding</code> 选项设置编码格式为 <code>utf8</code>，并使用了 <code>flag</code> 选项设置标志为 <code>&#39;a+&#39;</code>（追加写入）。</p><h3 id="文件夹操作" tabindex="-1"><a class="header-anchor" href="#文件夹操作" aria-hidden="true">#</a> 文件夹操作</h3><p>除了基础的文件操作外，还需要对文件夹进行管理，常用的文件夹操作包括：创建、读取、删除、重命名等。</p><ol><li>创建文件夹</li></ol><p>可以使用 <code>fs.mkdir</code> 函数来创建一个新的文件夹。该函数接受两个参数：要创建的文件夹路径以及一个回调函数。当创建操作完成或出错时，回调函数将被调用。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">&#39;newDir&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Folder created&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用 <code>fs.mkdir</code> 函数创建了一个名为 <code>newDir</code> 的文件夹。如果创建失败，则会抛出错误；否则，将输出 <code>&#39;Folder created&#39;</code>。</p><ol start="2"><li>读取文件夹</li></ol><p>可以使用 <code>fs.readdir</code> 函数来读取一个文件夹中的所有文件和子文件夹。该函数接受两个参数：要读取的文件夹路径以及一个回调函数。当读取操作完成或出错时，回调函数将被调用。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">&#39;myDir&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用 <code>fs.readdir</code> 函数读取了名为 <code>myDir</code> 的文件夹中的所有文件和子文件夹，并将结果作为数组打印到控制台上。如果读取失败，则会抛出错误；否则，将输出文件和子文件夹的列表。</p><p>需要注意的是，<code>fs.readdir</code> 函数<strong>只会返回文件夹中的文件和子文件夹的名称，而不会返回它们的内容</strong>。如果您需要读取一个文件夹中的文件内容，您需要分别打开每个文件并读取其内容。</p><p>递归读取文件夹中所有的文件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">readDirectory</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">withFileTypes</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">readDirectory</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;获取到文件:&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">readDirectory</span><span class="token punctuation">(</span><span class="token string">&#39;./myDir&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>删除文件夹</li></ol><p>您可以使用 <code>fs.rmdir</code> 函数来删除一个文件夹。该函数接受两个参数：要删除的文件夹路径以及一个回调函数。当删除操作完成或出错时，回调函数将被调用。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token string">&#39;oldDir&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Folder deleted&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用 <code>fs.rmdir</code> 函数删除了名为 <code>oldDir</code> 的文件夹。如果删除失败，则会抛出错误；否则，将输出 <code>&#39;Folder deleted&#39;</code>。</p><p>需要注意的是，在 Node.js 的文件系统模块中，<code>fs.unlink</code> 函数用于删除一个文件，而 <code>fs.rmdir</code> 函数用于删除一个文件夹。这两个函数默认情况下不会递归删除。</p><p>如果要删除一个文件夹及其子文件夹和文件，可以使用第三方库 <code>rimraf</code> 或 <code>del</code>，它们提供了递归删除文件夹的功能。</p><p>例如，使用 <code>rimraf</code> 库来删除一个文件夹及其所有子文件夹和文件的示例代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> rimraf <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;rimraf&#39;</span><span class="token punctuation">)</span>

<span class="token function">rimraf</span><span class="token punctuation">(</span><span class="token string">&#39;myDir&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Folder deleted&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用 <code>rimraf</code> 函数删除了名为 <code>myDir</code> 的文件夹及其所有子文件夹和文件。如果删除失败，则会抛出错误；否则，将输出 <code>&#39;Folder deleted&#39;</code>。</p><p>此外，在执行删除操作时，请务必小心谨慎，确保不会意外删除或修改您不想修改的文件或文件夹，特别是在使用递归删除的情况下。</p><ol start="3"><li>重命名文件夹</li></ol><p>可以使用 <code>fs.rename</code> 函数来重命名一个文件夹。该函数接受三个参数：旧的文件夹路径、新的文件夹路径以及一个回调函数。当重命名操作完成或出错时，回调函数将被调用。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 对文件夹进行重命名</span>
<span class="token comment">// 需要加路径</span>
fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&#39;./oldDir&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./newDir&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Folder renamed&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 对文件进行重命名</span>
<span class="token comment">// 重命名文件需要加后缀名!</span>
fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&#39;./oldFile.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./newFile.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;File renamed&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用 <code>fs.rename</code> 函数将名为 <code>oldDir</code> 的文件夹重命名为 <code>newDir</code>。如果重命名失败，则会抛出错误；否则，将输出 <code>&#39;Folder renamed&#39;</code>。</p><p>需要注意的是，在执行文件夹操作时，请务必小心谨慎，确保您不会意外删除或修改您不想修改的文件夹。</p><h2 id="events-模块" tabindex="-1"><a class="header-anchor" href="#events-模块" aria-hidden="true">#</a> Events 模块</h2><p>Node.js 中的 <code>events</code> 模块提供了一个简单的事件驱动框架，可以方便地实现事件的监听和触发。可以使用 <code>events</code> 模块来创建自定义事件，并为这些事件注册回调函数。这个和 Vue 中的事件总线非常类似，而实际上 Vue 的事件总线就是基于此实现的。</p><p>以下是一个简单的示例，演示如何使用 <code>events</code> 模块来创建并触发一个自定义事件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">MyEmitter</span> <span class="token keyword">extends</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 创建 EventEmitter 实例</span>
<span class="token keyword">const</span> myEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 回调事件</span>
<span class="token keyword">function</span> <span class="token function">handleFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 监听事件</span>
myEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> handleFn<span class="token punctuation">)</span>

<span class="token comment">// 发射事件</span>
myEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 打印 &#39;Hello, world!&#39;</span>

<span class="token comment">// 取消事件监听</span>
myEmitter<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> handleFn<span class="token punctuation">)</span>
myEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 不再打印</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们首先创建了一个名为 <code>MyEmitter</code> 的自定义事件类，该类继承自 <code>EventEmitter</code> 类。然后我们创建了一个 <code>myEmitter</code> 实例，并为其注册了一个名为 <code>&#39;hello&#39;</code> 的事件及其回调函数，当该事件被触发时，将输出 <code>&#39;Hello, world!&#39;</code>。而后取消事件监听，再发送事件时，不再输出。</p><p>此外，也可以传递参数给事件回调函数，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>myEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

myEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们定义了一个名为 <code>&#39;count&#39;</code> 的事件，并将回调函数作为第二个参数传递给 <code>on</code> 方法。当该事件被触发时，它会将参数 <code>42</code> 传递给回调函数，并输出 <code>&#39;Count: 42&#39;</code>。</p><p>除了 <code>on</code> 和 <code>emit</code> 方法，<code>EventEmitter</code> 类还提供了其他方法，例如：</p><ul><li><code>once</code>：注册一个一次性事件，只在第一次触发时调用回调函数。</li><li><code>prependListener</code> : 将事件监听添加到最前面。</li><li><code>removeListener</code>：从指定事件的监听器数组中删除一个监听器。</li><li><code>removeAllListeners</code>：从所有事件的监听器数组中删除所有监听器。不传递参数的情况下, 移除所有事件名称的所有事件监听，在传递参数的情况下, 只会移除传递的事件名称的事件监听。</li></ul><h2 id="buffer-类" tabindex="-1"><a class="header-anchor" href="#buffer-类" aria-hidden="true">#</a> Buffer 类</h2><p><strong>计算机中所有的内容:文字、数字、图片、音频、视频最终都会使用二进制来表示。</strong> JavaScript可以直接去处理非常直观的数据：比如字符串，我们通常展示给用户的也是这些内容。但是服务器不同，服务器中药处理的更多的是服务器中的本地文件，像音视频等，这些都是由其它编码的二进制数据。</p><p>但是，二进制并不好直接操作，它较为抽象。Node 为开发者提供了一个全局类 Buffer。可以将 Buffer 看成一个存储二进制的数据，数组中的每一项，都可以保存 8 位二进制：<code>0000 0000</code>。</p><h3 id="创建-buffer" tabindex="-1"><a class="header-anchor" href="#创建-buffer" aria-hidden="true">#</a> 创建 Buffer</h3><p>在 Node.js v6.x 版本中，<code>Buffer</code> 构造函数可以使用 <code>new Buffer()</code> 的方式进行调用。但是，在 Node.js v6.x 之后的版本中，<strong><code>new Buffer()</code>这种方式已经被弃用</strong>，并且会抛出一个警告。</p><p>这是因为，<code>new Buffer()</code> 在创建一个新的 Buffer 实例时，默认情况下会将其内容初始化为零。然而，由于这种行为很容易导致安全漏洞和内存泄漏等问题，因此 Node.js 团队决定弃用这种方式，并引入了 <code>Buffer.from()</code> 和 <code>Buffer.alloc()</code> 方法来取代它。</p><p>如果在旧版本的 Node.js 中使用了 <code>new Buffer()</code>，那么可能需要修改代码以避免在更新到新版本的 Node.js 后出现异常或警告。如果您要创建一个特定大小的 Buffer，请使用 <code>Buffer.alloc()</code> 方法（alloc 是分配的意思）。如果您要通过字符串或字节数组等数据创建一个 Buffer，请使用 <code>Buffer.from()</code> 方法。</p><p>例如，以下代码演示了如何使用 <code>Buffer.from()</code> 方法创建并操作一个 Buffer：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token comment">// &lt;Buffer 68 65 6c 6c 6f&gt;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hello</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 104</span>

buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hollo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用 <code>Buffer.from</code> 函数创建了一个包含字符串 <code>&#39;hello&#39;</code> 的 Buffer。我们还使用 <code>console.log</code> 和 <code>toString</code> 方法打印了该 Buffer 的内容和转换为字符串后的内容。我们还通过访问 <code>buf</code> 数组索引来修改了 Buffer 中的一个字节，并输出了修改后的结果。</p><p><code>Buffer.alloc(size[, fill[, encoding]])</code> 是 Node.js 中 <code>Buffer</code> 模块提供的一个用于创建新 Buffer 实例的方法。</p><p>该方法接受三个可选参数：</p><ul><li><code>size</code>：要创建的 Buffer 的大小，以字节为单位。</li><li><code>fill</code>：可选参数，用于填充 Buffer 的初始值。如果未提供，则默认为零。</li><li><code>encoding</code>：可选参数，指定 <code>fill</code> 参数的编码格式，默认为 <code>&#39;utf8&#39;</code>。</li></ul><p><code>Buffer.alloc()</code> 方法会创建一个指定大小的新的 Buffer，并将其所有字节初始化为零或给定的 <code>fill</code> 值。这种方式可以确保创建的 Buffer 在使用前已经被初始化，从而避免了使用未初始化内存的潜在问题。</p><p>例如，以下代码演示了如何使用 <code>Buffer.alloc()</code> 方法创建并操作一个 Buffer：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token comment">// &lt;Buffer 00 00 00 00 00&gt;</span>

buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x61</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token comment">// &lt;Buffer 00 61 00 00 00&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用 <code>Buffer.alloc()</code> 方法创建了一个包含五个字节的新的 Buffer，并将其所有字节初始化为零。我们还通过访问 <code>buf</code> 数组索引来修改了 Buffer 中的一个字节，并输出了修改后的结果。</p><h3 id="buffer的创建过程" tabindex="-1"><a class="header-anchor" href="#buffer的创建过程" aria-hidden="true">#</a> Buffer的创建过程</h3><p>在 Node.js 中，<code>Buffer</code> 是使用 C++ 底层库进行实现的。具体地说，<code>Buffer</code> 会在内存中分配一段连续的空间，用于存储二进制数据。</p><p>创建一个新的 <code>Buffer</code> 实例时，Node.js 会为其在内存中分配一段连续的空间，并将其所有字节初始化为零。如果指定了初始值，则会将其写入到这段连续的空间中。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>码<span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的代码中，我们使用 <code>Buffer.from()</code> 方法创建了一个包含字符串 <code>&#39;hello&#39;</code> 的新的 <code>Buffer</code> 实例。当执行该行代码时，Node.js 会为该 <code>Buffer</code> 在内存中分配一段连续的空间，并将其所有字节初始化为 <code>&#39;hello&#39;</code> 字符串的 UTF-8 编码值。</p><p>需要注意的是，Node.js 并不会频繁地向操作系统申请内存空间。相反，它使用了一种称为 &quot;slab allocation&quot; 的机制来管理内存。</p><p>在 slab allocation 机制中，Node.js 会预先分配一些内存块（称为 &quot;slab&quot;），并将其缓存在内部的内存池中。当需要创建新的 <code>Buffer</code> 实例时，Node.js 会优先从该内存池中分配或复用已有的 slab，而不是向操作系统申请新的内存空间。这样可以避免频繁的内存分配和释放操作，提高了性能和效率。</p><p>另外，在 Node.js 中，<code>Buffer</code> 对象本身是一个 JavaScript 对象，它包装了底层的 C++ Buffer 对象。因此，当您创建一个新的 <code>Buffer</code> 实例时，实际上是在 JavaScript 层面上创建了一个对象，而不是直接向操作系统申请内存空间。这个对象会引用底层的 C++ Buffer 对象，使得 JavaScript 层面可以方便地对二进制数据进行操作。由于这种间接的封装方式，也可以减少频繁向操作系统申请内存的开销。</p><p>需要注意的是，在极端情况下，如果创建了许多大型的 <code>Buffer</code> 实例，并且持有它们的引用，可能会导致内存泄漏等问题。因此，在使用 <code>Buffer</code> 时，建议注意内存的使用情况，并及时释放不再需要的对象。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,98),k={href:"https://github.com/yjhjstz/deep-into-node/blob/master/chapter1/chapter1-0.md",target:"_blank",rel:"noopener noreferrer"};function v(m,f){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("文件系统是服务器开发的基础，服务器必须支持数据的交互操作。对于任何一个为服务器端服务的语言或者框架通常都会有自己的文件系统。Node 的文件系统模块是 "),n("a",d,[s("fs"),e(a)]),s(" 。")]),r,n("ul",null,[n("li",null,[n("a",k,[s("Deep-into-node"),e(a)])])])])}const g=p(l,[["render",v],["__file","Node01.html.vue"]]);export{g as default};
