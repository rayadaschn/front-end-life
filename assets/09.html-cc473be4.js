import{_ as e,Z as p,a0 as o,F as l,a1 as c,X as i,Y as u,$ as r}from"./framework-5dd7fabc.js";const d={},n=p,s=o,k=l,v=c,a=r,m=i,b=u,h=a(`<p>框架类面试主要考察三个方面:</p><ul><li>框架的使用(基本使用, 高级特性, 周边插件)</li><li>框架的原理(基本原理的了解, 热门技术的深度和全面性)</li><li>框架的实际应用,即设计能力(组件结构和数据结构)</li></ul><h2 id="前置梳理" tabindex="-1"><a class="header-anchor" href="#前置梳理" aria-hidden="true">#</a> 前置梳理</h2><h3 id="对-spa-的理解" tabindex="-1"><a class="header-anchor" href="#对-spa-的理解" aria-hidden="true">#</a> 对 spa 的理解</h3><p>SPA 单页面应用，一个主页面和页面组件组成，局部刷新，无法 SEO 优化，但速度快用户体验好，已与维护；</p><p>MPA 多页面应用，多个完整页面，整页刷新，SEO 易于实现，切换加载资源 速度较慢，维护成本较高。</p><h3 id="请说一下对响应式数据的理解" tabindex="-1"><a class="header-anchor" href="#请说一下对响应式数据的理解" aria-hidden="true">#</a> 请说一下对响应式数据的理解？</h3><p>实现原理：</p><p>在 Vue2 中是用 Object.defineProperty 将属性进行劫持，数组则是通过重写数组方法进行实现的。多层对象通过递归实现劫持。Vue3 中则采用 Proxy + Reflect 实现。</p><p>Vue2 的缺陷：</p><ul><li>在对属性进行劫持的时候，需要对属性进行重写添加 Getter 和 Setter 性能较差。且当新增属性和删除属性时无法监控变化，需要用 <code>$set</code> 和 <code>$delete</code> 实现。</li><li>数组需要单独处理，重新定义各个方法，且<strong>数组的索引和长度变化</strong>无法监控得到，因此数组的变更需要用 <code>arr.splice()</code> 等方法实现响应式；</li><li>对于 ES6 中新的 Map 和 Set 等数据结构不支持。</li></ul><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><ul><li>指令和插值 <ul><li>插值、表达式</li><li>指令、动态属性</li><li>v-html：会有 XSS 风险，会覆盖子组件</li></ul></li><li>computed 和 watch <ul><li>computed 有缓存 data 不变则不会重新计算</li><li>watch 的深度监听</li><li>watch 监听引用类型，拿不到 oldValue</li></ul></li><li>class 和 style</li><li>条件渲染 <ul><li><code>v-if</code> 和 <code>v-else</code> 的用法, 可使用变量, 也可使用 <code>===</code> 表达式</li><li><code>v-if</code> 和 <code>v-show</code> 的区别</li><li><code>v-if</code> 和 <code>v-show</code> 的使用场景</li></ul></li><li>循环(列表)渲染 <ul><li>如何遍历对象? -- <code>v-for</code></li><li>key 的重要性，key 不能重复, key 不推荐用 index, 因为节点移动时, 会导致其它 key 也发生变化。</li><li><code>v-for</code> 和 <code>v-if</code> 不能一起使用</li></ul></li><li>事件 <ul><li>event 参数，自定义参数</li><li>事件修饰符 <ul><li>阻止单击事件继续传播: <code>&lt;a @click.stop=&quot;doThis&quot; &gt;A&lt;/a&gt;</code></li><li>提交时间不再重载页面: <code>&lt;a @click.submit.prevent=&quot;onSubmit&quot; &gt;B&lt;/a&gt;</code></li><li>修饰符可以串联: <code>&lt;a @click.stop.prevent=&quot;doThat&quot; &gt;C&lt;/a&gt;</code></li><li>只有修饰符: <code>&lt;a v-on:submit.prevent=&quot;doThat&quot; &gt;D&lt;/a&gt;</code></li></ul></li><li>按键修饰符 <ul><li>即使 Alt 或 Shift 被一同按下也会触发: <code>&lt;a @click.ctrl=&quot;onClick&quot; &gt;A&lt;/a&gt;</code></li><li>只有 Ctrl 被按下才会触发: <code>&lt;a @click.ctrl.exact=&quot;onClick&quot; &gt;B&lt;/a&gt;</code></li><li>没有任何修饰符被按下时才会触发: <code>&lt;a @click.exact=&quot;onClick&quot; &gt;C&lt;/a&gt;</code></li></ul></li><li>事件如何绑定 -- <code>@click</code></li></ul></li><li>表单 <ul><li>v-model</li><li>常见表单项 textarea,checkbox,radio,select</li><li>修饰符 v-model.lazy, v-model.number, v-model.trim</li></ul></li></ul><p>对于组件的 <code>v-model</code> 在 Vue2 和 Vue3 中使用方式不同。</p><p>在 Vue2 中，<code>v-model</code> 是 <code>value</code> 属性 + <code>input</code> 事件的语法糖，实现双向绑定。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 等价于 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message = $event.target.value<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>父子组件数据通信:</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 父组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 子组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">updateValue</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Vue3 中，<code>v-model</code> 是 <code>modelValue</code> 属性 + <code>update:modelValue</code> 事件的语法糖，实现双向绑定。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 父组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 子组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;modelValue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;update:modelValue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 默认绑定的emit更新变为 update:modelValue</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">updateValue</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:modelValue&#39;</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vue 3 支持绑定多个 <code>v-model</code>，通过参数区分：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 父组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span> <span class="token attr-name"><span class="token namespace">v-model:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-model:</span>content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 子组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;update:title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;update:content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件使用" tabindex="-1"><a class="header-anchor" href="#组件使用" aria-hidden="true">#</a> 组件使用</h2><p>对组件化的理解：好处是高内聚、可重用、可组合。</p><ul><li>组件间通信 : props 和 $emit</li><li>自定义事件</li><li>生命周期 <ul><li>单个: 挂载,更新,销毁</li><li>多个(父子组件): <ul><li>created(setup): 父 -&gt; 子</li><li>mounted(onMounted): 子 -&gt; 父</li><li>beforeUpdate(onBeforeUpdate): 父 -&gt; 子</li><li>updated(onUpdated): 子 -&gt; 父</li><li>beforeDestroy(onBeforeUnmount): 父 -&gt; 子</li><li>destroyed(onUnmounted): 子 -&gt; 父</li></ul></li></ul></li><li>props(类型和默认值)</li><li>v-on</li></ul><h2 id="vue-的高级特性" tabindex="-1"><a class="header-anchor" href="#vue-的高级特性" aria-hidden="true">#</a> vue 的高级特性</h2><ul><li><p>自定义 v-model</p></li><li><p>$nextTick</p><ul><li>Vue 是异步渲染;</li><li>data 改变之后, DOM 不会立即渲染;</li><li>$nextTick 会在 DOM 渲染之后执行，以获取最新的 DOM 节点。</li></ul></li><li><p>slot 插槽: 父组件向子组件传递内容</p><ul><li>作用域插槽 <code>v-slot=&quot;{ item }&quot;</code> : 父组件向子组件传递内容</li><li>具名插槽 <code>v-slot:xxx</code>: 父组件向子组件传递内容，并指定插槽的名字</li></ul></li><li><p>keep-alive</p><ul><li>场景: 缓存组件;频繁切换,不需要重复渲染的组件;vue 性能优化。</li><li>同 <code>v-show</code> 的区别: <code>keep-alive</code> 是在 vue 框架层级进行的 JS 对象渲染; <code>v-show</code>是 CSS display 控制显示和隐藏</li></ul></li><li><p>mixin: 多个组件有相同逻辑,抽离出来。vue3 中已被 composition API 所代替。</p></li><li><p>动态、异步组件</p><ul><li><p>动态组件: <code>&lt;component :is=&#39;componentName&#39;&gt;</code></p></li><li><p>异步组件: - 考点: <code>import()</code>函数和按需异步加载</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token comment">// simple usage</span>
<span class="token keyword">const</span> LoginPopup <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./components/LoginPopup.vue&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="全局数据管理-vuex" tabindex="-1"><a class="header-anchor" href="#全局数据管理-vuex" aria-hidden="true">#</a> 全局数据管理 vuex</h2><p>Vue3 中已被 pinia 所代替。</p><figure><img src="https://vuex.vuejs.org/vuex.png" alt="vuex" tabindex="0" loading="lazy"><figcaption>vuex</figcaption></figure><ul><li>state</li><li>getters</li><li>action</li><li>mutation</li><li>在 vue 中使用: <ul><li>dispatch</li><li>commit</li><li>mapState</li><li>mapGetters</li><li>mapActions</li><li>mapMutations</li></ul></li></ul><h2 id="vue-router" tabindex="-1"><a class="header-anchor" href="#vue-router" aria-hidden="true">#</a> vue-router</h2><ul><li>路由模式(hash、H5 history)</li><li>路由配置（动态路由、懒加载）</li><li>路由守卫（全局守卫、路由独享守卫、组件内守卫）</li><li>路由组件传参（query(url 显式)、params(url 不显示)）</li></ul><h2 id="框架原理" tabindex="-1"><a class="header-anchor" href="#框架原理" aria-hidden="true">#</a> 框架原理</h2><p>主要考察点：</p><ul><li>组件化</li><li>响应式</li><li>vdom 和 diff</li><li>模版编译</li><li>渲染过程</li><li>前端路由</li></ul><h3 id="组件化" tabindex="-1"><a class="header-anchor" href="#组件化" aria-hidden="true">#</a> 组件化</h3><ul><li>组件化: 把页面拆分成多个可复用的组件</li><li>组件化优势: 提高开发效率、代码复用、简化调试</li></ul><h3 id="响应式" tabindex="-1"><a class="header-anchor" href="#响应式" aria-hidden="true">#</a> 响应式</h3><ul><li>数据驱动视图: 数据改变, 视图随之改变，即 MVVM（model view viewModel）。</li><li>vue2 中用的 Object.defineProperty，vue3 中用了 Proxy。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue2 中 Object.defineProperty 的基本用法</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> name
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;set&#39;</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> newValue
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 测试</span>
data<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span> <span class="token comment">// set</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// get</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue2 中深度绑定实现</span>

<span class="token keyword">function</span> <span class="token function">updateView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;updateView&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 深度监听</span>
  <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

  <span class="token comment">// 核心 API</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> value
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">observe</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>
        value <span class="token operator">=</span> newValue
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;set&#39;</span><span class="token punctuation">)</span>

        <span class="token comment">// 触发更新视图</span>
        <span class="token function">updateView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 监听对象属性</span>

<span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> data <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 递归子属性</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 测试</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">numbers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>

data<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span> <span class="token comment">// set</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// get</span>
data<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token string">&#39;new param&#39;</span> <span class="token comment">// 新增属性</span>
<span class="token keyword">delete</span> data<span class="token punctuation">.</span>name <span class="token comment">// 删除属性</span>
data<span class="token punctuation">.</span>info<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span> <span class="token comment">// 深度监听,修改属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，Object.defineProperty 的缺点很明显:</p><ul><li>深度监听，需要递归到底，一次性计算量大；</li><li>无法监听新增属性/删除属性(<code>Vue.set</code>/<code>Vue.delete</code>)</li><li>无法监听数组, 需要做特殊处理。</li></ul><h3 id="vdom-和-diff" tabindex="-1"><a class="header-anchor" href="#vdom-和-diff" aria-hidden="true">#</a> vdom 和 diff</h3><ul><li>虚拟 DOM（Virtual DOM）: 把真实 DOM 中的 DOM 节点用 JavaScript 对象来表示，从而实现跨平台和跨浏览器。</li><li>virtual dom 使用 JS 模拟 DOM 结构，把 DOM 结构转换成 JavaScript 对象，然后通过 diff 算法比较新旧虚拟 DOM 的差异，最终把差异更新到真实 DOM 中。</li><li>diff 算法: 计算出最小的差异, 从而实现最小化更新。</li></ul>`,46),g={href:"https://github.com/snabbdom/snabbdom",target:"_blank",rel:"noopener noreferrer"},f=a(`<h3 id="什么是虚拟-dom" tabindex="-1"><a class="header-anchor" href="#什么是虚拟-dom" aria-hidden="true">#</a> 什么是虚拟 DOM？</h3><p>虚拟 DOM 是一种模拟真实 DOM 的技术，它把浏览器页面渲染时需要进行的 DOM 操作模拟成 JavaScript 对象，这样就可以在运行时更高效地更新 DOM。虚拟 DOM 的优点是可以在较短的时间内虚拟地表示真实 DOM，并且可以方便地实现跨平台和跨浏览器。</p><h3 id="v-show-和-v-if-有什么区别" tabindex="-1"><a class="header-anchor" href="#v-show-和-v-if-有什么区别" aria-hidden="true">#</a> v-show 和 v-if 有什么区别？</h3><p>v-show 指令是通过设置元素的 display 属性来控制元素是否显示，而 v-if 指令是通过控制元素在文档中的存在性来控制元素的显示和隐藏。</p><p>v-show 指令在初始渲染时就会创建元素，而 v-if 指令在条件第一次满足时才会创建元素，在条件第二次满足时会销毁元素，因此 v-if 指令比 v-show 指令具有更高的性能。</p><p>v-show 指令在条件改变时，并不会去操作 DOM，而 v-if 指令在条件改变时，会根据条件的改变去操作 DOM。</p><h3 id="v-for-和-v-if-一起使用有什么问题" tabindex="-1"><a class="header-anchor" href="#v-for-和-v-if-一起使用有什么问题" aria-hidden="true">#</a> v-for 和 v-if 一起使用有什么问题？</h3><p>v-for 指令和 v-if 指令不能同时使用，因为 v-for 指令会遍历数组或对象，而 v-if 指令会从初始渲染时就创建元素，因此 v-for 指令和 v-if 指令不能同时使用。</p><h3 id="为什么-v-for-循环的-key-需要唯一" tabindex="-1"><a class="header-anchor" href="#为什么-v-for-循环的-key-需要唯一" aria-hidden="true">#</a> 为什么 v-for 循环的 key 需要唯一？</h3><p>key 属性是 v-for 指令的参数，它用于指定当前元素的 key，key 必须是唯一的，这样 Vue 才能识别元素，从而高效地更新 DOM。</p><p>原理是在 diff 算法中通过 tag 和 key 来判断，是否是 sameNode，以减少渲染次数，提升渲染性能。</p><p>当使用 v-for 指令时，如果不提供 key 属性，可能会导致性能问题。key 属性用于确保 Vue.js 能够正确地更新 DOM，特别是当列表项的顺序发生变化时。key 属性应该是一个唯一的值，用于标识每个列表项。</p><h3 id="vue-中的生命周期是什么-当父子组件同时存在" tabindex="-1"><a class="header-anchor" href="#vue-中的生命周期是什么-当父子组件同时存在" aria-hidden="true">#</a> Vue 中的生命周期是什么(当父子组件同时存在)</h3><p>在父子组件之间，父组件的生命周期钩子函数总是在子组件的生命周期钩子函数之前被调用。例如，父组件的 beforeCreate 和 created 钩子函数会在子组件的相应钩子函数之前调用，而父组件的 mounted 钩子函数会在子组件的 mounted 钩子函数之后调用。</p><p>这种执行顺序确保了父组件可以在子组件挂载之前进行必要的准备工作，并在子组件挂载完成后对其进行操作。</p><h3 id="vue-组件如何通讯" tabindex="-1"><a class="header-anchor" href="#vue-组件如何通讯" aria-hidden="true">#</a> vue 组件如何通讯</h3><ul><li>父子组件 <code>props</code> 和 <code>$emit</code>;</li><li>eventBus，自定义事件 <code>event.$on</code>、<code>event.$off</code>和<code>event.$emit</code>;</li><li>vuex/pinia，共享状态管理;</li></ul><h3 id="描述组件渲染和更新的过程" tabindex="-1"><a class="header-anchor" href="#描述组件渲染和更新的过程" aria-hidden="true">#</a> 描述组件渲染和更新的过程</h3><p>一个组件渲染到页面，当修改 data 触发更新(数据驱动视图)，其背后的原理是什么？需要掌握哪些要点？</p><p>要点：</p><ul><li>响应式：监听 data 属性 getter 和 setter</li><li>模版编译：模版到 render 函数，再到 vnode</li><li>vdom：patch（elem， vnode）和 patch（vnode，newVnode）</li></ul><ol><li>初次渲染过程: <ul><li>解析模版为 render 函数（在开发环境已完成，vue-loader）</li><li>触发响应式，监听 data 属性 getter 和 setter</li><li>执行 render 函数，得到 vnode，patch(elem, vnode)</li></ul></li><li>更新过程: <ul><li>修改 data，触发 setter（此前在 getter 中已被监听）</li><li>重新执行 render 函数，得到新的 vnode，patch(vnode, newVnode)</li></ul></li></ol><h3 id="为什么组件的-data-必须是一个函数" tabindex="-1"><a class="header-anchor" href="#为什么组件的-data-必须是一个函数" aria-hidden="true">#</a> 为什么组件的 data 必须是一个函数？</h3><ul><li>组件是可复用的 Vue 实例，且可以有多个实例，如果 data 是一个对象，那么这些实例共用一个 data，就会造成一个修改 data，会影响到其他实例。</li><li>如果是组件，组件的 data 选项必须是一个函数，因此每次创建该组件实例的时候，data 都会被重新计算。</li></ul><h3 id="ajax-请求应该放在哪个生命周期中" tabindex="-1"><a class="header-anchor" href="#ajax-请求应该放在哪个生命周期中" aria-hidden="true">#</a> ajax 请求应该放在哪个生命周期中？</h3><ul><li>组件创建完成之后的 mounted 中，此时 data 已经完成初始化，可以进行 ajax 请求；</li><li>JS 是单线程，ajax 异步获取数据；</li><li>放在 mounted 之前没有作用，只会让逻辑变得更加混乱。</li></ul><h3 id="什么时候用-keep-alive" tabindex="-1"><a class="header-anchor" href="#什么时候用-keep-alive" aria-hidden="true">#</a> 什么时候用 keep-alive？</h3><ul><li>缓存组件，不需要重复渲染</li><li>如多个静态 tab 页的切换</li><li>优化性能</li></ul><h3 id="vue-常见的性能优化方式" tabindex="-1"><a class="header-anchor" href="#vue-常见的性能优化方式" aria-hidden="true">#</a> vue 常见的性能优化方式</h3><ul><li>合理使用 <code>v-show</code> 和 <code>v-if</code>；</li><li>合理使用 <code>computed</code>；</li><li>合理使用 <code>keep-alive</code>;</li><li>合理使用异步组件；</li><li><code>v-for</code> 加 key，以避免和 <code>v-if</code> 同时使用；</li><li>自定义事件、DOM 事件及时销毁；</li><li>data 层级不要太深；</li><li>前端通用的性能优化，如图片懒加载。</li></ul><h3 id="网页-url-组成部分" tabindex="-1"><a class="header-anchor" href="#网页-url-组成部分" aria-hidden="true">#</a> 网页 url 组成部分</h3><p>举例：<code>http://127.0.0.1:8881/home.html?a=100&amp;b=200#/second/other</code></p><ul><li><code>location.protocol</code>：协议 &#39;http:&#39;</li><li><code>location.hostname</code>：主机名 &#39;127.0.0.1&#39;</li><li><code>location.host</code>：主机名 &#39;127.0.0.1:8881&#39;</li><li><code>location.port</code>：端口 &#39;8881&#39;</li><li><code>location.pathname</code>：路径 &#39;/home.html&#39;</li><li><code>location.search</code>：参数 &#39;?a=100&amp;b=200&#39;</li><li><code>location.hash</code>：锚点 &#39;#/second/other&#39;</li></ul><h3 id="hash-跳转" tabindex="-1"><a class="header-anchor" href="#hash-跳转" aria-hidden="true">#</a> hash 跳转</h3><p>hash 的特定:</p><ul><li>hash 变化会触发网页跳转，即浏览器的前进、后退</li><li>hash 变化不会刷新页面，SPA 必需的特点</li><li>hash 不会提交到 server 端</li></ul><p>hash 变化的情况:</p><ul><li>JS 修改 URL: <code>location.href = &#39;#/user&#39;</code></li><li>手动修改 URL 的 hash 部分</li><li>浏览器的前进和后退</li></ul><h3 id="h5-history-跳转" tabindex="-1"><a class="header-anchor" href="#h5-history-跳转" aria-hidden="true">#</a> H5 history 跳转</h3><p>history 跳转的特点:</p><ul><li>用 url 规范的路由，但跳转不会刷新页面</li><li><code>history.pushState()</code>、<code>window.onpopstate</code> 和 <code>history.replaceState()</code> 改变 URL，但不会触发跳转</li><li>H5 history 需要后端支持</li></ul><p>hash 和 H5 history 的比较选择:</p><ul><li>to B 的系统推荐用 hash，简单易用，对 url 规范不敏感；</li><li>to C 的系统可以考虑用 H5 history，但需要服务端支持；</li><li>能用简单的就不用复杂的，考虑成本和收益。</li></ul><h2 id="vue3-部分" tabindex="-1"><a class="header-anchor" href="#vue3-部分" aria-hidden="true">#</a> vue3 部分</h2><ul><li>createApp</li><li>emits 属性</li><li>多事件处理</li><li>Fragment</li><li>溢出 sync 改为 <code>v-model</code> 参数</li><li>异步组件的引用方式</li><li>移除 filter</li><li>Teleport</li><li>Suspense</li><li>Composition API <ul><li>ref、toRef、toRefs</li><li>reactive、shallowReactive、shallowRef</li><li>computed</li><li>watch 和 watchEffect</li><li>生命周期钩子函数</li></ul></li></ul><h3 id="vue3-比-vue2-有什么优势" tabindex="-1"><a class="header-anchor" href="#vue3-比-vue2-有什么优势" aria-hidden="true">#</a> vue3 比 vue2 有什么优势?</h3><ul><li>性能提升，Composition APi 对 tree-Shaking 更友好，打包大小更小，初次渲染更快，更新渲染更快，内存使用减少;</li><li>更好的 ts 支持;</li><li>更好的代码组织，更好的逻辑抽离；</li><li>Vue2 中所有属性都是通过 this 访问，this 存在指向明确问题；</li></ul><h3 id="vue3-生命周期" tabindex="-1"><a class="header-anchor" href="#vue3-生命周期" aria-hidden="true">#</a> Vue3 生命周期</h3><ul><li><p>破坏性的变更:</p><ul><li>beforeDestroy 改名为 beforeUnmount</li><li>destroyed 改名为 unmounted</li></ul></li><li><p>其它沿用 Vue2 的生命周期，但添加前缀 <code>on</code>;</p><ul><li>beforeCreate -&gt; onBeforeCreate</li><li>created -&gt; onCreated</li><li>beforeMount -&gt; onBeforeMount</li><li>mounted -&gt; onMounted</li><li>beforeUpdate -&gt; onBeforeUpdate</li><li>updated -&gt; onUpdated</li><li>beforeUnmount -&gt; onBeforeUnmount</li><li>unmounted -&gt; onUnmounted</li></ul></li><li><p>setup 代替了 beforeCreate 和 created;</p></li></ul><p>整合代码:</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  onBeforeMount<span class="token punctuation">,</span>
  onMounted<span class="token punctuation">,</span>
  onBeforeUpdate<span class="token punctuation">,</span>
  onUpdated<span class="token punctuation">,</span>
  onBeforeUnmount<span class="token punctuation">,</span>
  onUnmounted<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    HelloWorld<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;Welcome to Your Vue.js App&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// composition API</span>
    <span class="token comment">// 在 setup() 内部使用生命周期钩子</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setup&#39;</span><span class="token punctuation">)</span>
    <span class="token function">onBeforeMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">onBeforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">onUpdated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 兼容早期 Options API</span>
  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="composition-api-有什么好处" tabindex="-1"><a class="header-anchor" href="#composition-api-有什么好处" aria-hidden="true">#</a> Composition API 有什么好处?</h3><ul><li>更好的代码组织</li><li>更好的逻辑复用</li><li>更好的类型推导</li></ul><h3 id="如何理解-ref、toref-和-torefs" tabindex="-1"><a class="header-anchor" href="#如何理解-ref、toref-和-torefs" aria-hidden="true">#</a> 如何理解 ref、toRef 和 toRefs</h3><h4 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> ref</h4><ul><li><p>生成值类型的响应式数据</p></li><li><p>可用于模版和 reactive</p></li><li><p>通过 <code>.value</code> 修改值</p></li><li><p>使用技巧命名统一加后缀 <code>Ref</code>，如<code>const nameRef = ref(&#39;张三&#39;)</code></p></li><li><p>ref 还可以获取 DOM 元素，路径同 Vue2 一样：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elemRef<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>被获取的 DOM 元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;RefDom&#39;</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 此处的 &quot;elemRef&quot; 为Dom 中 ref 的赋值项</span>
    <span class="token keyword">const</span> elemRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ref 获取的元素为:&#39;</span><span class="token punctuation">,</span> elemRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      elemRef<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="toref" tabindex="-1"><a class="header-anchor" href="#toref" aria-hidden="true">#</a> toRef</h4><ul><li>针对一个响应式对象(<code>reactive</code> 封装)的 <code>prop</code>，创建一个 <code>ref</code>，具有响应式；</li><li>两者保持引用关系</li></ul><p>即对 reactive 对象的保持响应式的“解耦”：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> ageRef <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment">// ageRef 会同时响应</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="torefs" tabindex="-1"><a class="header-anchor" href="#torefs" aria-hidden="true">#</a> toRefs</h4><ul><li>将响应式对象(<code>reactive</code> 封装)全部转换为普通对象;</li><li>但是普通对象的每个 <code>prop</code> 都是对应 <code>ref</code>;</li><li>俩者保持引用关系;</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> stateRefs <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> ageRef<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> nameRef <span class="token punctuation">}</span> <span class="token operator">=</span> stateRefs

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment">// ageRef 会同时响应</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>俩个较好的应用:</p><ol><li><p>合成函数返回响应式对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// ......</span>
<span class="token comment">// 返回时转换为 ref</span>
<span class="token keyword">return</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以在不失去响应式的情况下破坏结构</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      x<span class="token punctuation">,</span>
      y<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>总结:</p><ul><li>用 reactive 做对象的响应式,用 ref 做值类型的响应式;</li><li>setup 中返回 <code>toRefs(state)</code>, 或者 <code>toRef(state, &#39;xxx&#39;)</code></li><li>ref 的变量命名都用&quot;Ref&quot;做后缀</li><li>合成函数返回响应式对象时，使用 toRefs</li></ul><h3 id="为什么需要-ref" tabindex="-1"><a class="header-anchor" href="#为什么需要-ref" aria-hidden="true">#</a> 为什么需要 ref?</h3><ul><li>返回值类型，会丢失响应式。如在 setup、computed、合成函数等中，都有可能返回值类型。</li><li>Vue 如不定义 ref，用户将自造 ref，反而混乱。</li></ul><h3 id="为什么需要-value" tabindex="-1"><a class="header-anchor" href="#为什么需要-value" aria-hidden="true">#</a> 为什么需要 <code>.value</code>?</h3><ul><li>ref 是一个对象（不丢失响应式），<code>value</code> 存储值；</li><li>通过 <code>.value</code> 属性的 <code>get</code> 和 <code>set</code> 实现响应式;</li><li>用于<code>模版</code>、<code>reactive</code> 时，不需要 <code>.value</code>，其它情况需要。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 简单理解 computed 返回一个 ref 值的逻辑</span>

<span class="token comment">// -------- computed 应用 -----------</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> state<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// -------- computed 实现原理 -----------</span>
<span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token parameter">getter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span>
  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    ref<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> ref
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为什么需要-toref-和-torefs" tabindex="-1"><a class="header-anchor" href="#为什么需要-toref-和-torefs" aria-hidden="true">#</a> 为什么需要 <code>toRef</code> 和 <code>toRefs</code></h3><blockquote><p>toRef 的作用是创建一个新的 Ref 变量，转换 Reactive 对象的某个字段为 Ref 变量;</p><p>toRefs 的作用是创建一个新的对象，它的每个字段都是 Reactive 对象各个字段的 Ref 变量。</p></blockquote><ul><li>初衷：不丢失响应式的情况下，把对象数据<strong>分解</strong>或<strong>扩散</strong>；</li><li>前提：针对的是响应式对象（reactive 封装过的）<strong>非普通对象</strong>；</li><li>目的是：<strong>不创造</strong>响应式，而是<strong>延续响应式</strong>。</li></ul><h3 id="如何理解-v-model-同-vue2-中的-sync" tabindex="-1"><a class="header-anchor" href="#如何理解-v-model-同-vue2-中的-sync" aria-hidden="true">#</a> 如何理解 <code>v-model</code>? 同 vue2 中的 <code>.sync</code></h3><p><code>v-model</code> 的作用是实现表单元素和 Vue 实例数据之间的双向绑定。在 Vue2 中<code>v-model</code> 只能实现一个绑定, <code>.sync</code>是同时实现多个父子组件之间双向数据绑定的语法糖，现在 Vue3 中<code>v-model</code>可实现多个双向绑定。</p><p>v-model 在表单和组件中表现还不一致。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Vue3 中如下使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>实质是如下的语法糖:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message = $event.target.value<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外， 在复选框中 <code>v-model</code> 则会被解析成： <code>checked</code> + <code>change</code> 事件。</p><p>同理还有 <code>v-model/emits</code> 父子组件的通信。</p><ol><li>在父组件中，通过 v-model 向子组件传值；</li><li>在子组件中通过自身设定的 emits 向父组件<strong>通知</strong>数据更新。</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 1. Father.vue 向子组件传值 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name"><span class="token namespace">v-model:</span>username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userInfo.name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 2. Child.vue 向父组件通知数据更新 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 请注意这里是固定的 &quot;update:&quot; 的前缀</span>
  <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;update:username&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上可知，这里的 v-model 的语法糖实质为：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- Father.vue 向子组件传值 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- v-model 语法糖 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name"><span class="token namespace">v-model:</span>username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userInfo.name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

  <span class="token comment">&lt;!-- v-model 语法糖实质 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">:username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userInfo.name<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">@update:</span>username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userInfo.name = $event<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="watch-和-watcheffect-的区别是什么" tabindex="-1"><a class="header-anchor" href="#watch-和-watcheffect-的区别是什么" aria-hidden="true">#</a> watch 和 watchEffect 的区别是什么?</h3><ul><li>俩者都可以监听 data 属性变化</li><li>watch 需要明确监听哪个属性</li><li>watchEffect 会根据函数内的变量属性，自动监听变化</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numberRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token function">watch</span><span class="token punctuation">(</span>
  numberRef<span class="token punctuation">,</span> <span class="token comment">// 第一个参数为确定监听的属性</span>
  <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 第二个为回调函数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;numberRef 变化了&#39;</span><span class="token punctuation">,</span> oldVal<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">Immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 初始化时, 一定会触发</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;会依据回调函数内的变量变化, 而重新执行&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;numberRef:&#39;</span><span class="token punctuation">,</span> numberRef<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue3-中-setup-如何获取组件实例" tabindex="-1"><a class="header-anchor" href="#vue3-中-setup-如何获取组件实例" aria-hidden="true">#</a> vue3 中 setup 如何获取组件实例</h3><ul><li>在 setup 和其他 Composition API 中没有 this;</li><li>可通过 getCurrentInstance 获取当前实例;</li><li>若使用 Options API 可照常使用 this。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> onMounted<span class="token punctuation">,</span> getCurrentInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;GetInstance&#39;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>

    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this in onMounted:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Instance 中的属性&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>data<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token comment">// 要在 Mounted 生命周期后再获取</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;instance&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue3-为什么比-vue2-快" tabindex="-1"><a class="header-anchor" href="#vue3-为什么比-vue2-快" aria-hidden="true">#</a> Vue3 为什么比 Vue2 快?</h3><ul><li>Proxy 响应式</li><li>PatchFlag <ul><li>编译模版时, 动态节点做标记</li><li>标记, 分为不同的类型, 如 TEXT PROPS</li><li>diff 算法中, 可区分静态节点, 以及不同类型的动态节点</li></ul></li><li>hoistStatic <ul><li>将静态节点的定义, 提升到父作用域, 缓存起来</li><li>多个相邻的静态节点, 会被合并起来</li><li>典型的拿空间换时间的优化策略</li></ul></li><li>cacheHandle <ul><li>缓存事件</li></ul></li><li>tree-shaking</li></ul><h3 id="vite-为什么会快" tabindex="-1"><a class="header-anchor" href="#vite-为什么会快" aria-hidden="true">#</a> Vite 为什么会快?</h3><ul><li>开发环境使用 ES6 Module，无需打包因此非常快；</li><li>生产环境使用 rollup， 并不会快很多。</li></ul><h3 id="composition-api-和-react-hook-对比" tabindex="-1"><a class="header-anchor" href="#composition-api-和-react-hook-对比" aria-hidden="true">#</a> Composition API 和 React Hook 对比</h3><ul><li>Composition 的 setup 只会调用一次，而 React 的 Hook 函数会被被多次调用；</li><li>前者无需 useMemo useCallback，因为 setup 只会调用一次；</li><li>前者无需考虑调用顺序，而后者需要保证 hooks 的顺序一致；</li><li>但是 reactive 和 ref 比后者的 useState 要更难理解。</li></ul>`,98);function y(w,x){const t=k("ExternalLinkIcon");return m(),b("div",null,[h,n("p",null,[s("可参考资源库: "),n("a",g,[s("snabbdom"),v(t)])]),f])}const V=e(d,[["render",y],["__file","09.html.vue"]]);export{V as default};
