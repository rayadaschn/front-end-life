import{_ as n,X as s,Y as a,$ as t}from"./framework-97fa2d96.js";const p={},e=t,o=s,c=a,l=e(`<p>从这里开始学习设计模式。</p><p>接着上篇继续来聊设计模式。</p><ul><li><a href="#%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">模版方法模式</a></li><li><a href="#%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F">享元模式</a></li><li><a href="#%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F">职责链模式</a></li><li><a href="#%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F">中介模式</a></li><li><a href="#%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F">装饰者模式</a></li><li><a href="#%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F">状态模式</a></li><li><a href="#%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F">适配器模式</a></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li></ul><h2 id="模版方法模式" tabindex="-1"><a class="header-anchor" href="#模版方法模式" aria-hidden="true">#</a> 模版方法模式</h2><p>模板方法模式是一种只需使用继承就可以实现的非常简单的模式。</p><p>模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常在抽象父类中封装了子类的算法框架，包括实现一些公共方法以及封装子类中所有方法的执行顺序。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Beverage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">boilWater</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;把水煮沸&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> brew <span class="token operator">=</span>
    param<span class="token punctuation">.</span>brew <span class="token operator">||</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;必须传递 brew 方法&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">const</span> pourInCup <span class="token operator">=</span>
    param<span class="token punctuation">.</span>pourInCup <span class="token operator">||</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;必须传递 pourInCup 方法&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">const</span> addCondiments <span class="token operator">=</span>
    param<span class="token punctuation">.</span>addCondiments <span class="token operator">||</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;必须传递 addCondiments 方法&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">F</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token constant">F</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> Coffee <span class="token operator">=</span> <span class="token function">Beverage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">brew</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;用沸水冲泡咖啡&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">pourInCup</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;把咖啡倒进杯子&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">addCondiments</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;加糖和牛奶&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> Tea <span class="token operator">=</span> <span class="token function">Beverage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">brew</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;用沸水浸泡茶叶&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">pourInCup</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;把茶倒进杯子&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">addCondiments</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;加柠檬&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
coffee<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> tea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
tea<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="享元模式" tabindex="-1"><a class="header-anchor" href="#享元模式" aria-hidden="true">#</a> 享元模式</h2><p>享元(flyweight)模式是一种用于性能优化的模式，“fly”在这里是苍蝇的意思，意为蝇量级。享元模式的核心是运用共享技术来有效支持大量细粒度的对象。</p><p>享元模式的目标是尽量减少共享对象的数量，关于如何划分内部状态和外部状态，下面的几条经验提供了一些指引。</p><ul><li>内部状态存储于对象内部。</li><li>内部状态可以被一些对象共享。</li><li>内部状态独立于具体的场景，通常不会改变。</li><li>外部状态取决于具体的场景，并根据场景而变化，外部状态不能被共享。</li></ul><p>在享元模式中，对象被分为两种类型：内部状态和外部状态。内部状态是可以共享的，它们不依赖于具体的场景，因此可以在不同的对象之间共享。而外部状态则依赖于具体的场景，因此不能被共享。</p><p>享元模式的核心思想是将内部状态和外部状态分离，将内部状态存储在享元对象中，并通过参数传递外部状态。这样，当需要创建一个新的对象时，可以先检查是否存在具有相同内部状态的对象，如果存在，则可以重用该对象，而不必创建新的对象。</p><p>举个例子，假设我们有一个文本编辑器，需要创建大量的字符对象来表示文本中的每个字符。如果我们使用常规的方式来创建字符对象，那么每个字符对象都会占用一定的内存空间。但是，如果使用享元模式，我们可以将字符对象的内部状态（例如字符的字体、大小、颜色等）存储在享元对象中，并通过参数传递字符的位置等外部状态。这样，如果需要创建同一字符的多个实例，可以重用已经存在的享元对象，从而减少内存使用和对象创建的开销。</p><p>在 JavaScript 中，可以通过将内部状态存储在共享的对象中来实现享元模式。</p><p>下面是一个简单的示例，演示如何使用享元模式创建大量的圆形对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个 Circle 类表示圆形</span>
<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">radius<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color
  <span class="token punctuation">}</span>

  <span class="token comment">// 定义一个 draw 方法来绘制圆形</span>
  <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Drawing a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> circle with radius </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> at (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义一个 CircleFactory 工厂类来创建圆形对象</span>
<span class="token keyword">class</span> <span class="token class-name">CircleFactory</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>circles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">getCircle</span><span class="token punctuation">(</span><span class="token parameter">radius<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果已经存在相同内部状态的圆形对象，则直接返回该对象</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>radius<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>circles<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>circles<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 否则，创建新的圆形对象，并将其存储在共享对象中</span>
    <span class="token keyword">const</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span>radius<span class="token punctuation">,</span> color<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>circles<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> circle
    <span class="token keyword">return</span> circle
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用 CircleFactory 工厂类创建大量的圆形对象</span>
<span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CircleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> circle1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getCircle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> circle2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getCircle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> circle3 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getCircle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 由于 circle1 和 circle3 具有相同的内部状态，因此它们实际上是同一个对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>circle1 <span class="token operator">===</span> circle3<span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">// 绘制圆形对象</span>
circle1<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// Drawing a red circle with radius 5 at (0, 0)</span>
circle2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// Drawing a blue circle with radius 10 at (10, 10)</span>
circle3<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// Drawing a red circle with radius 5 at (20, 20)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个 <code>Circle</code> 类来表示圆形，并定义了一个 <code>CircleFactory</code> 工厂类来创建圆形对象。在 <code>CircleFactory</code> 类中，我们使用一个共享的对象（<code>this.circles</code>）来存储已经创建的圆形对象。当需要创建新的圆形对象时，我们首先检查是否已经存在具有相同内部状态的圆形对象，如果存在，则直接返回该对象，否则，创建新的圆形对象，并将其存储在共享对象中。</p><p>在使用 <code>CircleFactory</code> 工厂类创建圆形对象时，我们可以看到，如果创建具有相同内部状态的圆形对象，则返回的实际上是同一个对象。这样，可以避免创建大量相似的圆形对象，从而减少内存使用和对象创建的开销。</p><h2 id="职责链模式" tabindex="-1"><a class="header-anchor" href="#职责链模式" aria-hidden="true">#</a> 职责链模式</h2><p>职责链模式的定义是:使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个基础处理器类</span>
<span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nextHandler <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>

  <span class="token function">setNextHandler</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nextHandler <span class="token operator">=</span> handler
  <span class="token punctuation">}</span>

  <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextHandler<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义具体的处理器类</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteHandler1</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
  <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;type1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ConcreteHandler1 处理了请求：&#39;</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span>
      <span class="token keyword">return</span> request
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteHandler2</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
  <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;type2&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ConcreteHandler2 处理了请求：&#39;</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span>
      <span class="token keyword">return</span> request
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteHandler3</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
  <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;type3&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ConcreteHandler3 处理了请求：&#39;</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span>
      <span class="token keyword">return</span> request
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用处理器类处理请求</span>
<span class="token keyword">const</span> handler1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> handler2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> handler3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

handler1<span class="token punctuation">.</span><span class="token function">setNextHandler</span><span class="token punctuation">(</span>handler2<span class="token punctuation">)</span>
handler2<span class="token punctuation">.</span><span class="token function">setNextHandler</span><span class="token punctuation">(</span>handler3<span class="token punctuation">)</span>

<span class="token keyword">const</span> request1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;type1&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;data1&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> request2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;type2&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;data2&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> request3 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;type3&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;data3&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> request4 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;type4&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;data4&#39;</span> <span class="token punctuation">}</span>

handler1<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request1<span class="token punctuation">)</span>
handler1<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request2<span class="token punctuation">)</span>
handler1<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request3<span class="token punctuation">)</span>
handler1<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request4<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们定义了一个基础的处理器类 <code>Handler</code>，它有一个 <code>nextHandler</code> 属性，用于存储下一个处理器。然后，我们定义了三个具体的处理器类 <code>ConcreteHandler1</code>、<code>ConcreteHandler2</code> 和 <code>ConcreteHandler3</code>，它们都继承自 <code>Handler</code> 类，并实现了 <code>handleRequest</code> 方法，用于在满足条件时处理请求，否则将请求传递给下一个处理器。</p><p>接着，我们创建了三个处理器实例 <code>handler1</code>、<code>handler2</code> 和 <code>handler3</code>，并将它们按照处理顺序连接起来。最后，我们创建了四个请求对象 <code>request1</code>、<code>request2</code>、<code>request3</code> 和 <code>request4</code>，并将它们依次交给 <code>handler1</code> 处理。</p><p>在运行上述代码后，你会看到如下输出：</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code>ConcreteHandler1 处理了请求： <span class="token operator">{</span> type<span class="token operator">:</span> <span class="token string">&#39;type1&#39;</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token string">&#39;data1&#39;</span> <span class="token operator">}</span>
ConcreteHandler2 处理了请求： <span class="token operator">{</span> type<span class="token operator">:</span> <span class="token string">&#39;type2&#39;</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token string">&#39;data2&#39;</span> <span class="token operator">}</span>
ConcreteHandler3 处理了请求： <span class="token operator">{</span> type<span class="token operator">:</span> <span class="token string">&#39;type3&#39;</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token string">&#39;data3&#39;</span> <span class="token operator">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，当请求的类型分别为 <code>type1</code>、<code>type2</code> 和 <code>type3</code> 时，对应的处理器成功处理了请求，而当请求类型为 <code>type4</code> 时，由于没有对应的处理器，请求被最后一个处理器忽略。</p><p>总的来说，职责链模式就是利用了链表这样的数据结构对转态进行传递，直至找到需要的节点。</p><h2 id="中介模式" tabindex="-1"><a class="header-anchor" href="#中介模式" aria-hidden="true">#</a> 中介模式</h2><p>中介模式是许多个对象之间通过一个中介对象进行通信和协作，而不是直接相互引用和交互。中介者对象将对象之间的交互集中在一起，从而降低了对象之间的耦合度，使得系统更易于维护和扩展。</p><blockquote><p>中介模式和代理模式的主要区别在于它们的目的和应用场景: 中介模式的主要目的是将多个对象之间的交互行为集中到一个中介者对象中，从而降低对象之间的耦合度，使得系统更易于维护和扩展。中介模式通常适用于对象之间的交互比较复杂、耦合度较高的情况，例如 GUI 应用程序中的组件之间的交互、多人在线游戏中的玩家之间的交互等。 代理模式的主要目的是为其他对象提供一个代理，从而控制对对象的访问。代理对象通常充当了被代理对象的占位符，可以在不改变原有代码的情况下增加额外的功能，例如缓存、权限控制、日志记录等。代理模式通常适用于需要对对象的访问进行控制和管理的情况，例如网络代理、远程代理、虚拟代理等。</p></blockquote><p>中介模式的关键在于将对象之间的交互行为抽象出来，形成一个中介者对象。中介者对象负责维护对象之间的关系，处理对象之间的通信和协作，从而实现对象之间的解耦。通常情况下，中介者对象会提供一些公共方法，用于对象之间的通信和协作，而对象则通过调用中介者对象的方法来实现与其他对象的交互。</p><p>下面是一个简单的中介模式示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个中介者类</span>
<span class="token keyword">class</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>components <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token function">register</span><span class="token punctuation">(</span><span class="token parameter">component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>components<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
    component<span class="token punctuation">.</span><span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">send</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> sender</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> component <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>components<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">!==</span> sender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        component<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义一个组件类</span>
<span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>

  <span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token parameter">mediator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator
  <span class="token punctuation">}</span>

  <span class="token function">send</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 发送了消息：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mediator<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">receive</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 收到了消息：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用中介者模式实现组件之间的通信</span>
<span class="token keyword">const</span> mediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> component1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token string">&#39;Component 1&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> component2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token string">&#39;Component 2&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> component3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token string">&#39;Component 3&#39;</span><span class="token punctuation">)</span>

mediator<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>component1<span class="token punctuation">)</span>
mediator<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>component2<span class="token punctuation">)</span>
mediator<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>component3<span class="token punctuation">)</span>

component1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from Component 1&#39;</span><span class="token punctuation">)</span>
component2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from Component 2&#39;</span><span class="token punctuation">)</span>
component3<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from Component 3&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个中介者类 <code>Mediator</code>，它维护了一个组件对象数组 <code>components</code>，并提供了注册组件和发送消息的方法。我们还定义了一个组件类 <code>Component</code>，它有一个 <code>name</code> 属性和一个 <code>mediator</code> 属性，用于存储组件的名字和中介者对象。组件类提供了发送消息和接收消息的方法，其中发送消息方法会调用中介者对象的 <code>send</code> 方法，从而实现了组件之间的通信。</p><p>最后，我们创建了三个组件对象 <code>component1</code>、<code>component2</code> 和 <code>component3</code>，并将它们注册到中介者对象 <code>mediator</code> 中。接着，我们分别调用了三个组件对象的 <code>send</code> 方法，从而实现了它们之间的通信。在运行上述代码后，你会看到如下输出：</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code>Component <span class="token number">1</span> 发送了消息：Hello from Component <span class="token number">1</span>
Component <span class="token number">2</span> 收到了消息：Hello from Component <span class="token number">1</span>
Component <span class="token number">3</span> 收到了消息：Hello from Component <span class="token number">1</span>
Component <span class="token number">2</span> 发送了消息：Hello from Component <span class="token number">2</span>
Component <span class="token number">1</span> 收到了消息：Hello from Component <span class="token number">2</span>
Component <span class="token number">3</span> 收到了消息：Hello from Component <span class="token number">2</span>
Component <span class="token number">3</span> 发送了消息：Hello from Component <span class="token number">3</span>
Component <span class="token number">1</span> 收到了消息：Hello from Component <span class="token number">3</span>
Component <span class="token number">2</span> 收到了消息：Hello from Component <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，在中介者模式的帮助下，组件之间的通信变得简单和灵活，组件之间的耦合度也得到了降低。</p><h2 id="装饰者模式" tabindex="-1"><a class="header-anchor" href="#装饰者模式" aria-hidden="true">#</a> 装饰者模式</h2><p>装饰者模式（Decorator pattern）是允许在不修改现有对象的情况下，动态地向对象添加额外的行为或责任。这种模式属于结构型模式，它以对客户端透明的方式扩展对象的功能。</p><p>在装饰者模式中，有一个基础的对象，它可以是实际的对象或者是抽象类。装饰者是包装在基础对象周围的对象，它们与基础对象具有相同的接口，因此它们可以被客户端代码透明地使用。装饰者可以添加新的行为或者修改原来的行为，但是它们并不改变基础对象的接口。</p><h2 id="状态模式" tabindex="-1"><a class="header-anchor" href="#状态模式" aria-hidden="true">#</a> 状态模式</h2><p>状态模式（State Pattern）: 允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</p><p>通俗理解就是用于在对象内部状态改变时改变其行为。在该模式中，对象的行为取决于其内部状态，并且可以在运行时更改状态。状态模式将状态封装在独立的类中，并将状态转换逻辑委托给这些类，以使得每个状态可以独立变化而不影响其他状态。</p><p>在状态模式中，通常会定义一个状态接口或抽象类，其中包含了所有可能的状态所需实现的方法。然后，为每个具体的状态创建一个单独的实现类。在使用状态模式时，对象将包含对当前状态实例的引用，并且将委托给状态对象来处理其行为。</p><p>通过将状态转换逻辑委托给状态类，状态模式可以使得代码更加灵活和可扩展。它可以减少条件语句和分支语句的使用，从而提高代码的可读性和可维护性。状态模式通常与其他设计模式（如策略模式和观察者模式）一起使用，以实现更复杂的行为。</p><p>以下是一个使用 JavaScript 实现状态模式的简单例子，假设有一个电视机对象，它可以处于不同的状态，如开启、关闭、静音等。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 状态接口</span>
<span class="token keyword">class</span> <span class="token class-name">TvState</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">tv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv
  <span class="token punctuation">}</span>
  <span class="token comment">// 所有状态需要实现的方法</span>
  <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">mute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 开启状态</span>
<span class="token keyword">class</span> <span class="token class-name">OnState</span> <span class="token keyword">extends</span> <span class="token class-name">TvState</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">tv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;电视已经开启&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;电视已经关闭&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span>offState<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">mute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;电视已经静音&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span>muteState<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 关闭状态</span>
<span class="token keyword">class</span> <span class="token class-name">OffState</span> <span class="token keyword">extends</span> <span class="token class-name">TvState</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">tv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;电视已经开启&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span>onState<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;电视已经关闭&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">mute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;电视已经关闭，不能静音&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 静音状态</span>
<span class="token keyword">class</span> <span class="token class-name">MuteState</span> <span class="token keyword">extends</span> <span class="token class-name">TvState</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">tv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;电视已经开启&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span>onState<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;电视已经关闭&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span>offState<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">mute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;电视已经取消静音&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span>onState<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 电视机类</span>
<span class="token keyword">class</span> <span class="token class-name">Tv</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OnState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>offState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OffState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>muteState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MuteState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offState
  <span class="token punctuation">}</span>
  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state
  <span class="token punctuation">}</span>
  <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">mute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">mute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用示例</span>
<span class="token keyword">const</span> tv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
tv<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;电视已经开启&quot;</span>
tv<span class="token punctuation">.</span><span class="token function">mute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;电视已经静音&quot;</span>
tv<span class="token punctuation">.</span><span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;电视已经关闭&quot;</span>
tv<span class="token punctuation">.</span><span class="token function">mute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;电视已经关闭，不能静音&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们定义了一个 <code>TvState</code> 接口，其中包含了所有状态需要实现的方法。然后，我们为每个具体的状态（<code>OnState</code>、<code>OffState</code>、<code>MuteState</code>）创建了单独的实现类。在 <code>Tv</code> 类中，我们维护了对当前状态的引用，并将所有行为委托给当前状态对象来处理。使用状态模式，我们可以轻松地添加新的状态，而无需修改 <code>Tv</code> 类中的代码，从而使得代码更加灵活和可扩展。</p><h2 id="适配器模式" tabindex="-1"><a class="header-anchor" href="#适配器模式" aria-hidden="true">#</a> 适配器模式</h2><p>适配器模式的作用是解决两个软件实体间的接口不兼容的问题。使用适配器模式之后，原本由于接口不兼容而不能工作的两个软件实体可以一起工作。</p><p>配适器模式在日常开发中其实很常见，如数据的冲洗，将后端返回的数据进行转化使其符合通用要求。</p><p>总的来说，适配器模式主要用来解决两个已有接口之间不匹配的问题，它不考虑这些接口是怎样实现的，也不考虑它们将来可能会如何演化。适配器模式不需要改变已有的接口，就能够 使它们协同作用。</p><p>装饰者模式和代理模式也不会改变原有对象的接口，但装饰者模式的作用是为了给对象增加功能。装饰者模式常常形成一条长的装饰链，而适配器模式通常只包装一次。代理模式是为了控制对对象的访问，通常也只包装一次。</p><p>外观模式的作用倒是和适配器比较相似，有人把外观模式看成一组对象的适配器，但外观模式最显著的特点是定义了一个新的接口。</p><p>适配器模式（Adapter Pattern）是一种结构型设计模式，它用于将一个类的接口转换成另一个客户端所期望的接口。适配器模式可以使得原本不兼容的接口协同工作。在适配器模式中，适配器类充当两个不兼容类之间的桥梁，将其中一个类的接口转换为另一个类所期望的接口。</p><p>好的，以下是另一个使用 JavaScript 实现适配器模式的例子。假设我们有两个电子设备类，一个是美国的电子设备，另一个是中国的电子设备，它们采用不同的电源标准，即美国电子设备使用 110V 电源，而中国电子设备使用 220V 电源。我们需要一个适配器将美国电子设备的电源转换为中国电子设备所需的 220V 电源。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 美国电子设备类</span>
<span class="token keyword">class</span> <span class="token class-name">USDevice</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>power <span class="token operator">=</span> <span class="token number">110</span>
  <span class="token punctuation">}</span>
  <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;美国电子设备已经开启&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 中国电子设备接口</span>
<span class="token keyword">class</span> <span class="token class-name">ChinaDevice</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>power <span class="token operator">=</span> <span class="token number">220</span>
  <span class="token punctuation">}</span>
  <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 电源适配器类</span>
<span class="token keyword">class</span> <span class="token class-name">PowerAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">ChinaDevice</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">usDevice</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>usDevice <span class="token operator">=</span> usDevice
  <span class="token punctuation">}</span>
  <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;电源适配器正在将电源从110V转换为220V&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>usDevice<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用示例</span>
<span class="token keyword">const</span> usDevice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">USDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PowerAdapter</span><span class="token punctuation">(</span>usDevice<span class="token punctuation">)</span>
adapter<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 输出 &quot;电源适配器正在将电源从110V转换为220V&quot; 和 &quot;美国电子设备已经开启&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们定义了一个 <code>USDevice</code> 类和一个 <code>ChinaDevice</code> 接口，它们采用不同的电源标准。然后，我们为美国电子设备（<code>USDevice</code>）创建了单独的实现类。在 <code>PowerAdapter</code> 类中，我们实现了 <code>ChinaDevice</code> 接口，将美国电子设备的电源转换为中国电子设备所需的 220V 电源。使用适配器模式，我们可以让美国电子设备的实例像中国电子设备一样调用 <code>turnOn()</code> 方法。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><ul><li>《JavaScript 设计模式与开发实践》</li></ul>`,61),i=[l];function u(k,r){return o(),c("div",null,i)}const v=n(p,[["render",u],["__file","DesignPatterns02.html.vue"]]);export{v as default};
