import{_ as p,X as o,Y as c,Z as i,V as l,W as u,F as r,$ as d}from"./framework-2060dede.js";const k={},n=o,s=c,m=r,e=i,t=d,v=l,b=u,g=t('<h1 id="vue3-中的懒加载" tabindex="-1"><a class="header-anchor" href="#vue3-中的懒加载" aria-hidden="true">#</a> Vue3 中的懒加载</h1><h2 id="_1-动物园里有什么" tabindex="-1"><a class="header-anchor" href="#_1-动物园里有什么" aria-hidden="true">#</a> 1. 动物园里有什么?</h2><p>我们都知道前端项目完成之后，需要对页面进行优化。首当其冲的便是优化首页加载速率，方法有很多，我们来看看其中重要的一项<strong>懒加载</strong>。</p><p>顾名思义，懒加载，就是加载页面的时候不是同步全部加载完成，而是在需要的时候进行加载。由此，产生俩个定义：<strong>同步组件</strong>和<strong>异步组件</strong>。</p>',4),h=n("strong",null,"同步组件",-1),y=n("code",null,"import",-1),_={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Tree_shaking",target:"_blank",rel:"noopener noreferrer"},q=t(`<p><strong>异步组件</strong>，由于是按需加载，所以导入时需要用到动态函数 <code>import()</code>。这种方式下的关键字 <code>import</code> 可以像调用函数一样来动态导入模块。并且，这种方式，将返回一个 <code>Promise</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;/modules/my-module.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something with the module.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-把大象装进冰箱" tabindex="-1"><a class="header-anchor" href="#_2-把大象装进冰箱" aria-hidden="true">#</a> 2. 把大象装进冰箱</h2><p>知道了定义，那在 Vue3 中如何使用呢？</p><p>由于动态加载多用于首屏优化，所以我们以 <code>router</code> 路由加载举例。分为 <code>webpack</code> 和 <code>vite</code>。</p><p>在路由中同步组件加载：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 同步组件</span>
<span class="token keyword">import</span> home <span class="token keyword">from</span> <span class="token string">&quot;@views/home.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> home<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>Webpack</code> 中，我们是这样使用的：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 异步组件</span>
<span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;home&quot; */</span> <span class="token string">&quot;@views/home.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，懒加载的配置便是在 <code>component</code> 中设置的，通过设置一个箭头函数，来动态加载。而 <code>import</code> 内部注释 /_ webpackChunkName: &quot;home&quot; _/ 起到的作用是项目打包后为切割后的代码文件命名（结果更加语义化）。</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>File                                        Size                    Gzipped

dist\\static\\js\\chunk-vendors.23code666.js    137.27 KiB              48.66 KiB
dist\\static\\css\\home.2023cd88.css           0.13 KiB                0.13 KiB
dist\\static\\css\\app.no996life.css            0.04 KiB                0.06 KiB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来看看 <code>vite</code>打包是怎么实现的。Vite 作为一个打包工具，如果直接用 <code>import()</code> 做懒加载，在打包到生产环境会报错，页面不会正常显示。为此，在 Vue3 中，新增了一个全新 API：<code>defineAsyncComponent</code>。顾名思义，就是显示声明一个异步组件。所以在 <code>router</code> 中如下使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 异步组件: Vue3通用方法</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token literal-property property">routes</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@views/home.vue</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也非常简洁，当然为了更好的提议，<code>Vite</code>还提供了特殊导入方法 <code>i<wbr>mport.meta.glob</code> ，从文件系统导入多个模块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">&quot;./dir/*.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上将会被转译为下面的样子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite 生成的代码</span>
<span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;./dir/foo.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./dir/foo.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;./dir/bar.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./dir/bar.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以遍历 <code>modules</code> 对象的 <code>key</code> 值来访问相应的模块：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> path <span class="token keyword">in</span> modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  modules<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mod</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配到的文件默认是懒加载的，通过动态导入实现，并会在构建时分离为独立的 <code>chunk</code>。</p><p>所以最终在路由中，可以这样做：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 异步组件: vite 打包 i<wbr>mport.meta.glob 方法</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">&quot;@views/*.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 导入所有 vue 组件,返回对象, key 为路径名称</span>

<span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> modules<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@views/home.vue</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上，便是 3 种懒加载的方案了。</p><p>到这里，我们已经可以实现常用的懒加载方案了，有什么实际的应用？可以看看《<a href="Vue04">Vue3 中的动态路由懒加载实例</a>》。</p><p>感谢你的时间，也希望你能有所收获。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>`,26),f={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import",target:"_blank",rel:"noopener noreferrer"},w={href:"https://cn.vitejs.dev/guide/features.html#glob-import",target:"_blank",rel:"noopener noreferrer"};function j(x,V){const a=m("ExternalLinkIcon");return v(),b("div",null,[g,n("p",null,[h,s("就是在页面打包时，组件会同所有代码一同打包到一个文件中。体积大了，加载的速率也就慢了。使用很简单，调用时直接静态 "),y,s(" 导入就行了，导入对象在加载时就被编译（无法做到按需编译，降低首页加载速度）。当然也不是没有好处的，"),n("strong",null,[s("静态导入能够更好的初始化依赖，而且更有利于静态分析工具和 "),n("a",_,[s("tree shaking"),e(a)]),s(" 发挥作用。所以不是必要情况，优先使用静态导入。")])]),q,n("ul",null,[n("li",null,[n("a",f,[s("Import"),e(a)])]),n("li",null,[n("a",w,[s("Glob 导入"),e(a)])])])])}const N=p(k,[["render",j],["__file","Vue03.html.vue"]]);export{N as default};
