import{_ as p,Z as o,a0 as l,F as i,a1 as c,X as d,Y as u,$ as r}from"./framework-97fa2d96.js";const k={},n=o,s=l,v=i,t=c,e=r,m=d,g=u,b=n("h1",{id:"tailwind-01-安装及配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tailwind-01-安装及配置","aria-hidden":"true"},"#"),s(" Tailwind 01 安装及配置")],-1),h=n("blockquote",null,[n("p",null,"该小结并无使用总结，主要介绍 Tailwind 的安装配置。")],-1),y={class:"hint-container tip"},f=n("p",{class:"hint-container-title"},"提示",-1),w={href:"https://tailwindcss.com/docs/installation/framework-guides",target:"_blank",rel:"noopener noreferrer"},x=e(`<h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><ol><li><p>通过 npm 安装 Tailwind：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> tailwindcss@latest postcss@latest autoprefixer@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>初始化 Tailwind CSS</p><p>初始化生成<code>tailwind.config.js</code>和<code>postcss.config.js</code>文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: npx tailwindcss init <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成最小化的<code>tailwind.config.js</code>和配置好<code>tailwindcss</code>和<code>​autoprefixer</code>的<code>postcss.config.js</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// tailwind.config.js</span>
<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;tailwindcss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>&#39;<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对<code>tailwind.config.js</code>文件进行配置，如<code>content</code>属性是配置哪些文件需要用 Tailwind。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// tailwind.config.js</span>
<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;tailwindcss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./src/**/*.{vue,js,ts,jsx,tsx}&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>两种引入项目的方式:</p><ul><li>通用配置: 在 CSS 中引入 Tailwind。创建 <code>​./src/index.css</code>​ 文件 并使用 <code>​@tailwind</code>​ 指令来包含 Tailwind 的 <code>​base</code>​、 <code>​components</code> ​ 和 <code>​utilities</code> ​ 样式，来替换掉原来的文件内容。</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* ./src/index.css */</span>
<span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tailwind 会在构建的时候，将这些指令全部转换成基于自定义配置的样式文件。</p><blockquote><p>需要注意的是，应当确保 css 文件有被引用使用，否则可能会报错。</p></blockquote><ul><li>若是在如 vue+vite 等框架内使用，应为改为 vite.config.ts 中增加配置。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-vue&#39;</span>
<span class="token keyword">import</span> tailwindcss <span class="token keyword">from</span> <span class="token string">&#39;tailwindcss&#39;</span>
<span class="token keyword">import</span> autoprefixer <span class="token keyword">from</span> <span class="token string">&#39;autoprefixer&#39;</span>

<span class="token comment">// https://vitejs.dev/config/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  css<span class="token operator">:</span> <span class="token punctuation">{</span>
    postcss<span class="token operator">:</span> <span class="token punctuation">{</span>
      plugins<span class="token operator">:</span> <span class="token punctuation">[</span>tailwindcss<span class="token punctuation">,</span> autoprefixer<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并在 main.ts 中引入样式“<code>&#39;tailwindcss/tailwind.css&#39;</code>”:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;tailwindcss/tailwind.css&#39;</span>

<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="编辑器配置" tabindex="-1"><a class="header-anchor" href="#编辑器配置" aria-hidden="true">#</a> 编辑器配置</h2><p>为了更好的开发体验，还需为编辑器安装相应的插件。</p>`,4),_={href:"https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss",target:"_blank",rel:"noopener noreferrer"},q=e(`<h2 id="响应式设计" tabindex="-1"><a class="header-anchor" href="#响应式设计" aria-hidden="true">#</a> 响应式设计</h2><p>Tailwind 对响应式做了较好的兼容，如下是常用断点：</p><table><thead><tr><th style="text-align:left;">断点前缀</th><th style="text-align:left;">最小宽度</th><th style="text-align:left;">CSS</th></tr></thead><tbody><tr><td style="text-align:left;"><code>sm</code></td><td style="text-align:left;">640px</td><td style="text-align:left;"><code>@media (min-width: 640px) { ... }</code></td></tr><tr><td style="text-align:left;"><code>md</code></td><td style="text-align:left;">768px</td><td style="text-align:left;"><code>@media (min-width: 768px) { ... }</code></td></tr><tr><td style="text-align:left;"><code>lg</code></td><td style="text-align:left;">1024px</td><td style="text-align:left;"><code>@media (min-width: 1024px) { ... }</code></td></tr><tr><td style="text-align:left;"><code>xl</code></td><td style="text-align:left;">1280px</td><td style="text-align:left;"><code>@media (min-width: 1280px) { ... }</code></td></tr><tr><td style="text-align:left;"><code>2xl</code></td><td style="text-align:left;">1536px</td><td style="text-align:left;"><code>@media (min-width: 1536px) { ... }</code></td></tr></tbody></table><p>要添加一个仅在特定断点生效的功能类，只需要在该功能类前加上断点名称，后面跟 <code>:</code> 字符。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--宽度默认 16, 中等屏幕宽度为 32, a 大屏宽度为 48 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-16 md:w-32 lg:w-48<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="悬停、焦点和其他状态" tabindex="-1"><a class="header-anchor" href="#悬停、焦点和其他状态" aria-hidden="true">#</a> 悬停、焦点和其他状态</h2><p>对于处于 hover、focus 等状态的元素，也有同样的状态变体前缀。但并非所有的功能都默认开启（以减小包的体积大小）。</p><p>Hover 的状态变体前缀为 <code>hover:</code>：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-red-500 hover:bg-red-700<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hover 变体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下， 以下核心插件启用了该 ​hover ​ 变体：</p><ul><li>backgroundColor</li><li>backgroundOpacity​​</li><li>borderColor​</li><li>borderOpacity​</li><li>​boxShadow​</li><li>​gradientColorStops​</li><li>​opacity​</li><li>​rotate​</li><li>​scale​</li><li>​skew</li><li>textColor​</li><li>​textDecoration​</li><li>​textOpacity​</li><li>​translate​</li></ul><p>特殊的控件需要额外在 <code>tailwind.config.js</code> 文件中的 <code>variants</code> 中手动启用 <code>hover</code> 变体：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// tailwind.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">variants</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;hover&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其它前缀也是类似操作:</p><ul><li>Focus 的前缀为 <code>focus:</code></li><li>Active 的前缀为 <code>active:</code></li><li>Visited 的前缀为 <code>visited:</code></li><li>Disabled 的前缀为 <code>disabled:</code></li><li>...</li></ul><p>若是<strong>悬停父元素时，子元素需要做出响应</strong>，则应当给父元素添加 <code>group</code> 类，同时为族元素的功能添加 <code>group-hover:</code> 前缀。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>group border-indigo-500 hover:bg-white hover:shadow-lg hover:border-transparent<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-indigo-600 group-hover:text-gray-900<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>New Project<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-indigo-500 group-hover:text-gray-500<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    Create a new project from a variety of starting templates.
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，<code>focus</code> 同 <code>hover</code> 一样，给父元素添加 <code>group</code> 类，并为族元素的功能添加 <code>group-focus:</code> 前缀。</p><p>其它规则：</p><ul><li>选择<strong>第一个元素</strong>：使用 <strong>first</strong> 类：<code>&lt;div class=&quot;first:bg-blue-500&quot;&gt;第一个元素&lt;/div&gt;</code></li><li>选择<strong>最后一个元素</strong>：使用 <strong>last</strong> 类：<code>&lt;div class=&quot;last:bg-red-500&quot;&gt;最后一个元素&lt;/div&gt;</code></li><li>选用<strong>奇数</strong>元素的前缀为 <code>odd:</code> ：<code>&lt;div class=&quot;odd:bg-green-500&quot;&gt;奇数元素&lt;/div&gt;</code></li><li>选用<strong>偶数</strong>元素的前缀为 <code>even:</code> ：<code>&lt;div class=&quot;even:bg-green-500&quot;&gt;偶数元素&lt;/div&gt;</code></li><li>选择第 <strong>n</strong> 个元素：使用 <code>nth-child(n)</code> 类，其中 <strong>n</strong> 是你想选择的元素的序号。例如，选择第三个元素：<code>&lt;div class=&quot;nth-child(3):bg-purple-500&quot;&gt;选择第三个元素&lt;/div&gt;</code></li></ul><h2 id="为自定义功能类生成变体" tabindex="-1"><a class="header-anchor" href="#为自定义功能类生成变体" aria-hidden="true">#</a> 为自定义功能类生成变体</h2><p>通过 <code>@variants</code> 指令包裹住自己的定义 CSS 类来生成状态变体：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* Input: */</span>
<span class="token atrule"><span class="token rule">@variants</span> group-hover<span class="token punctuation">,</span> hover<span class="token punctuation">,</span> focus</span> <span class="token punctuation">{</span>
  <span class="token selector">.customName</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Output: */</span>
<span class="token selector">.customName</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.group:hover .group-hover\\:customName</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.hover\\:customName:hover</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.focus\\:customName:focus</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function j(S,C){const a=v("ExternalLinkIcon");return m(),g("div",null,[b,h,n("div",y,[f,n("p",null,[s("本系列统一采用 PostCSS 的形式，其它的形式可以参考"),n("a",w,[s("官网"),t(a)]),s("。")])]),x,n("p",null,[s("VScode 中是 "),n("a",_,[s("Tailwind CSS IntelliSense"),t(a)]),s("。")]),q])}const T=p(k,[["render",j],["__file","TailwindCSS01.html.vue"]]);export{T as default};
