const e=JSON.parse('{"key":"v-060fb8b1","path":"/JavaScript/Node/Node13.html","title":"大文件上传","lang":"zh-CN","frontmatter":{"title":"大文件上传","icon":"nodeJS","date":"2025-06-07T00:00:00.000Z","category":["javascript"],"tag":["node"]},"headers":[{"level":2,"title":"功能点总结","slug":"功能点总结","link":"#功能点总结","children":[]},{"level":2,"title":"基础知识点总结","slug":"基础知识点总结","link":"#基础知识点总结","children":[]}],"git":{"createdTime":1749224177000,"updatedTime":1749224177000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.92,"words":877},"filePathRelative":"JavaScript/Node/Node13.md","localizedDate":"2025年6月7日","excerpt":"<p>此前简单梳理过一次大文件的分片上传，这里又重新实现一遍。功能点加上秒传、断点续传、web worker 等。</p>\\n<p>前端简单用 vite + react19 + antd + axios 实现。后端用 express 实现。<a href=\\"https://github.com/rayadaschn/fileUploader\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">代码仓库</a></p>\\n<h2> 功能点总结</h2>\\n<ol>\\n<li>\\n<p>前端分片上传与断点续传</p>\\n<ul>\\n<li>文件切片：用 <code>File.prototype.slice</code> 将大文件分割为多个小块（chunk），每块独立上传。</li>\\n<li>断点续传：上传前先向后端查询已上传分片，前端只上传未完成的分片，实现断点续传和秒传。</li>\\n<li>上传进度管理：每个分片上传时通过 onUploadProgress 事件实时更新进度条，整体进度通过所有分片进度的平均值计算。</li>\\n<li>取消与暂停：利用 <code>axios</code> 的 <code>CancelToken</code> 实现上传任务的取消和暂停，支持恢复上传。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Web Worker 计算文件 hash\\n`- Web Worker 基础：用 Worker 在浏览器主线程外异步计算大文件 hash，避免 UI 卡顿。</p>\\n<ul>\\n<li>主线程与 Worker 通信：通过 <code>postMessage</code> 和 <code>onmessage</code> 实现主线程与 Worker 的数据交互。</li>\\n<li>SubtleCrypto API：在 Worker 内用 <code>crypto.subtle.digest</code> 计算文件内容的 SHA-256 hash，生成唯一文件名。</li>\\n</ul>\\n</li>\\n<li>\\n<p>React 组件与自定义 Hook</p>\\n<ul>\\n<li>自定义 Hook：用 <code>useDrag</code> 实现拖拽上传、点击上传、文件校验、预览等功能，提升组件复用性。</li>\\n<li><code>useRef</code>/<code>useState</code>/<code>useEffect</code>：管理 DOM 引用、状态和副作用，确保事件监听和资源释放的正确性。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Node.js 服务端分片处理</p>\\n<ul>\\n<li>Express 路由设计：实现 <code>/api/upload</code>（分片上传）、<code>/api/check</code>（查询已上传分片）、<code>/api/merge</code>（合并分片）等接口。</li>\\n<li>流式处理：用 <code>fs.createReadStream</code> 和 <code>fs.createWriteStream</code> 实现分片的高效写入和合并，避免大文件占用过多内存。</li>\\n<li>慢速 Transform 流：自定义 <code>SlowTransform</code>，通过 <code>setTimeout</code> 控制写入速度，方便前端调试进度条和断点续传。</li>\\n<li>分片合并与 hash 校验：合并所有分片后，流式计算合并文件的 hash，与前端生成的 hash 比较，确保文件完整性。</li>\\n</ul>\\n</li>\\n<li>\\n<p>性能优化</p>\\n<ul>\\n<li>并行上传与合并：前端并行上传多个分片，后端可并行或串行合并，提升效率。</li>\\n<li>内存优化：所有大文件操作均采用流式处理，避免内存溢出。</li>\\n<li>兼容性与用户体验：支持拖拽、点击、进度反馈、错误提示、断点续传等，提升易用性。</li>\\n</ul>\\n</li>\\n</ol>"}');export{e as data};
