import{_ as n,X as s,Y as a,$ as e}from"./framework-5dd7fabc.js";const t={},p=e,o=s,c=a,i=p(`<p>Koa 是通过将中间件组织成一个“洋葱模型”（Onion Model），并使用 <strong><code>async/await</code></strong> 或 <strong><code>Promise</code></strong> 链式执行机制实现异步中间件的。</p><h3 id="核心机制" tabindex="-1"><a class="header-anchor" href="#核心机制" aria-hidden="true">#</a> <strong>核心机制</strong></h3><ol><li><p><strong>中间件存储：</strong></p><ul><li>中间件被存储为一个数组（<code>middlewares</code>）。</li><li>每个中间件是一个函数，接受 <code>ctx</code>（上下文）和 <code>next</code>（下一个中间件的执行函数）作为参数。</li></ul></li><li><p><strong>组合中间件（compose）：</strong></p><ul><li>Koa 使用一个函数（类似于 <code>compose</code>）将多个中间件组合成一个函数，并按顺序执行。</li><li>每个中间件调用 <code>await next()</code> 来手动控制下一个中间件的执行时机。</li></ul></li><li><p><strong>递归调用：</strong></p><ul><li>当一个中间件调用 <code>await next()</code> 时，它会等待下一个中间件执行完成后再继续执行当前中间件后面的逻辑。</li></ul></li></ol><h3 id="简化实现-compose-函数" tabindex="-1"><a class="header-anchor" href="#简化实现-compose-函数" aria-hidden="true">#</a> <strong>简化实现：<code>compose</code> 函数</strong></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter">middlewares</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">// 记录当前中间件的执行索引</span>

    <span class="token comment">// 定义一个调度函数</span>
    <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;next() called multiple times&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      index <span class="token operator">=</span> i
      <span class="token keyword">const</span> fn <span class="token operator">=</span> middlewares<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> next <span class="token comment">// 获取当前中间件或默认的 next</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 如果没有更多中间件，直接 resolve</span>

      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行中间件并递归调用下一个</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// 捕获同步异常</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 从第一个中间件开始</span>
    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="koa-的执行流程" tabindex="-1"><a class="header-anchor" href="#koa-的执行流程" aria-hidden="true">#</a> <strong>Koa 的执行流程</strong></h3><p>假设我们有以下中间件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Middleware 1: Before next&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Middleware 1: After next&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Middleware 2: Before next&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Middleware 2: After next&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Middleware 3: Final&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="执行顺序" tabindex="-1"><a class="header-anchor" href="#执行顺序" aria-hidden="true">#</a> <strong>执行顺序：</strong></h4><ol><li>中间件按顺序执行： <ul><li><code>Middleware 1: Before next</code></li><li><code>Middleware 2: Before next</code></li><li><code>Middleware 3: Final</code></li></ul></li><li>中间件回溯执行： <ul><li><code>Middleware 2: After next</code></li><li><code>Middleware 1: After next</code></li></ul></li></ol><h4 id="输出" tabindex="-1"><a class="header-anchor" href="#输出" aria-hidden="true">#</a> <strong>输出：</strong></h4><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>Middleware 1: Before next
Middleware 2: Before next
Middleware 3: Final
Middleware 2: After next
Middleware 1: After next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="流程图" tabindex="-1"><a class="header-anchor" href="#流程图" aria-hidden="true">#</a> <strong>流程图：</strong></h4><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>  Middleware 1 -&gt; Middleware 2 -&gt; Middleware 3
    ↑              ↑
    └──────────────┘
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> <strong>总结</strong></h3><ol><li><strong>核心在于 <code>compose</code> 函数：</strong> 它通过递归调用 <code>dispatch(i)</code> 来实现洋葱模型的中间件机制。</li><li><strong>异步机制：</strong> 通过 <code>async/await</code> 或 <code>Promise</code> 确保中间件可以异步执行，同时保持调用顺序。</li><li><strong>中间件调用链：</strong> 每个中间件通过 <code>await next()</code> 显式控制下一个中间件的执行，并且可以在后续逻辑中回溯执行。</li></ol><p>这种机制保证了中间件能够以一致的方式处理异步任务，是 Koa 高度模块化和灵活的基础。</p>`,17),l=[i];function u(d,r){return o(),c("div",null,l)}const v=n(t,[["render",u],["__file","Node12.html.vue"]]);export{v as default};
