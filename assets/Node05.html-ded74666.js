import{_ as s,X as n,Y as e,$ as a}from"./framework-97fa2d96.js";const t={},l=a,o=n,d=e,c=l(`<h1 id="mysql-基础" tabindex="-1"><a class="header-anchor" href="#mysql-基础" aria-hidden="true">#</a> MySql 基础</h1><p>关系模型把数据看作是一个二维表格，任何数据都可以通过行号+列号来唯一确定，它的数据模型看起来就是一个 Excel 表：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> Excel 表形式</span>

┌─────┬─────┬─────┬─────┬─────┐
│ │ │ │ │ │
├─────┼─────┼─────┼─────┼─────┤
│ │ │ │ │ │
├─────┼─────┼─────┼─────┼─────┤
│ │ │ │ │ │
├─────┼─────┼─────┼─────┼─────┤
│ │ │ │ │ │
└─────┴─────┴─────┴─────┴─────┘
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><p>对于一个关系表，除了定义每一列的名称外，还需要定义每一列的数据类型。关系数据库支持的标准数据类型包括数值、字符串、时间等：</p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">INT</td><td style="text-align:left;">整型</td><td style="text-align:left;">4 字节整数类型，范围约+/-21 亿</td></tr><tr><td style="text-align:left;"><strong>BIGINT</strong></td><td style="text-align:left;">长整型</td><td style="text-align:left;">常用作主键，8 字节整数类型，范围约+/-922 亿亿</td></tr><tr><td style="text-align:left;">REAL</td><td style="text-align:left;">浮点型</td><td style="text-align:left;">4 字节浮点数，范围约+/-1038</td></tr><tr><td style="text-align:left;">DOUBLE</td><td style="text-align:left;">浮点型</td><td style="text-align:left;">8 字节浮点数，范围约+/-10308</td></tr><tr><td style="text-align:left;">DECIMAL(M,N)</td><td style="text-align:left;">高精度小数</td><td style="text-align:left;">由用户指定精度的小数，例如，DECIMAL(20,10)表示一共 20 位，其中小数 10 位，通常用于财务计算</td></tr><tr><td style="text-align:left;">CHAR(N)</td><td style="text-align:left;">定长字符串</td><td style="text-align:left;">存储指定长度的字符串，例如，CHAR(100)总是存储 100 个字符的字符串</td></tr><tr><td style="text-align:left;"><strong>VARCHAR(N)</strong></td><td style="text-align:left;">变长字符串</td><td style="text-align:left;">存储可变长度的字符串，例如，VARCHAR(100)可以存储 0~100 个字符的字符串</td></tr><tr><td style="text-align:left;"><strong>BOOLEAN</strong></td><td style="text-align:left;">布尔类型</td><td style="text-align:left;">存储 True 或者 False</td></tr><tr><td style="text-align:left;">DATE</td><td style="text-align:left;">日期类型</td><td style="text-align:left;">存储日期，例如，2018-06-22</td></tr><tr><td style="text-align:left;">TIME</td><td style="text-align:left;">时间类型</td><td style="text-align:left;">存储时间，例如，12:20:59</td></tr><tr><td style="text-align:left;">DATETIME</td><td style="text-align:left;">日期和时间类型</td><td style="text-align:left;">存储日期+时间，例如，2018-06-22 12:20:59</td></tr></tbody></table><p>上面的表中列举了最常用的数据类型。很多数据类型还有别名，例如，<code>REAL</code>又可以写成<code>FLOAT(24)</code>。还有一些不常用的数据类型，例如，<code>TINYINT</code>（范围在 0~255）。各数据库厂商还会支持特定的数据类型，例如<code>JSON</code>。</p><p>选择数据类型的时候，要根据业务规则选择合适的类型。通常来说，<code>BIGINT</code>能满足整数存储的需求，<code>VARCHAR(N)</code>能满足字符串存储的需求，这两种类型是使用最广泛的。</p><h2 id="什么是-sql" tabindex="-1"><a class="header-anchor" href="#什么是-sql" aria-hidden="true">#</a> 什么是 SQL?</h2><p><strong>SQL</strong>是<strong>Structured Query Language</strong>，称之为结构化查询语言，简称 SQL。</p><p>使用 SQL 编写出来的语句，就称之为 SQL 语句，SQL 语句可以用于对数据库进行操作。</p><blockquote><p>**SQL 语言关键字不区分大小写！！！**但是，针对不同的数据库，对于表名和列名，有的数据库区分大小写，有的数据库不区分大小写。同一个数据库，有的在 Linux 上区分大小写，有的在 Windows 上不区分大小写。</p><p>因此，最好统一标准：</p><ul><li>SQL 关键字（如 CREATE、TABLE、SHOW 等等）总是大写，以示突出，表名和列名均使用小写。</li><li>一条语句结束后，需要以 <strong><code>;</code></strong> 结尾;</li><li>如果遇到关键字作为表明或者字段名称，可以使用 <strong><code>\`\`</code></strong> 包裹。</li></ul></blockquote><h2 id="主键" tabindex="-1"><a class="header-anchor" href="#主键" aria-hidden="true">#</a> 主键</h2><p>对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复不是指两条记录不完全相同，而是指能够通过某个字段唯一区分出不同的记录，这个字段被称为<em>主键</em>。</p><p><strong>选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。</strong></p><p>作为主键最好是完全业务无关的字段，我们一般把这个字段命名为<code>id</code>。常见的可作为<code>id</code>字段的类型有：</p><ol><li>自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；</li><li>全局唯一 GUID 类型：使用一种全局唯一的字符串作为主键，类似<code>8f55d96b-8acc-4636-8cb8-76bf8abc2f57</code>。GUID 算法通过网卡 MAC 地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了 GUID 算法，可以自己预算出主键。</li></ol><p>对于大部分应用来说，通常自增类型的主键就能满足需求。我们在<code>students</code>表中定义的主键也是<code>BIGINT NOT NULL AUTO_INCREMENT</code>类型。</p><h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h2><p><strong>在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。</strong></p><p>索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。</p><h3 id="创建索引" tabindex="-1"><a class="header-anchor" href="#创建索引" aria-hidden="true">#</a> 创建索引</h3><p>对于<code>students</code>表：</p><table><thead><tr><th style="text-align:left;">id</th><th style="text-align:left;">class_id</th><th style="text-align:left;">name</th><th style="text-align:left;">gender</th><th style="text-align:left;">score</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">1</td><td style="text-align:left;">小明</td><td style="text-align:left;">M</td><td style="text-align:left;">90</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">1</td><td style="text-align:left;">小红</td><td style="text-align:left;">F</td><td style="text-align:left;">95</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">1</td><td style="text-align:left;">小军</td><td style="text-align:left;">M</td><td style="text-align:left;">88</td></tr></tbody></table><p>如果要经常根据<code>score</code>列进行查询，就可以对<code>score</code>列创建索引：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> students
<span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> idx_score <span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>ADD INDEX idx_score (score)</code>就创建了一个名称为<code>idx_score</code>，使用列<code>score</code>的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> students
<span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> idx_name_score <span class="token punctuation">(</span>name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如<code>gender</code>列，大约一半的记录值是<code>M</code>，另一半是<code>F</code>，因此，对该列创建索引就没有意义。</p><p>可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。</p><p><strong>对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。</strong></p><h2 id="crud-增删改查" tabindex="-1"><a class="header-anchor" href="#crud-增删改查" aria-hidden="true">#</a> CRUD 增删改查</h2><p>CRUD：Create、Retrieve、Update、Delete。</p><h3 id="查-select" tabindex="-1"><a class="header-anchor" href="#查-select" aria-hidden="true">#</a> 查 SELECT</h3><ol><li>基本查询: <code>SELECT * FROM &lt;表名&gt;</code></li></ol><p>使用 SELECT 查询的基本语句<code>SELECT * FROM &lt;表名&gt;</code>可以查询一个表的所有行和所有列的数据。</p><p>SELECT 查询的结果是一个二维表。</p><ol start="2"><li>条件查询: <code>SELECT * FROM &lt;表名&gt; WHERE &lt;条件表达式&gt;</code></li></ol><ul><li><p><code>AND</code>: 条件表达式可以用<code>&lt;条件1&gt; AND &lt;条件2&gt;</code>表达满足条件 1 并且满足条件 2。</p></li><li><p><code>OR</code>: 第二种条件是<code>&lt;条件1&gt; OR &lt;条件2&gt;</code>，表示满足条件 1 或者满足条件 2。</p></li><li><p><code>NOT</code>: 第三种条件是<code>NOT &lt;条件&gt;</code>，表示“不符合该条件”的记录。</p></li><li><p>如果不加括号，条件运算按照<code>NOT</code>、<code>AND</code>、<code>OR</code>的优先级进行，即<code>NOT</code>优先级最高，其次是<code>AND</code>，最后是<code>OR</code>。加上括号可以改变优先级。</p></li></ul><h3 id="常用的条件表达式" tabindex="-1"><a class="header-anchor" href="#常用的条件表达式" aria-hidden="true">#</a> 常用的条件表达式</h3><table><thead><tr><th style="text-align:left;">条件</th><th style="text-align:left;">表达式举例 1</th><th style="text-align:left;">表达式举例 2</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">使用=判断相等</td><td style="text-align:left;">score = 80</td><td style="text-align:left;">name = &#39;abc&#39;</td><td style="text-align:left;">字符串需要用单引号括起来</td></tr><tr><td style="text-align:left;">使用&gt;判断大于</td><td style="text-align:left;">score &gt; 80</td><td style="text-align:left;">name &gt; &#39;abc&#39;</td><td style="text-align:left;">字符串比较根据 ASCII 码，中文字符比较根据数据库设置</td></tr><tr><td style="text-align:left;">使用&gt;=判断大于或相等</td><td style="text-align:left;">score &gt;= 80</td><td style="text-align:left;">name &gt;= &#39;abc&#39;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">使用&lt;判断小于</td><td style="text-align:left;">score &lt; 80</td><td style="text-align:left;">name &lt;= &#39;abc&#39;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">使用&lt;=判断小于或相等</td><td style="text-align:left;">score &lt;= 80</td><td style="text-align:left;">name &lt;= &#39;abc&#39;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">使用&lt;&gt;判断不相等</td><td style="text-align:left;">score &lt;&gt; 80</td><td style="text-align:left;">name &lt;&gt; &#39;abc&#39;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">使用 LIKE 判断相似</td><td style="text-align:left;">name LIKE &#39;ab%&#39;</td><td style="text-align:left;">name LIKE &#39;%bc%&#39;</td><td style="text-align:left;">%表示任意字符，例如&#39;ab%&#39;将匹配&#39;ab&#39;，&#39;abc&#39;，&#39;abcd&#39;</td></tr></tbody></table><ol start="3"><li><p>投影查询: <code>SELECT 列1 别名1, 列2 别名2, 列3 别名3 FROM ...</code></p><p>使用<code>SELECT *</code>表示查询表的所有列，使用<code>SELECT 列1, 列2, 列3</code>则可以仅返回指定列，这种操作称为投影。</p><p><code>SELECT</code>语句可以对结果集的列进行重命名。</p></li><li><p>排序:</p><ul><li><p>升序 <code>ORDER BY</code>，默认升序，效果等同后面加上 <code>ASC</code></p><p>score 按照升序排序: <code>SELECT id, name, gender, score FROM students ORDER BY score;</code></p></li><li><p>倒序（Descending） 末尾加上 <code>DESC</code></p><p>按 score 从高到低: <code>SELECT id, name, gender, score FROM students ORDER BY score DESC;</code></p></li><li><p>若还有第二键名则继续在 <code>ORDER BY</code> 后面添加</p></li></ul></li><li><p>分页查询: <code>LIMIT &lt;N-M&gt; OFFSET &lt;M&gt;</code></p><p>分页实际上就是从结果集中“截取”出第 M~N 条记录。这个查询可以通过<code>LIMIT &lt;N-M&gt; OFFSET &lt;M&gt;</code>子句实现。</p><p>分页查询的关键在于，首先要确定每页需要显示的结果数量<code>pageSize</code>，然后根据当前页的索引<code>pageIndex</code>（从 1 开始），确定<code>LIMIT</code>和<code>OFFSET</code>应该设定的值：</p><ul><li><code>LIMIT</code>总是设定为<code>pageSize</code>；</li><li><code>OFFSET</code>计算公式为<code>pageSize * (pageIndex - 1)</code>。</li></ul></li><li><p>聚合查询: 对于统计总数、平均数这类计算，SQL 提供了专门的聚合函数，使用聚合函数进行查询，就是聚合查询，它可以快速获得结果。</p><ul><li><p><code>COUNT(*)</code>表示查询所有列的行数，要注意聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是<code>COUNT(*)</code>。</p><p>使用聚合查询时，我们应该给列名设置一个别名，便于处理结果：<code>SELECT COUNT(*) as num FROM students;</code></p></li></ul><p>除了<code>COUNT()</code>函数外，SQL 还提供了如下聚合函数：</p><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">SUM</td><td style="text-align:left;">计算某一列的合计值，该列必须为数值类型</td></tr><tr><td style="text-align:left;">AVG</td><td style="text-align:left;">计算某一列的平均值，该列必须为数值类型</td></tr><tr><td style="text-align:left;">MAX</td><td style="text-align:left;">计算某一列的最大值</td></tr><tr><td style="text-align:left;">MIN</td><td style="text-align:left;">计算某一列的最小值</td></tr></tbody></table><p>注意，<code>MAX()</code>和<code>MIN()</code>函数并不限于数值类型。如果是字符类型，<code>MAX()</code>和<code>MIN()</code>会返回排序最后和排序最前的字符。</p></li><li><p>多表查询: <code>SELECT * FROM &lt;表1&gt; &lt;表2&gt;</code>。查询的结果是一个二维表。</p><p>为避免俩张表有相同的列名，应当适当的利用投影查询的设置列的别名给来自俩个表的不同列添加别名。</p><p>多表查询时，要使用<code>表名.列名</code>这样的方式来引用列和设置别名，这样就避免了结果集的列名重复问题。但是，用<code>表名.列名</code>这种方式列举两个表的所有列实在是很麻烦，所以 SQL 还允许给表设置一个别名，让我们在投影查询中引用起来稍微简洁一点：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    s<span class="token punctuation">.</span>id sid<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>score<span class="token punctuation">,</span>
    c<span class="token punctuation">.</span>id cid<span class="token punctuation">,</span>
    c<span class="token punctuation">.</span>name cname
<span class="token keyword">FROM</span> students s<span class="token punctuation">,</span> classes c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>连接查询: <code>INNER JOIN</code>。连接查询是另一种类型的多表查询。连接查询对多个表进行 JOIN 运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。</p><p>NNER JOIN 查询的写法是：</p><ol><li>先确定主表，仍然使用<code>FROM &lt;表1&gt;</code>的语法；</li><li>再确定需要连接的表，使用<code>INNER JOIN &lt;表2&gt;</code>的语法；</li><li>然后确定连接条件，使用<code>ON &lt;条件...&gt;</code>，这里的条件是<code>s.class_id = c.id</code>，表示<code>students</code>表的<code>class_id</code>列与<code>classes</code>表的<code>id</code>列相同的行需要连接；</li><li>可选：加上<code>WHERE</code>子句、<code>ORDER BY</code>等子句。</li></ol><p>使用别名不是必须的，但可以更好地简化查询语句。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>class_id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name class_name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> s<span class="token punctuation">.</span>score
<span class="token keyword">FROM</span> students s
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> classes c
<span class="token keyword">ON</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="修改数据" tabindex="-1"><a class="header-anchor" href="#修改数据" aria-hidden="true">#</a> 修改数据</h3><ul><li><p><code>INSERT</code>：插入新记录；</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，主键如<code>id</code>字段是一个自增主键，它的值可以由数据库自己推算出来。此外，如果一个字段有默认值，那么在<code>INSERT</code>语句中也可以不出现。</p></li><li><p><code>REPLACE</code>: 插入或<strong>替换</strong>记录;</p><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就先删除原记录，再插入新记录。此时，可以使用<code>REPLACE</code>语句，这样就不必先查询，再决定是否先删除再插入：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">REPLACE</span> <span class="token keyword">INTO</span> students <span class="token punctuation">(</span>id<span class="token punctuation">,</span> class_id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>INSERT INTO</code>: 插入或更新;</p><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就更新该记录，此时，可以使用<code>INSERT INTO ... ON DUPLICATE KEY UPDATE ...</code>语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> students <span class="token punctuation">(</span>id<span class="token punctuation">,</span> class_id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DUPLICATE</span> <span class="token keyword">KEY</span> <span class="token keyword">UPDATE</span> name<span class="token operator">=</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> gender<span class="token operator">=</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>INSERT IGNORE INTO</code>: 插入或忽略;</p><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就啥事也不干直接忽略，此时，可以使用<code>INSERT IGNORE INTO ...</code>语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">IGNORE</span> <span class="token keyword">INTO</span> students <span class="token punctuation">(</span>id<span class="token punctuation">,</span> class_id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>UPDATE</code>：更新已有记录；</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">SET</span> 字段<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>UPDATE</code>语句的<code>WHERE</code>条件和<code>SELECT</code>语句的<code>WHERE</code>条件其实是一样的，因此完全可以一次更新多条记录。</p></li><li><p><code>DELETE</code>：删除已有记录。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意<code>DELETE</code>语句的<code>WHERE</code>条件也是用来筛选需要删除的行，因此和<code>UPDATE</code>类似，<code>DELETE</code>语句也可以一次删除多条记录：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> id<span class="token operator">&gt;=</span><span class="token number">5</span> <span class="token operator">AND</span> id<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询并观察结果:</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要特别小心的是，和<code>UPDATE</code>类似，不带<code>WHERE</code>条件的<code>DELETE</code>语句会删除整个表的数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> students<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时，整个表的所有记录都会被删除。所以，在执行<code>DELETE</code>语句时也要非常小心，最好先用<code>SELECT</code>语句来测试<code>WHERE</code>条件是否筛选出了期望的记录集，然后再用<code>DELETE</code>删除。</p></li></ul><h2 id="数据库管理" tabindex="-1"><a class="header-anchor" href="#数据库管理" aria-hidden="true">#</a> 数据库管理</h2><p>查看所有数据库:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
<span class="token operator">|</span> <span class="token keyword">Database</span>           <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
<span class="token operator">|</span> information_schema <span class="token operator">|</span>
<span class="token operator">|</span> mysql              <span class="token operator">|</span>
<span class="token operator">|</span> performance_schema <span class="token operator">|</span>
<span class="token operator">|</span> shici              <span class="token operator">|</span>
<span class="token operator">|</span> sys                <span class="token operator">|</span>
<span class="token operator">|</span> test               <span class="token operator">|</span>
<span class="token operator">|</span> school             <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>information_schema</code>、<code>mysql</code>、<code>performance_schema</code>和<code>sys</code>是系统库，不要去改动它们。其他的是用户创建的数据库。</p><p>要创建一个新数据库，使用命令：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> test<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>要删除一个数据库，使用命令：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> test<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：删除一个数据库将导致该数据库的所有表全部被删除。</p><p>对一个数据库进行操作时，要首先将其切换为当前数据库：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">USE</span> test<span class="token punctuation">;</span>
<span class="token keyword">Database</span> changed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改表就比较复杂。如果要给<code>students</code>表新增一列<code>birth</code>，使用：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> students <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> birth <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要修改<code>birth</code>列，例如把列名改为<code>birthday</code>，类型改为<code>VARCHAR(20)</code>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> students CHANGE <span class="token keyword">COLUMN</span> birth birthday <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要删除列，使用：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> students <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> birthday<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="退出" tabindex="-1"><a class="header-anchor" href="#退出" aria-hidden="true">#</a> 退出</h3><p><code>EXIT</code> 退出 Mysql。</p>`,63),p=[c];function i(r,u){return o(),d("div",null,p)}const g=s(t,[["render",i],["__file","Node05.html.vue"]]);export{g as default};
