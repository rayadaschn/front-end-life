import{_ as e,V as n,W as s,$ as c}from"./framework-2060dede.js";const a={},o=c(`<h1 id="css-基本常识" tabindex="-1"><a class="header-anchor" href="#css-基本常识" aria-hidden="true">#</a> CSS 基本常识</h1><blockquote><p>三读《CSS 世界》，记录一些基本常识笔记，以便加固理解。</p></blockquote><h2 id="基础内容" tabindex="-1"><a class="header-anchor" href="#基础内容" aria-hidden="true">#</a> 基础内容</h2><ul><li><p>长度单位</p><ul><li>相对字体长度单位：<code>em</code> 、<code>rem</code>、<code>ch</code>（字符 0 的宽度）；</li><li>现对视区长度单位： <code>vh</code>（视高）、<code>vw</code>（视宽）。</li></ul></li><li><p>选择器</p><ul><li>类 选择器：“<code>.</code>” 开头；</li><li>ID 选择器：“<code>#</code>” 开头；</li><li>属性选择器： 指含有“<code>[]</code>”选择器，如 <code>[title]{}</code>；</li><li>伪类选择器： 指前面有一个英文冒号（<code>:</code>）</li><li>伪元素选择器： 指前面有一个英文冒号（<code>::</code>），如： <code>::before</code>、<code>::after</code>。</li></ul></li><li><p>关系选择器</p><ul><li>后代选择器： 空格连接；</li><li>相邻后代选择器：<code>&gt;</code> 连接；</li><li>兄弟选择器：<code>~</code> 连接；</li><li>相邻兄弟选择器：+连接。</li></ul></li><li><p>块级元素</p><p><code>display</code> 为 <code>block</code>、<code>table</code>和如 <code>&lt;li&gt;</code>元素的 <code>list-item</code> 。</p><p>代表: <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;table&gt;</code> 等</p><p>块级元素具有换行特性，可以配合 <code>clear</code> 属性清除浮动带来的影响。</p><ul><li><code>list-item</code>是标记盒子，专门用于存放圆点和数字这些项目符号。</li><li>如行内块 <code>display：inline-block</code> ，实际上是由俩个盒子共同组成，一个内部块级的“容器盒子”和一个外部的内联级的外在盒子共同组成。</li></ul></li><li><p>内联元素</p><p><code>display</code> 为<code>inline</code>、 <code>inline-bloc</code> 和 <code>inline-table</code>。</p><p>如： <code>&lt;span&gt;</code>、 <code>&lt;button&gt;</code> 、 <code>&lt;img&gt;</code> 、<code>&lt;em&gt;</code></p><p>需要注意的是，内联盒子模型中，存在一个幽灵空白节点，在 <code>line-height</code> 和 <code>vertical-align</code> 影响巨大。</p></li></ul><h2 id="width-宽度特性" tabindex="-1"><a class="header-anchor" href="#width-宽度特性" aria-hidden="true">#</a> width 宽度特性</h2><ul><li><p><code>width:auto</code> 特性</p><ul><li>充分利用可用空间</li><li>收缩与包裹</li><li>收缩到最小</li><li>超出容器限制</li></ul><p><code>width</code> 宽度是加在 <code>content box</code>内容盒子上的。</p><p>包裹性实用案例:</p><p>页面某个模块文字内容是动态的，希望文字较少时居中显示，文字超过一行时局左显示：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 方案一 */</span>
<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.content</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 方案二 css3 fit-content */</span>
<span class="token selector">.content</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> fit-content<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>fit-content</code> 相当于紧身裤，内容多宽，盒子就多宽。</p><p>优点: 保留了 <code>display</code> 的计算值，让尺寸有了确定的值。</p></blockquote></li><li><p><code>box-sizing: border-box</code></p><p><code>width</code> 的宽度最终是施加于 <code>content box</code> 内容盒子上。影响盒子的大小可以用 css3 中的 <code>box-sizing</code> 改变，或者用 “宽度分离” ，在外部增加一个设置宽度确定的父级元素。</p><p>一般而言，需要重置 <code>width</code> 宽度的为：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">input, textarea, img, video, object</span><span class="token punctuation">{</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="height-高度特性" tabindex="-1"><a class="header-anchor" href="#height-高度特性" aria-hidden="true">#</a> height 高度特性</h2><ul><li>百分比%</li></ul><p><code>width</code> 宽度就算父元素 <code>width:auto</code> ，其百分比也是支持的。但是对于 <code>height</code> ，百分比高度必须其父级有一个可以生效的高度值！</p><blockquote><p>为何父元素高度不指定，子元素的百分比无法渲染计算？这是由浏览器渲染原理造成的。</p><p>浏览器首先，先下载文档内容，加载头部样式资源。然后，<strong>按照从上而下、自外而内的顺序渲染 DOM 内容。即，先渲染父级元素，后渲染子集元素。</strong></p><p>对于宽度而言，父级元素是先以子元素的占位宽度为加载宽度的，等到子元素渲染时，<code>width：100%</code>，便会继承该宽度，多元素宽度叠加超过了父元素宽度，则造成溢出。</p><p>对于高度而言，父级元素的高度没有显示指定（高度由内容决定），并且该元素不是绝对定位，则计算值为 <code>auto</code>，因此，子元素的高度用 百分比无法计算。</p></blockquote><p>解决办法:</p><ol><li>设定显示高度值；</li><li>使用绝对定位。绝对定位的宽高百分比是基于 <code>padding box</code>，非绝对定位则是基于 <code>content box</code>。</li></ol><p><code>min-width</code>、<code>min-height</code> 初始值是 <code>auto</code>；<code>min-width</code>、<code>min-width</code>初始值是 <code>none</code>。</p><p>它们的覆盖值超越 <code>!important</code> 。</p><p>应用实例，点击按钮，高度动画展开：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.element</span><span class="token punctuation">{</span>
  <span class="token property">max-height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> max-height .25s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.element.active</span> <span class="token punctuation">{</span>
  <span class="token property">max-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，此处的展开高度应设置的足够小。在回收缩放的时候，使得延迟难以察觉。</p></blockquote><h2 id="替换元素-和-非替换元素" tabindex="-1"><a class="header-anchor" href="#替换元素-和-非替换元素" aria-hidden="true">#</a> 替换元素 和 非替换元素</h2><p>替换元素的定义是通过修改某个属性值呈现的内容就可以被替换的元素。如： <code>&lt;img&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;iframe&gt;</code>和表单元素<code>&lt;textarea&gt;</code>和<code>&lt;input&gt;</code>都是替换元素。</p><p>替换元素的特性：</p><ul><li>内容的外观不受页面上的 CSS 影响；</li><li>拥有自己的尺寸，可能为 0；</li><li>在很多 CSS 属性上拥有自己的一套表现规则：<code>vertical-align</code> 非替换元素为字符<code>x</code>的下边缘，而替换元素的基线为元素的下边缘。</li></ul>`,21),i=[o];function t(d,l){return n(),s("div",null,i)}const u=e(a,[["render",t],["__file","CSS基本常识.html.vue"]]);export{u as default};
