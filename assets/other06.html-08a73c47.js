import{_ as p,Z as c,a0 as o,F as l,a1 as i,X as u,Y as d,$ as r}from"./framework-97fa2d96.js";const k={},n=c,s=o,v=l,t=i,e=r,g=u,b=d,m=e(`<p>在访问字节的大语言模型豆包的时候，打开谷歌的开发者工具后发现直接弹出一个无限 Debugger 循环函数：</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202311292052407.png" alt="无限 Debugger" tabindex="0" loading="lazy"><figcaption>无限 Debugger</figcaption></figure><p>这种模式通常是为了防止用户调试页面，以起到安全策略。本文就这个技术是如何实现以及如何破解该安全策略展开一二。</p><h2 id="基本原理" tabindex="-1"><a class="header-anchor" href="#基本原理" aria-hidden="true">#</a> 基本原理</h2><p>通常前端页面为了防止用户调试，常用的方式是不断输出 <code>debugger</code> 来产生断点。页面之所以可以正常运行是由于 <code>debugger</code> 断点只有在控制台被打开时才会执行。</p><p>当页面被卡在 <code>debugger</code> 断点上时，用户没办法进行调试也就无法查询网页的请求了。</p><p>因此可以在网页代码中插入如下安全代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 基础禁止调试代码
 */</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">ban</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">debugger</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">ban</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应对策略" tabindex="-1"><a class="header-anchor" href="#应对策略" aria-hidden="true">#</a> 应对策略</h2><p>对于这种无限 debugger，实际上是可以解决的。在控制台上断点调试按钮的最右边有一个 <code>Deactivate breakpoints</code> 停用断点按钮，按下它便可关闭无线 debugger 了。</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202311292102838.png" alt="Deactivate breakpoints 按钮" tabindex="0" loading="lazy"><figcaption>Deactivate breakpoints 按钮</figcaption></figure><h2 id="在项目中加入该安全策略" tabindex="-1"><a class="header-anchor" href="#在项目中加入该安全策略" aria-hidden="true">#</a> 在项目中加入该安全策略</h2><p>为了让我们的 debugger 代码不是那么的明显（让用户看不出代码执行策略 o(╥﹏╥)o），可以对上述代码进行一定的改造。</p><h3 id="版本-1" tabindex="-1"><a class="header-anchor" href="#版本-1" aria-hidden="true">#</a> 版本 1</h3><blockquote><p>通过将 <code>debugger</code> 改写成 <code>Function(&quot;debugger&quot;)();</code> 的形式。</p></blockquote><p>利用 Function 构造函数生成一个 debugger 函数，而后再立即执行，来实现。</p><p><strong>原理：</strong></p><p><code>Function</code> 是 JavaScript 中的一个内置构造函数，用于创建新的函数对象。它的语法是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">[</span>arg1<span class="token punctuation">[</span><span class="token punctuation">,</span> arg2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span>argN<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span> functionBody<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>arg1, arg2, ...argN</code> 是函数的参数，可以有零个或多个。</li><li><code>functionBody</code> 是一个包含函数定义的字符串，即函数体。</li></ul><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a + b&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码通过 <code>Function</code> 构造函数创建了一个新的函数 <code>add</code>，它接受两个参数 <code>a</code> 和 <code>b</code>，并返回它们的和。</p><p><strong>注意事项：</strong></p><ol><li>使用 <code>Function</code> 构造函数创建的函数对象没有词法作用域，它们在全局作用域中创建。这意味着它们无法直接访问它们被创建时所在的作用域的变量。</li><li>创建函数的方式有很多种，通常使用函数声明或函数表达式就足够了。<code>Function</code> 构造函数通常用于动态生成函数代码，但在绝大多数情况下是不必要的。</li></ol><p><strong>最终代码：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** 加密前 */</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">ban</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">Function</span><span class="token punctuation">(</span><span class="token string">&#39;debugger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">ban</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token doc-comment comment">/** 加密后 */</span>
<span class="token function">eval</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> g<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    d <span class="token operator">=</span> String
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> String<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> a<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> e<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">||</span> a
      b <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> e<span class="token punctuation">[</span>f<span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span>
      <span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;w+&#39;</span>
      <span class="token punctuation">}</span>
      a <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> a<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
      b<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;\\b&#39;</span> <span class="token operator">+</span> <span class="token function">d</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> c
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
    <span class="token string">&#39;(()=&gt;{1 0(){2(()=&gt;{3(&quot;4&quot;)()},5)}6{0()}7(8){}})();&#39;</span><span class="token punctuation">,</span>
    <span class="token number">9</span><span class="token punctuation">,</span>
    <span class="token number">9</span><span class="token punctuation">,</span>
    <span class="token string">&#39;block function setInterval Function debugger 50 try catch err&#39;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="版本-2" tabindex="-1"><a class="header-anchor" href="#版本-2" aria-hidden="true">#</a> 版本 2</h3><p>为了让上述代码更加难懂，可以再度丑化。</p><blockquote><p>将 <code>Function(&#39;debugger&#39;).call()</code> 改成 <code>(function(){return false;})[&#39;constructor&#39;](&#39;debugger&#39;)[&#39;call&#39;]();</code></p></blockquote><p>即：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">[</span><span class="token string">&#39;constructor&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">&#39;debugger&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">[</span><span class="token string">&#39;call&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实现原理：</strong></p><p>在 JavaScript 中，函数是一种特殊的对象，也就是说，函数可以拥有属性。其中，一个属性就是 <code>constructor</code>，它指向创建该函数的构造函数，通常是 <code>Function</code>。</p><p>现在，让我们详细解释为什么在这个代码片段中使用 <code>(&#39;debugger&#39;)</code> 会创建一个包含 <code>debugger;</code> 语句的新匿名函数。</p><ol><li><p><code>(function(){return false;})</code>：这是一个匿名的自执行函数，它返回 <code>false</code>。这个函数是一个普通的 JavaScript 函数。</p></li><li><p><code>[&#39;constructor&#39;]</code>：通过使用数组访问语法，我们获取了上面函数对象的 <code>constructor</code> 属性。这个属性指向函数对象的构造函数，通常是 <code>Function</code>。</p></li><li><p><code>(&#39;debugger&#39;)</code>：现在，我们调用了 <code>Function</code> 构造函数，它的参数是字符串 <code>&#39;debugger&#39;</code>。在 JavaScript 中，<code>Function</code> 构造函数接受一系列字符串作为参数，并创建一个新的函数。在这个例子中，我们传递了字符串 <code>&#39;debugger&#39;</code>，这个字符串包含了一个 JavaScript 语句，即 <code>debugger;</code>。</p></li><li><p><code>[&#39;call&#39;]</code>：通过数组访问语法，我们获取了上一步创建的新函数的 <code>call</code> 方法。<code>call</code> 方法是 JavaScript 中函数对象的一个方法，它允许我们调用一个函数，并设置函数体内的 <code>this</code> 值。</p></li><li><p><code>()</code>：最终，我们通过调用 <code>call</code> 方法，执行了这个新创建的函数，并且由于它的函数体是 <code>debugger;</code>，所以 <code>debugger;</code> 语句被执行。</p></li></ol><p>好了，由此得到了一个不是很能一眼看懂的安全代码块，当然还可以在此基础上增加其它内容，如当窗口外部宽高和内部宽高的差值大于一定的值 ，可以将 body 里的内容换成指定内容，以此防止用户“偷窥”。</p><p><strong>最终代码：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      window<span class="token punctuation">.</span>outerHeight <span class="token operator">-</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">&gt;</span> <span class="token number">200</span> <span class="token operator">||</span>
      window<span class="token punctuation">.</span>outerWidth <span class="token operator">-</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">&gt;</span> <span class="token number">200</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;检测到非法调试,请关闭后刷新重试!&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">[</span><span class="token string">&#39;constructor&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">&#39;debugger&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">[</span><span class="token string">&#39;call&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其它方法" tabindex="-1"><a class="header-anchor" href="#其它方法" aria-hidden="true">#</a> 其它方法</h2>`,40),h={href:"https://github.com/fz6m/console-ban",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>使用方法非常简单：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> <span class="token function">install</span> console-ban
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而后在 <code>main.js</code> 中加入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> init <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;console-ban&#39;</span>

<span class="token function">init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h3><table><thead><tr><th style="text-align:center;">name</th><th style="text-align:center;">required</th><th style="text-align:center;">type</th><th style="text-align:center;">default</th><th style="text-align:left;">description</th></tr></thead><tbody><tr><td style="text-align:center;"><code>clear</code></td><td style="text-align:center;">no</td><td style="text-align:center;">boolean</td><td style="text-align:center;"><code>true</code></td><td style="text-align:left;">禁用 <code>console.clear</code> 函数</td></tr><tr><td style="text-align:center;"><code>debug</code></td><td style="text-align:center;">no</td><td style="text-align:center;">boolean</td><td style="text-align:center;"><code>true</code></td><td style="text-align:left;">是否开启定时 <code>debugger</code> 反爬虫审查</td></tr><tr><td style="text-align:center;"><code>debugTime</code></td><td style="text-align:center;">no</td><td style="text-align:center;">number</td><td style="text-align:center;"><code>3000</code></td><td style="text-align:left;">定时 <code>debugger</code> 时间间隔（毫秒）</td></tr><tr><td style="text-align:center;"><code>redirect</code></td><td style="text-align:center;">no</td><td style="text-align:center;">string</td><td style="text-align:center;"><code>-</code></td><td style="text-align:left;">开启控制台后重定向地址</td></tr><tr><td style="text-align:center;"><code>write</code></td><td style="text-align:center;">no</td><td style="text-align:center;">string | Element</td><td style="text-align:center;"><code>-</code></td><td style="text-align:left;">开启控制台后重写 <code>document.body</code> 内容，支持传入节点或字符串</td></tr><tr><td style="text-align:center;"><code>callback</code></td><td style="text-align:center;">no</td><td style="text-align:center;">Function</td><td style="text-align:center;"><code>-</code></td><td style="text-align:left;">开启控制台后的回调函数</td></tr><tr><td style="text-align:center;"><code>bfcache</code></td><td style="text-align:center;">no</td><td style="text-align:center;">boolean</td><td style="text-align:center;"><code>true</code></td><td style="text-align:left;">禁用 <code>bfcache</code> 功能</td></tr></tbody></table><p>注：<code>redirect</code>、<code>write</code>、<code>callback</code> 三种策略只能取其一，优先使用回调函数。</p><p>笔者则是在 <code>index.html</code> 中直接引入:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- ... --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/console-ban@5.0.0/dist/console-ban.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    ConsoleBan<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">debug</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// options 开启 debugger 模式</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>便可以达到豆包的效果。其它效果如重写 <code>body</code> 则可使用 <code>write</code> options 改写成自己想要的 body。</p>`,10),y={href:"https://github.com/fz6m/console-ban",target:"_blank",rel:"noopener noreferrer"},x=n("h2",{id:"参考文章",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考文章","aria-hidden":"true"},"#"),s(" 参考文章")],-1),w={href:"https://juejin.cn/post/7262175454714626108?searchId=20231129095552A38D1FFBA67A7DCC8404",target:"_blank",rel:"noopener noreferrer"};function _(j,F){const a=v("ExternalLinkIcon");return g(),b("div",null,[m,n("p",null,[s("有没有其它更直接的方法？答案是有的，"),n("a",h,[s("console-ban"),t(a)]),s("，实际上开头的豆包也是使用的这个库。")]),f,n("p",null,[s("总体来说 "),n("a",y,[s("console-ban"),t(a)]),s(" 还是很好用的。推荐 👍🏻")]),x,n("ul",null,[n("li",null,[n("a",w,[s("《禁止别人调试自己的前端页面代码》"),t(a)])])])])}const I=p(k,[["render",_],["__file","other06.html.vue"]]);export{I as default};
