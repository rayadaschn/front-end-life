const n=JSON.parse(`{"key":"v-f811599e","path":"/JavaScript/TS/ts02.html","title":"TS 查漏补缺","lang":"zh-CN","frontmatter":{"title":"TS 查漏补缺","icon":"javascript","date":"2024-06-03T00:00:00.000Z","category":["javascript"],"tag":["typescript"]},"headers":[{"level":2,"title":"泛型及约束","slug":"泛型及约束","link":"#泛型及约束","children":[]}],"git":{"createdTime":1717462976000,"updatedTime":1717919406000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":4}]},"readingTime":{"minutes":5,"words":1501},"filePathRelative":"JavaScript/TS/ts02.md","localizedDate":"2024年6月3日","excerpt":"<p>本节主要是对 typescript 的查漏补缺，在此之前看过俩三遍阮老师的《typescript 教程》，但还是有一些知识点没有掌握，因此重新温习一遍，并记录下来。</p>\\n<h2> 泛型及约束</h2>\\n<ol>\\n<li>\\n<p>泛型是存在默认值的，同 js 一样可以赋值默认值。</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ArrayList<span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span><span class=\\"token operator\\">...</span><span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>其中默认为对象最为常见，当然也有一种特殊情况就是泛型的 any 化。</p>\\n</li>\\n<li>\\n<p>断言的方法:\\n常用的是类型断言 <code>obj as object</code> 还有一种是类型转换断言 <code>&lt;object&gt;obj</code>，俩者效果是一样的。</p>\\n</li>\\n<li>\\n<p>泛型约束</p>\\n<p><code>T extends object</code> 是一个类型约束，表示类型 <code>T</code> 必须是一个对象类型（即不是原始类型如 <code>number</code>、<code>string</code>、<code>boolean</code> 等）。它常用于泛型类型参数的约束中，以确保传入的类型是一个对象类型。</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">logObjectProperties</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span> <span class=\\"token keyword\\">extends</span> object<span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> key <span class=\\"token keyword\\">in</span> obj<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasOwnProperty</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">\`</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>key<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">: </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>obj<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token template-punctuation string\\">\`</span></span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 使用示例</span>\\n<span class=\\"token function\\">logObjectProperties</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> name<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'Alice'</span><span class=\\"token punctuation\\">,</span> age<span class=\\"token operator\\">:</span> <span class=\\"token number\\">25</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 正确</span>\\n<span class=\\"token comment\\">// logObjectProperties(42); // 错误，42 不是一个对象</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p><code>T extends keyof U</code> 是另一个类型约束，表示类型 <code>T</code> 必须是类型 <code>U</code> 的键（key）之一。它常用于约束某个类型必须是另一个类型的键名，用于访问该类型的属性。</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">getProperty</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">K</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token keyword\\">keyof</span> <span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">K</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">[</span><span class=\\"token constant\\">K</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> obj<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 使用示例</span>\\n<span class=\\"token keyword\\">const</span> person <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> name<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'Alice'</span><span class=\\"token punctuation\\">,</span> age<span class=\\"token operator\\">:</span> <span class=\\"token number\\">25</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">const</span> name <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getProperty</span><span class=\\"token punctuation\\">(</span>person<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'name'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 正确，'name' 是 person 的键</span>\\n<span class=\\"token comment\\">// const invalid = getProperty(person, 'address'); // 错误，'address' 不是 person 的键</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>通常俩者结合，效果更佳：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ObjectImpl<span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span> <span class=\\"token keyword\\">extends</span> object<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">K</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token keyword\\">keyof</span> <span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span>\\n  object<span class=\\"token operator\\">!</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span>\\n  key<span class=\\"token operator\\">!</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">K</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">K</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>object <span class=\\"token operator\\">=</span> obj\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>key <span class=\\"token operator\\">=</span> key\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">getValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>object<span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>key<span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">setValue</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">[</span><span class=\\"token constant\\">K</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>object<span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>key<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> value\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">static</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">create</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span> <span class=\\"token keyword\\">extends</span> object<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">K</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token keyword\\">keyof</span> <span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>\\n    obj<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">,</span>\\n    key<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">K</span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> ObjectImpl<span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">K</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ObjectImpl</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>接口\\n接口除了 <code>interface</code> 定义外，也可以用 <code>implements</code> 继承方式去定义。如<code>implements List&lt;T&gt;</code> 表示 <code>ArrayList</code> 类实现了 <code>List</code> 接口。<code>List</code> 也是一个泛型接口，使用了相同的类型参数 <code>T</code>。实现接口意味着 <code>ArrayList</code> 类必须提供 <code>List</code> 接口中定义的所有方法和属性。</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token comment\\">// 定义一个泛型接口 List</span>\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">List<span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span>\\n  <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>index<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span>\\n  <span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 实现 List 接口的 ArrayList 类</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ArrayList<span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">List<span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">private</span> items<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n\\n  <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>items<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>index<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>items<span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>items<span class=\\"token punctuation\\">.</span>length\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 使用</span>\\n<span class=\\"token keyword\\">const</span> numberList<span class=\\"token operator\\">:</span> ArrayList<span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">number</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList<span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">number</span><span class=\\"token operator\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\nnumberList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\nnumberList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>numberList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 输出: 1</span>\\n<span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>numberList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 输出: 2</span>\\n\\n<span class=\\"token keyword\\">const</span> stringList<span class=\\"token operator\\">:</span> ArrayList<span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">string</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList<span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">string</span><span class=\\"token operator\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\nstringList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'hello'</span><span class=\\"token punctuation\\">)</span>\\nstringList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'world'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>stringList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 输出: \\"hello\\"</span>\\n<span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>stringList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 输出: 2</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>在这个例子中：</p>\\n<ul>\\n<li><code>List&lt;T&gt;</code> 是一个接口，定义了三个方法：<code>add(item: T): void、get(index: number): T</code> 和 <code>size(): number</code>。</li>\\n<li><code>ArrayList&lt;T&gt;</code> 类实现了 <code>List&lt;T&gt;</code> 接口，因此它必须提供这三个方法的具体实现。</li>\\n<li><code>ArrayList</code> 使用一个内部数组 <code>items</code> 来存储元素，并实现了 <code>add</code>、<code>get</code> 和 <code>size</code> 方法。</li>\\n</ul>\\n</li>\\n<li>\\n<p>泛型</p>\\n<p>在 ts 中，泛型是一种参数化的类型，它允许我们在定义函数、接口或类的时候，不预先指定具体的类型，而在使用时再指定类型。</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token comment\\">/**\\n * @description: 中文排序\\n * @param {Array} arr\\n * @return {*}\\n */</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">compareChinese</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">Array</span><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> arr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sort</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>a <span class=\\"token keyword\\">as</span> <span class=\\"token builtin\\">any</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">localeCompare</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'zh-CN'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">/**\\n * @description: 快速排序\\n * @param {Array} arr\\n * @return {*}\\n */</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">quickSort</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">Array</span><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> arr\\n\\n  <span class=\\"token keyword\\">const</span> left<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">Array</span><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token keyword\\">const</span> right<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">Array</span><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token keyword\\">const</span> mid <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">splice</span><span class=\\"token punctuation\\">(</span>Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">floor</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span>\\n\\n  arr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>item <span class=\\"token operator\\">&lt;</span> mid<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      left<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n      right<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">...</span><span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span>left<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> mid<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">...</span><span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span>right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">/**\\n * @description: 字符串排序\\n * @param {string} str\\n * @return {*}\\n */</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">strSort</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> str<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">split</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sort</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">/**\\n * @description: 判断数组中是否含有中文\\n * @param {Array} arr\\n * @param {boolean} isEvery\\n * @return {*}\\n */</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">isChinese</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">Array</span><span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">any</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">,</span> isEvery<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">boolean</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">boolean</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> arr<span class=\\"token punctuation\\">[</span>isEvery <span class=\\"token operator\\">?</span> <span class=\\"token string\\">'every'</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">'some'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">[\\\\u4e00-\\\\u9fa5]</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">/**\\n * @description: 中文+英文/数字/字符串排序\\n * @param {Array} arr\\n * @return {*}\\n */</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">sortAll</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>data<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">|</span> <span class=\\"token builtin\\">string</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>data <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\"><span class=\\"token builtin\\">Array</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">isChinese</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">compareChinese</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">const</span> resArr<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">string</span> <span class=\\"token operator\\">|</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> item <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'string'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">strSort</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token keyword\\">return</span> item\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">// 运行时只有一种类型, 编译时存在俩种类型</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span>resArr <span class=\\"token keyword\\">as</span> <span class=\\"token builtin\\">any</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">strSort</span><span class=\\"token punctuation\\">(</span>data <span class=\\"token keyword\\">as</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 泛型重载实现</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">sort</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">sort</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>data<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">sort</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">any</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">any</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> data <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'string'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">strSort</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>data <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\"><span class=\\"token builtin\\">Array</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">isChinese</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">compareChinese</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">const</span> resArr <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> item <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'string'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">strSort</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token keyword\\">return</span> item\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">// 运行时只有一种类型, 编译时存在俩种类型</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span>resArr <span class=\\"token keyword\\">as</span> <span class=\\"token builtin\\">any</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">const</span> resNumArr <span class=\\"token operator\\">=</span> <span class=\\"token function\\">sort</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">7</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">8</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">9</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'🚀 ~ resNumArr:'</span><span class=\\"token punctuation\\">,</span> resNumArr<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">const</span> resStrArr <span class=\\"token operator\\">=</span> <span class=\\"token function\\">sort</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'一'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'二'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'三'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'🚀 ~ resStrArr:'</span><span class=\\"token punctuation\\">,</span> resStrArr<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">const</span> resStr <span class=\\"token operator\\">=</span> <span class=\\"token function\\">sort</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'一二三四五六七八九十'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'🚀 ~ resStr:'</span><span class=\\"token punctuation\\">,</span> resStr<span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>推断 <code>infer</code> 的定义：<code>infer</code> 表示在 <code>extends</code> 条件语句中以占位符出现的用来修饰数据类型的关键字，被修饰的数据类型等到使用时才能被推断出来。</p>\\n<p>infer 占位符的关键字出现的位置：通常 infer 出现在以下三个位置上：</p>\\n<ol>\\n<li>extends 条件语句后的函数类型的参数类型位置上;</li>\\n<li>extends 条件语句后的函数类型的返回值类型位置上;</li>\\n<li>出现在类型的泛型具体化类型上。</li>\\n</ol>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Customer</span> <span class=\\"token punctuation\\">{</span>\\n  cusName<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span>\\n  buyMoney<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">cusFuncType</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>cus<span class=\\"token operator\\">:</span> Customer<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token builtin\\">string</span>\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">cusFuncTypeTwo</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>cus<span class=\\"token operator\\">:</span> Customer<span class=\\"token punctuation\\">,</span> str<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token builtin\\">string</span>\\n\\n<span class=\\"token comment\\">// 1. 定义: 如果 T 是一个函数类型，它会提取并返回该函数的参数类型；否则，它返回 T 本身。</span>\\n<span class=\\"token comment\\">// 2. \`T extends (params: infer P) =&gt; any\`：这是一个条件类型。它检查 T 是否符合 \`(params: infer P) =&gt; any\` 这个模式，即 T 是否是一个参数为 params（类型为 P），返回类型为 any 的函数类型。</span>\\n<span class=\\"token comment\\">// 3. \`infer P\` 表示推断函数参数的类型并将其赋值给类型变量 P</span>\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">inferType<span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span> <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">T</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token punctuation\\">(</span>params<span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">infer</span> <span class=\\"token constant\\">P</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token builtin\\">any</span> <span class=\\"token operator\\">?</span> <span class=\\"token constant\\">P</span> <span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span>\\n\\n<span class=\\"token comment\\">// 符合要求</span>\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">inferResultTypeTrue</span> <span class=\\"token operator\\">=</span> inferType<span class=\\"token operator\\">&lt;</span>cusFuncType<span class=\\"token operator\\">&gt;</span> <span class=\\"token comment\\">// 返回 Customer</span>\\n<span class=\\"token comment\\">// 不符合要求</span>\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">inferResultTypeFalse</span> <span class=\\"token operator\\">=</span> inferType<span class=\\"token operator\\">&lt;</span>cusFuncTypeTwo<span class=\\"token operator\\">&gt;</span> <span class=\\"token comment\\">// 返回 { cus: Customer, str: string }</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>infer 和泛型的区别：<code>infer</code> 主要用于在条件类型中进行类型推断，帮助提取复杂类型的一部分。使用时类型由编译器自动推断。<strong>无需定义！</strong> 一般出现在泛型的定义中。</p>\\n</div>\\n</li>\\n</ol>"}`);export{n as data};
