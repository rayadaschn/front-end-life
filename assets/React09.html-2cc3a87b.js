import{_ as n,X as s,Y as a,$ as t}from"./framework-5dd7fabc.js";const e={},p=t,o=s,c=a,i=p(`<p>这里用于梳理 React 的一些技术实现细节，以作技术回顾。</p><h2 id="setstate-的更新逻辑" tabindex="-1"><a class="header-anchor" href="#setstate-的更新逻辑" aria-hidden="true">#</a> setState 的更新逻辑</h2><p>setState 的更新逻辑有时是同步的有时是异步的，这取决于调用 setState 的环境。实际上，在 React 控制之内的事件处理过程中，setState 是异步的，而在 React 控制之外的事件处理过程中，setState 是同步的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">querrySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClick<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">&quot;btn&quot;</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Click out React<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Click <span class="token keyword">in</span> React<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，当点击第一个按钮时，<code>onClick</code> 方法是在 React 控制之外的事件处理过程中调用的，因此 setState 是同步的。当点击第二个按钮时，<code>onClick</code> 方法是在 React 控制之内的事件处理过程中调用的，因此 setState 是异步的。</p><p>这样的设计并不难理解，通过延迟更新，可以获得更好的性能。</p><h2 id="setstate-的-promise-化" tabindex="-1"><a class="header-anchor" href="#setstate-的-promise-化" aria-hidden="true">#</a> setState 的 Promise 化</h2><p>由于 setState 是异步的，因此我们无法直接通过 <code>then</code> 方法来获取更新后的状态。为了解决这个问题，我们可以使用 <code>Promise</code> 来封装 setState，从而实现 setState 的 Promise 化。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">setStateAsync</span><span class="token punctuation">(</span><span class="token parameter">me<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    me<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么时候用-redux" tabindex="-1"><a class="header-anchor" href="#什么时候用-redux" aria-hidden="true">#</a> 什么时候用 Redux?</h2><p>可以从数据持久度、数据消费范围来考虑。</p><ol><li>快速变更型：这类数据在应用中代表了某些原子级别的信息，且显著特点是变更评率最快。如比，一个文本输入框中的数据值可能随着用户输入在短时间内持续发生变化。这类数据更适合在 React <strong>组件内维护</strong>。</li><li>中等持续性：在用户浏览货使用应用时，这类数据往往会在页面刷新前保持稳定。比如，从异步请求接口通过 AJAX 方式得来的数据，或者用户在个人中心页编辑提交的数据。这类数据比较通用，也行会被不同组件所使用。适合在 <strong>Redux</strong> 中维护，并通过 <code>connect</code> 方法和组件进行连接。</li><li>长远型稳定型：指在页面多次刷新或多次访问期间保持不变的数据。因为 Redux 会在每次页面挂在后都重新生成一份新的数据，因此这种类型的数据显然应该存储在 Redux 以外的地方，比如<strong>服务端数据库或浏览器的本地存储</strong>。</li></ol>`,12),l=[i];function u(r,k){return o(),c("div",null,l)}const v=n(e,[["render",u],["__file","React09.html.vue"]]);export{v as default};
