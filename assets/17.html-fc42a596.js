const n=JSON.parse('{"key":"v-d50235fc","path":"/OneMoreThing/interview/17.html","title":"Interview -- 算法","lang":"zh-CN","frontmatter":{"title":"Interview -- 算法","icon":"note","date":"2023-09-02T00:00:00.000Z","category":["anonymous"],"tag":["note"],"star":false,"sticky":false},"headers":[{"level":2,"title":"哈希","slug":"哈希","link":"#哈希","children":[{"level":3,"title":"Set 知识点","slug":"set-知识点","link":"#set-知识点","children":[]},{"level":3,"title":"Map 知识点","slug":"map-知识点","link":"#map-知识点","children":[]},{"level":3,"title":"算法题","slug":"算法题","link":"#算法题","children":[]}]},{"level":2,"title":"双指针","slug":"双指针","link":"#双指针","children":[{"level":3,"title":"左右指针","slug":"左右指针","link":"#左右指针","children":[]},{"level":3,"title":"快慢指针","slug":"快慢指针","link":"#快慢指针","children":[]},{"level":3,"title":"数组原地修改","slug":"数组原地修改","link":"#数组原地修改","children":[]},{"level":3,"title":"单链表的倒数第 k 个节点","slug":"单链表的倒数第-k-个节点","link":"#单链表的倒数第-k-个节点","children":[]},{"level":3,"title":"单链表的中点","slug":"单链表的中点","link":"#单链表的中点","children":[]},{"level":3,"title":"判断链表是否包含环","slug":"判断链表是否包含环","link":"#判断链表是否包含环","children":[]},{"level":3,"title":"寻找环的交点","slug":"寻找环的交点","link":"#寻找环的交点","children":[]}]},{"level":2,"title":"二叉树","slug":"二叉树","link":"#二叉树","children":[{"level":3,"title":"前中后序遍历","slug":"前中后序遍历","link":"#前中后序遍历","children":[]},{"level":3,"title":"层序遍历","slug":"层序遍历","link":"#层序遍历","children":[]}]},{"level":2,"title":"递归","slug":"递归","link":"#递归","children":[{"level":3,"title":"青蛙跳台阶","slug":"青蛙跳台阶","link":"#青蛙跳台阶","children":[]}]}],"git":{"createdTime":1705138352000,"updatedTime":1734273367000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":4}]},"readingTime":{"minutes":7.1,"words":2129},"filePathRelative":"OneMoreThing/interview/17.md","localizedDate":"2023年9月2日","excerpt":"<p>前端算法不多，但是还是可以总结一套 力扣热题 100 的知识点。在此篇中，不对数据结构做过多讨论，旨在梳理知识点。</p>\\n<h2> 哈希</h2>\\n<p>在 JavaScript 中，哈希通常指的是哈希函数或哈希表的概念，而不是哈希值。</p>\\n<p><code>Set</code> 和 <code>Map</code> 是两种常见的集合类型，它们是基于哈希表实现的，但它们并不是传统意义上的哈希表。</p>\\n<h3> Set 知识点</h3>\\n<p><code>Set</code> 使用哈希表来存储唯一值，但它的哈希表并不直接暴露给用户。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 1.1 new Set() 创建一个空的 Set</span>\\n<span class=\\"token keyword\\">const</span> set <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Set</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">// 1.2 可以通过传递一个可迭代对象（如数组）来初始化 Set。</span>\\n<span class=\\"token keyword\\">const</span> set <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Set</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">// 2 唯一性: Set 只存储唯一的值。如果尝试添加已经存在的值，add 操作将被忽略。</span>\\nset<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">// 3 大小: 使用 size 属性可以获取 Set 中值的数量。</span>\\n<span class=\\"token keyword\\">const</span> setSize <span class=\\"token operator\\">=</span> set<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">// 4 判断值是否存在: 使用 has 方法可以检查值是否存在于 Set 中。</span>\\n<span class=\\"token keyword\\">const</span> hasVal <span class=\\"token operator\\">=</span> set<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">has</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// true</span>\\n\\n<span class=\\"token comment\\">// 5 删除: 使用 delete 方法可以删除 Set 中的特定值。</span>\\nset<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">delete</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">// 6 清空: 使用 clear 方法可以清空整个 Set。</span>\\nset<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">clear</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">// 7 迭代: Set 是可迭代的，可以使用 for...of 循环或 forEach 方法进行迭代</span>\\n\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> item <span class=\\"token keyword\\">of</span> set<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\nset<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">item</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">// 8 转换为数组: 可以使用 Array.from 或者扩展运算符 ... 将 Set 转换为数组</span>\\n<span class=\\"token keyword\\">const</span> arrayFromSet <span class=\\"token operator\\">=</span> Array<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">from</span><span class=\\"token punctuation\\">(</span>set<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">const</span> arraySpread <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">...</span>set<span class=\\"token punctuation\\">]</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
