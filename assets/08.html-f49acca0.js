import{_ as n,X as s,Y as a,$ as e}from"./framework-5dd7fabc.js";const t={},p=e,o=s,c=a,l=p(`<h2 id="函数声明和函数表达式的区别" tabindex="-1"><a class="header-anchor" href="#函数声明和函数表达式的区别" aria-hidden="true">#</a> 函数声明和函数表达式的区别</h2><ul><li>函数声明 <code>function fn() {}</code></li><li>函数表达式 <code>const fn = function() {}</code></li><li>函数声明会在代码执行前预加载，而函数表达式不会;</li><li>函数声明无法立即执行，函数表达式可以通过添加括号或调用立即执行。</li></ul><h2 id="new-object-和-object-create-的区别" tabindex="-1"><a class="header-anchor" href="#new-object-和-object-create-的区别" aria-hidden="true">#</a> new Object() 和 Object.create() 的区别</h2><ul><li><code>{}</code> 等同于 <code>new Object()</code>，原型均为 <code>Object.prototype</code>；</li><li><code>Object.create(null)</code> 没有原型，为空对象;</li><li><code>Object.create({...})</code> 可指定原型，并以此为原型返回一个“空对象”。</li></ul><blockquote><p>Object.create() 方法创建的对象并不是空对象，它是一个以指定的原型对象为原型的新对象。 <img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202308102215506.png" alt="Object.create 返回“空对象”" loading="lazy"></p></blockquote><h2 id="手写字符串-trim-方法-保证浏览器兼容性" tabindex="-1"><a class="header-anchor" href="#手写字符串-trim-方法-保证浏览器兼容性" aria-hidden="true">#</a> 手写字符串 trim 方法，保证浏览器兼容性</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">trim</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何捕获-js-中的异常" tabindex="-1"><a class="header-anchor" href="#如何捕获-js-中的异常" aria-hidden="true">#</a> 如何捕获 JS 中的异常</h2><p>手动捕获异常 try-catch-finally:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 尝试执行可能会引发异常的代码</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> a <span class="token operator">/</span> b
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Division result:&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在异常发生时执行的代码，可以对异常进行处理</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;An error occurred:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">// 无论是否发生异常，都会执行的代码块</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Finally block executed.&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 输出：Division result: 5, Finally block executed.</span>
<span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 输出：An error occurred: Infinity, Finally block executed.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析-url-参数" tabindex="-1"><a class="header-anchor" href="#解析-url-参数" aria-hidden="true">#</a> 解析 url 参数</h2><ol><li><p>使用 <code>window.location.search</code> 和正则表达式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getURLParameters</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> queryString <span class="token operator">=</span> url
    <span class="token operator">?</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token operator">:</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([^&amp;=]+)=([^&amp;]*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
  <span class="token keyword">let</span> match

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>match <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> params
<span class="token punctuation">}</span>

<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;http://example.com/?name=John&amp;age=30&#39;</span>
<span class="token keyword">const</span> parameters <span class="token operator">=</span> <span class="token function">getURLParameters</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token comment">// 输出：{ name: &quot;John&quot;, age: &quot;30&quot; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里的正则表达式 /([<sup>&amp;=]+)=([</sup>&amp;]*)/g 是用来匹配 URL 参数字符串中的键值对的模式。</p><ol><li><code>/</code>：正则表达式的开始和结束符号。</li><li><code>([^&amp;=]+)</code>：这是第一个捕获组，用于匹配除了 &quot;&amp;&quot; 和 &quot;=&quot; 之外的任意字符。[^&amp;=] 表示一个字符集，^ 在字符集的开头表示取反。+ 表示匹配一个或多个前面的字符。</li><li><code>=</code>匹配等号 &quot;=&quot; 字符。</li><li><code>([^&amp;]*)</code>：这是第二个捕获组，用于匹配除了 &quot;&amp;&quot; 字符之外的任意字符零次或多次。</li><li><code>/g</code>：这是正则表达式的标志。g 表示全局匹配，即匹配字符串中的所有符合模式的部分。</li></ol><p>因此，整个正则表达式的含义是匹配形如 &quot;key=value&quot; 的键值对模式，并且可以在字符串中找到多个匹配项。</p></blockquote><p>该方法使用正则表达式解析 <code>window.location.search</code> 或自定义的 URL 字符串中的查询字符串部分，并将其解析为键值对的对象。</p></li><li><p>使用 <code>URLSearchParams</code> API：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getURLParameters</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> queryString <span class="token operator">=</span> url
    <span class="token operator">?</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token operator">:</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> searchParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span>

  searchParams<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> params
<span class="token punctuation">}</span>

<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;http://example.com/?name=John&amp;age=30&#39;</span>
<span class="token keyword">const</span> parameters <span class="token operator">=</span> <span class="token function">getURLParameters</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token comment">// 输出：{ name: &quot;John&quot;, age: &quot;30&quot; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此方法使用 <code>URLSearchParams</code> API，它提供了一组方便的方法来处理 URL 查询字符串。可以通过迭代 <code>URLSearchParams</code> 的键值对来获取参数，并将其存储在对象中。</p></li><li><p>使用第三方库，例如 <code>query-string</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用 npm 安装 query-string：npm install query-string</span>
<span class="token keyword">const</span> queryString <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;query-string&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;http://example.com/?name=John&amp;age=30&#39;</span>
<span class="token keyword">const</span> parameters <span class="token operator">=</span> queryString<span class="token punctuation">.</span><span class="token function">parseUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>query
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token comment">// 输出：{ name: &quot;John&quot;, age: &quot;30&quot; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法使用第三方库 <code>query-string</code>，它提供了一个简单的接口来解析和字符串化 URL 查询参数。</p></li></ol><h2 id="map-和-object-的区别" tabindex="-1"><a class="header-anchor" href="#map-和-object-的区别" aria-hidden="true">#</a> Map 和 Object 的区别</h2><p>Map 和 Object 是两种不同的数据结构，它们在功能和使用上有一些区别：</p><ol><li><p>键类型：Map 可以使用任何类型的值作为键，包括基本类型和对象引用，而 Object 的键只能是字符串或符号类型。</p></li><li><p>键值对的顺序：Map 保持插入顺序，即键值对的顺序与其插入的顺序相同，而 Object 不保证键值对的顺序。</p></li><li><p>内置方法和属性：Map 提供了一系列用于操作和遍历键值对的内置方法，如 set()、get()、has()、delete()、size 等。而 Object 也提供了一些用于操作和访问属性的方法和属性，如 Object.keys()、Object.values()、Object.entries() 等。</p></li><li><p>原型链：Object 是 JavaScript 中的基础类型，具有原型链的特性，可以继承其他对象的属性和方法。而 Map 是一个独立的数据结构，不具有原型链的特性。</p></li><li><p>迭代器和遍历：Map 提供了内置的迭代器，可以通过 for...of、forEach() 等方式遍历键值对。而 Object 在遍历时需要先将其属性转换为数组或使用 for...in 循环。</p></li></ol><p>综上所述，Map 更适合用于存储和操作键值对的集合，而 Object 则更适合表示和操作单个实体或对象。如果需要有序的键值对并且键可以是任意类型，或者需要使用一些特定的内置方法来操作键值对集合，则 Map 是更好的选择(查询速度更快, 但是消耗内存也更大)。而如果只是需要简单的键值对结构或者要利用原型链的特性，那么 Object 是更常用的选项。</p><h2 id="set-和-array-的区别" tabindex="-1"><a class="header-anchor" href="#set-和-array-的区别" aria-hidden="true">#</a> Set 和 Array 的区别</h2><p>同 Map 和 Object 类型，Set 和 Array 也是相互对应的。</p><ol><li><p>值的唯一性：Set 中的值是唯一的，不允许重复的值。如果尝试向 Set 中添加重复的值，它将被忽略。而 Array 中的值可以重复，并且可以包含多个相同的值。</p></li><li><p>元素顺序：Set 中的元素没有特定的顺序，它们被视为<strong>无序</strong>的。而 Array 中的元素按照它们在数组中的顺序进行排序，并保持插入顺序。</p></li><li><p>内置方法和属性：Set 提供了一系列用于操作和遍历集合的内置方法，例如 add()、has()、delete()、size 等。而 Array 提供了一系列用于操作和访问数组元素的方法和属性，例如 push()、pop()、length 等。</p></li><li><p>迭代器和遍历：Set 提供了内置的迭代器，可以通过 for...of 或 forEach() 等方式遍历集合中的元素。而 Array 可以使用索引来访问数组元素，并且可以使用 for 循环、for...of、forEach() 等方式遍历数组。</p></li><li><p>数据存储：Set 存储唯一值的集合，不保留重复的值。而 Array 存储任意类型的值，可以包含重复的值。</p></li></ol><p>综上所述，Set 更适合存储唯一值的集合，并且提供了方便的方法来处理和操作这些值。它适用于<strong>去重、检查值的存在性</strong>等场景。而 Array 则更适合存储有序的、可重复的值的集合，并且提供了丰富的数组操作方法和索引访问的特性。它适用于需要按顺序操作和访问数组元素的场景。根据具体的需求，选择适合的数据结构可以提高代码的效率和可读性。</p><h2 id="weakmap-和-weakset" tabindex="-1"><a class="header-anchor" href="#weakmap-和-weakset" aria-hidden="true">#</a> WeakMap 和 WeakSet</h2><p><code>WeakMap</code> 和 <code>WeakSet</code> 是 JavaScript 中的两种弱引用集合类型，它们与 <code>Map</code> 和 <code>Set</code> 在功能和使用上有一些区别：</p><ol><li><p>弱引用：<code>WeakMap</code> 和 <code>WeakSet</code> 中的键（对于 <code>WeakMap</code>）和值（对于 <code>WeakSet</code>）是弱引用的。这意味着如果键或值不再被其他地方引用，它们将被垃圾回收机制自动回收，即使它们存在于 <code>WeakMap</code> 或 <code>WeakSet</code> 中。</p></li><li><p>迭代和大小：由于弱引用的特性，<code>WeakMap</code> 和 <code>WeakSet</code> 不支持迭代器和方法来获取集合的大小（例如 <code>size</code> 属性）。这是因为在迭代期间，集合中的键或值可能已被垃圾回收并且无法访问，因此无法准确计算集合的大小。</p></li><li><p>可用类型：<code>WeakMap</code> <strong>只接受对象作为键</strong>，而 <code>WeakSet</code> <strong>只接受对象作为值</strong>。它们不允许使用基本类型（如字符串、数字、布尔值）作为键或值。</p></li><li><p>方法和属性：<code>WeakMap</code> 和 <code>WeakSet</code> 提供了一些用于操作集合的方法，例如 <code>has(key)</code>、<code>get(key)</code>、<code>set(key, value)</code>（对于 <code>WeakMap</code>），以及 <code>has(value)</code>、<code>add(value)</code>、<code>delete(value)</code>（对于 <code>WeakSet</code>）。然而，它们没有提供类似于 <code>Map</code> 和 <code>Set</code> 的遍历方法或属性。</p></li><li><p>应用场景：<code>WeakMap</code> 和 <code>WeakSet</code> 主要用于需要在存储对象的同时不影响垃圾回收过程的场景。它们常被用于实现对象私有数据或缓存等功能。</p></li></ol><p>总结起来，<code>WeakMap</code> 和 <code>WeakSet</code> 是一种特殊类型的集合，其中的键和值是弱引用的，不会阻止相关对象被垃圾回收。它们主要适用于需要存储对象集合的场景，并且希望对象的生命周期不受集合的影响。</p><h2 id="for-in-遍历对象的可枚举性" tabindex="-1"><a class="header-anchor" href="#for-in-遍历对象的可枚举性" aria-hidden="true">#</a> for-in 遍历对象的可枚举性</h2><p>问以下输出什么?</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;i:&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案输出:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>i: a
i: b
i: c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因在于:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> objDesc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objDesc<span class="token punctuation">)</span>
<span class="token comment">// {value: 3, writable: true, enumerable: true, configurable: true}</span>

<span class="token keyword">const</span> toStringDesc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>
  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span>
  <span class="token string">&#39;toString&#39;</span>
<span class="token punctuation">)</span>
<span class="token comment">// {writable: true, enumerable: false, configurable: true, value: ƒ}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到直接定义的 enumerable 不同，直接定义的原型属性是可枚举的。</p><p>如何解决：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在定义时，手动将 enumerable 改为 false 不可枚举。</p>`,35),i=[l];function u(r,d){return o(),c("div",null,i)}const v=n(t,[["render",u],["__file","08.html.vue"]]);export{v as default};
