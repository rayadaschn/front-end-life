import{_ as o,X as i,Z as l,$ as c,V as p,W as u,F as r,Y as d}from"./framework-2eee3422.js";const v={},n=i,s=l,k=r,a=c,e=d,m=p,q=u,g=n("h1",{id:"新版-stylelint-的配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#新版-stylelint-的配置","aria-hidden":"true"},"#"),s(" 新版 stylelint 的配置")],-1),b=n("p",null,"众所周知的前端代码格式化三件套：ESlint、Prettier、Stylelint。其中，ESlint + Prettier 的配合已经非常流行了，能够满足项目的绝大部分需求，因此对于 CSS 等样式进行检测修复的 Stylelint 就没有那么需要了。本文还是梳理一下它的当下配置方法。",-1),h=n("p",null,"在过去的话不推荐的理由：",-1),y=n("li",null,"ESlint 和 Prettier 已经是会产生冲突，再加入 Stylelint 会让本地配置变得更加复杂，包也变得更加臃肿（因此官方在@15 版本中做了优化配置，不再有冲突配置）；",-1),f={href:"https://stylelint.io/migration-guide/to-15/#removed-processors-configuration-property",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"总的来说，一般的项目中，ESlint + Prettier 已经足够满足项目需求了，若不是必须，可不做配置（配置项实在是太多了 T^T）。",-1),x=n("h2",{id:"起步",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#起步","aria-hidden":"true"},"#"),s(" 起步")],-1),S={href:"https://www.npmjs.com/package/stylelint-config-prettier",target:"_blank",rel:"noopener noreferrer"},E={href:"https://stylelint.io/",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"基础性配置：",-1),j={href:"https://docs.npmjs.com/about-npm/",target:"_blank",rel:"noopener noreferrer"},A=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> <span class="token function">install</span> --save-dev stylelint stylelint-config-standard-scss
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2 . 使用以下内容在项目的根目录中创建一个配置文件：<code>.stylelintrc.json</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;stylelint-config-standard-scss&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3 . 对项目中的所有 SCSS 文件运行 Stylelint：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: npx stylelint <span class="token string">&quot;**/*.scss&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),B={href:"https://github.com/stylelint/awesome-stylelint#readme",target:"_blank",rel:"noopener noreferrer"},C=e(`<p>此时，已经能够对独立的 CSS、SCSS 的代码进行检测了，但是，这还不够，想要让它对项目中不合规的代码进行修复，所以可以在项目中的 package.json 文件中加入以下脚本命令：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service serve&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service build&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;build:test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service build --mode test&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint --fix --ext .js,.vue src&quot;</span><span class="token punctuation">,</span>
+  <span class="token property">&quot;lint:style&quot;</span><span class="token operator">:</span> <span class="token string">&quot;stylelint \\&quot;src/**/*.(scss|css)\\&quot;  --fix&quot;</span><span class="token punctuation">,</span>
+  <span class="token property">&quot;lint:style-test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;stylelint \\&quot;src/**/*.(scss|css)\\&quot;  -o &gt; styleReport.txt&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新增俩个脚本命令：</p><ul><li>“<code>lint:style</code>”：对 src 文件夹内的所有 css 和 scss 代码进行检测修复；</li><li>“<code>lint:style-test</code>”：对 src 文件夹内的所有 css 和 scss 代码进行检测，并将不合规的结果输出到 styleReport.txt 文件中。</li></ul><p>使用方法：同常规命令一样，如在项目终端中键入：<code>npm run lint:style</code>，进行样式修复。</p><h2 id="定制需求" tabindex="-1"><a class="header-anchor" href="#定制需求" aria-hidden="true">#</a> 定制需求</h2><p>单文件的检测，并不能满足我们的项目需求，如还想让其帮助我们检测修复 <code>.vue</code> 格式的代码帮助我们检测修复 css 样式书写的顺序等，此时就要配置其它的插件了。</p><ul><li>stylelint-config-recess-order：一个 Stylelint 配置，它像 Recess 和 Bootstrap 那样对 CSS 属性进行排序。</li><li>stylelint-config-recommended-vue：Stylelint 推荐的可共享 Vue 配置。</li></ul><ol><li><p>在上面的基础上，再将这俩个配置安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> <span class="token function">install</span> --save-dev stylelint-config-recess-order stylelint-config-recommended-vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在配置文件<code>.stylelintrc.json</code> 中新增这俩个配置：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;stylelint-config-standard&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;stylelint-config-recess-order&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;stylelint-config-standard-scss&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;stylelint-config-recommended-vue&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;order/properties-order&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;position&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;display&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;float&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;top&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;right&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;bottom&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;left&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;z-index&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;overflow&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;clear&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;width&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;height&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;max-width&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;max-height&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;min-width&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;min-height&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;padding&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;padding-top&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;padding-right&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;padding-bottom&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;padding-left&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;margin&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;margin-top&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;margin-right&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;margin-bottom&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;margin-left&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;margin-collapse&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;margin-top-collapse&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;margin-right-collapse&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;margin-bottom-collapse&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;margin-left-collapse&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;font&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;font-family&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;font-size&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;font-smoothing&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;osx-font-smoothing&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;font-style&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;font-weight&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;hyphens&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;line-height&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;letter-spacing&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;word-spacing&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;text-align&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;text-decoration&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;text-indent&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;text-overflow&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;text-rendering&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;text-size-adjust&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;text-shadow&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;text-transform&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;word-break&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;word-wrap&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;white-space&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;vertical-align&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;list-style&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;content&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;box-shadow&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;border-radius&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;transform&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，需要将 stylelint-config-recommended-vue 放置于末尾，否则可能会不起作用。这是由于配置的读取顺序决定的。</p></blockquote><p>除新增的配置外，还在其中规定了 css 样式的书写顺序规则 “order/properties-order” ：</p><p>1、定位：<code>position</code> <code>z-index</code> <code>left</code> <code>right</code> <code>top</code> <code>bottom</code> <code>clip</code>等。</p><p>2、自身属性：<code>width</code> <code>height</code> <code>min-height</code> <code>max-height</code> <code>min-width</code> <code>max-width</code>等。</p><p>3、文字样式：<code>color</code> <code>font-size</code> <code>letter-spacing</code>, <code>color</code> <code>text-align</code>等。</p><p>4、背景：<code>background-image</code> <code>border</code>等。</p><p>5、文本属性: <code>text-align</code> <code>vertical-align</code> <code>text-wrap</code> <code>text-transform</code> <code>text-indent</code> <code>text-decoration</code> <code>letter-spacing</code> <code>word-spacing</code> <code>white-space</code> <code>text-overflow</code>等。</p><p>6、css3 中属性：<code>content</code>、<code>box-shadow</code>、<code>animation</code>、<code>border-radius</code>、<code>transform</code>等</p></li></ol><p>由此，完成了基于 vue 项目的 Stylelint 的配置了，若不是基于 vue，可不用 “stylelint-config-recommended-vue ”的相关配置。</p><p>其它需求，可以查看官网的官方推荐。</p><h2 id="报错查询" tabindex="-1"><a class="header-anchor" href="#报错查询" aria-hidden="true">#</a> 报错查询</h2><p>做完以上的配置，在项目中编写样式可能发现全是错误，这很正常，因为很多规则还不熟悉，但是没关系，慢慢来，写的多了，自然就熟悉了。但是，来看看如何查询报错信息。</p><p>简单的举例：可能在编写类名的时候多种方式混用，如我这样写：<code>.a_B-c</code>。</p><p>不出意外的出意外了，报错原因：“selector-class-pattern”。</p>`,15),z={href:"https://stylelint.io/user-guide/rules",target:"_blank",rel:"noopener noreferrer"},V={href:"https://stylelint.docschina.org/user-guide/faq/#%E5%A6%82%E4%BD%95%E7%94%A8%E7%9F%AD%E6%A8%AA%E7%BA%BF%E9%9A%94%E5%BC%80-kebab-case-%E7%AD%89%E5%B8%B8%E8%A7%81-css-%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A%E9%85%8D%E7%BD%AE--pattern-%E8%A7%84%E5%88%99%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},$=e(`<ul><li>短横线命名(kebab-case): <code>^([a-z][a-z0-9]*)(-[a-z0-9]+)*$</code></li><li>小驼峰命名(lowerCamelCase): <code>^[a-z][a-zA-Z0-9]+$</code></li><li>蛇形命名(snake*case): <code>^([a-z][a-z0-9]\\*)(*[a-z0-9]+)\\*$</code></li><li>大驼峰命名(UpperCamelCase): <code>^[A-Z][a-zA-Z0-9]+$</code></li></ul><p>找到原因后，自定义自己的规则，还是在配置文件<code>.stylelintrc.json</code> 中编写，新增自定义的 rules 规则：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// ....其它配置</span>
  <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;selector-class-pattern&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^[a-z][a-zA-Z0-9]+$&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上配置，选择了遵循小驼峰拼写式的类选择器。若是要关闭此规则，则直接赋值为 <strong><code>null</code></strong>。</p><blockquote><p>在编写 json 格式时，参考官方文档去进行编写，格式可以这样理解：</p><p>若是配置的参数有顺序，在 json 中用数组形式表示；</p><p>若是复杂、多属性配置用对象形式进行配置。</p></blockquote>`,5);function N(P,D){const t=k("ExternalLinkIcon");return m(),q("div",null,[g,b,h,n("ul",null,[y,n("li",null,[s("如今更加流行的是 CSS-in-JS ，能利用静态分析优化掉大量冗余的 CSS，减小包的体积；再如 Tailwind 等框架的流行，直接干掉了纯 CSS，Stylelint 就更不需要了。当然，新版的 Stylelint 还是给予了 CSS-in-JS 支持，并且 @15 也做了大量的优化，如"),n("a",f,[s("删除 processors 配置"),a(t)]),s("等。")])]),_,x,n("p",null,[s("首先要明确自己的项目是老项目，还是新项目。所需要的 Stylelint 的版本是多少，最新的 Stylelint@15 同之前的配置有较大出入！@15 整合了同 Prettier 之间冲突的规则，不再需要扩展 "),n("a",S,[s("Prettier 的 Stylelint 配置"),a(t)]),s("，因为应该没有冲突的规则！因此，接下来的配置说明都是基于新版@15 的。并且，由于已经对 Prettier 左右兼容性支持，因此不管项目中是否已经配置安装过了 ESlint + Prettier 都可以直接安装下面的配置入手。")]),n("p",null,[s("参考文档："),n("a",E,[s("Stylelint 官方文档"),a(t)]),s("，还是官方文档好使。")]),w,n("p",null,[s("1 . 使用 "),n("a",j,[s("npm"),a(t)]),s(" 安装 Stylelint 和配置（默认安装最新版）：")]),A,n("p",null,[n("a",B,[s("更多好用的插件-Awesome Stylelint"),a(t)]),s("。")]),C,n("p",null,[s("查找方法：在官方文档的 Rules 中查找："),n("a",z,[s("Stylelint Rules"),a(t)]),s("。")]),n("p",null,[s("如上这个“选择器-类-模式”，实际上是规定了类名的编写格式，常用的"),n("a",V,[s("命名约定格式"),a(t)]),s("如下：")]),$])}const R=o(v,[["render",N],["__file","other05.html.vue"]]);export{R as default};
