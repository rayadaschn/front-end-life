import{_ as n,X as s,Y as a,$ as t}from"./framework-5dd7fabc.js";const p={},e=t,o=s,c=a,l=e(`<h2 id="性能优化有哪些" tabindex="-1"><a class="header-anchor" href="#性能优化有哪些" aria-hidden="true">#</a> 性能优化有哪些?</h2><p>性能优化一句话总结：是让「看到页面」这件事情尽量早、尽量轻、尽量流程。</p><p>可以分为六个方面:</p><ol><li>网络加载优化;</li><li>渲染层优化;</li><li>JavaScript 执行优化;</li><li>图片与资源优化;</li><li>构建层优化(webpack/vite)</li><li>用户体验提升优化(非性能指标，但影响观感)</li></ol><h3 id="一、网络加载优化-资源到达浏览器前" tabindex="-1"><a class="header-anchor" href="#一、网络加载优化-资源到达浏览器前" aria-hidden="true">#</a> 一、网络加载优化（资源到达浏览器前）</h3><table><thead><tr><th>技术点</th><th>说明</th></tr></thead><tbody><tr><td><strong>CDN</strong></td><td>加速静态资源分发</td></tr><tr><td><strong>HTTP/2 / HTTP/3</strong></td><td>多路复用、头部压缩</td></tr><tr><td><strong>Gzip / Brotli 压缩</strong></td><td>减小资源体积，默认推荐开启</td></tr><tr><td><strong>缓存策略</strong></td><td>强缓存（Cache-Control, Expires）<br>协商缓存（ETag, Last-Modified）</td></tr><tr><td><strong>懒加载（LazyLoad）</strong></td><td>图片、资源按需加载</td></tr><tr><td><strong>Preload / Prefetch / Preconnect</strong></td><td>提前加载关键资源、DNS 预解析</td></tr><tr><td><strong>代码拆分 / 按需加载</strong></td><td>不打大包，按路由/组件拆</td></tr><tr><td><strong>Tree Shaking</strong></td><td>移除未用的代码（ESM 前提）</td></tr><tr><td><strong>异步加载第三方脚本</strong></td><td><code>async</code> / <code>defer</code> 避免阻塞渲染</td></tr><tr><td><strong>资源合并</strong></td><td>图标合并（icon font / sprite），请求数更少</td></tr></tbody></table><h3 id="二、渲染层优化-资源到了后-尽快变成页面" tabindex="-1"><a class="header-anchor" href="#二、渲染层优化-资源到了后-尽快变成页面" aria-hidden="true">#</a> 二、渲染层优化（资源到了后，尽快变成页面）</h3><table><thead><tr><th>技术点</th><th>说明</th></tr></thead><tbody><tr><td><strong>SSR / SSG</strong></td><td>首屏提前生成，减少白屏时间</td></tr><tr><td><strong>Skeleton 骨架屏</strong></td><td>内容加载前展示结构框架</td></tr><tr><td><strong>Critical CSS</strong></td><td>首屏 CSS 内联，避免 FOUC</td></tr><tr><td><strong>预加载字体 / 资源</strong></td><td><code>font-display: swap</code>，避免字体闪</td></tr><tr><td><strong>Virtual List 虚拟滚动</strong></td><td>长列表优化渲染数量</td></tr><tr><td><strong>组件懒加载</strong></td><td><code>React.lazy</code> / <code>Vue defineAsyncComponent</code></td></tr><tr><td><strong>DOM diff 优化</strong></td><td>减少重渲染（React <code>memo</code>，Vue <code>v-once</code>）</td></tr><tr><td><strong>keep-alive</strong>（Vue）</td><td>缓存切页组件，状态保留</td></tr><tr><td><strong>requestIdleCallback</strong></td><td>主线程空闲时执行任务</td></tr><tr><td><strong>GPU 合成优化</strong></td><td><code>transform</code>, <code>will-change</code> 触发硬件加速</td></tr><tr><td><strong>合并 DOM 操作</strong></td><td>减少 Layout / Reflow 次数</td></tr></tbody></table><hr><h3 id="三、javascript-执行优化-js-别拖累页面" tabindex="-1"><a class="header-anchor" href="#三、javascript-执行优化-js-别拖累页面" aria-hidden="true">#</a> 三、JavaScript 执行优化（JS 别拖累页面）</h3><table><thead><tr><th>技术点</th><th>说明</th></tr></thead><tbody><tr><td><strong>减少大对象、大循环</strong></td><td>会阻塞主线程、影响渲染帧率</td></tr><tr><td><strong>拆组件 / 拆任务</strong></td><td>大组件分片加载，大任务分帧执行</td></tr><tr><td><strong>防抖 / 节流</strong></td><td>事件优化，减少重复触发</td></tr><tr><td><strong>React: memo, useMemo, useCallback</strong></td><td>控制子组件渲染更新</td></tr><tr><td><strong>Web Worker</strong></td><td>把计算移出主线程</td></tr><tr><td><strong>异步 import()</strong></td><td>动态导入非关键模块</td></tr><tr><td><strong>错误监控 / 捕获</strong></td><td>避免错误阻断渲染流程</td></tr></tbody></table><h3 id="四、图片与媒体优化" tabindex="-1"><a class="header-anchor" href="#四、图片与媒体优化" aria-hidden="true">#</a> 四、图片与媒体优化</h3><table><thead><tr><th>技术点</th><th>说明</th></tr></thead><tbody><tr><td><strong>WebP / AVIF 格式</strong></td><td>更小更清晰，浏览器支持广泛</td></tr><tr><td><strong>srcset + sizes</strong></td><td>按设备分辨率加载合适图</td></tr><tr><td><strong>懒加载</strong></td><td><code>loading=&quot;lazy&quot;</code> / <code>IntersectionObserver</code></td></tr><tr><td><strong>雪碧图 / iconfont / SVG</strong></td><td>减少图标请求数</td></tr><tr><td><strong>图片压缩</strong></td><td><code>tinypng</code>, <code>imagemin</code>, Webpack 插件压图</td></tr><tr><td><strong>视频优化</strong></td><td><code>poster</code>, <code>preload</code>, <code>autoplay</code> 控制加载方式</td></tr></tbody></table><h3 id="五、构建层优化-webpack-vite" tabindex="-1"><a class="header-anchor" href="#五、构建层优化-webpack-vite" aria-hidden="true">#</a> 五、构建层优化（Webpack / Vite）</h3><table><thead><tr><th>技术点</th><th>说明</th></tr></thead><tbody><tr><td><strong>按需加载</strong></td><td>UI 库如 <code>antd</code>, <code>element-plus</code> 配合插件只引入用到的组件</td></tr><tr><td><strong>babel-plugin-transform-remove-console</strong></td><td>删除开发时的 log</td></tr><tr><td><strong>splitChunks</strong></td><td>公共模块提取、缓存更稳</td></tr><tr><td><strong>缓存配置</strong></td><td>Webpack/Vite 的构建缓存提升二次构建速度</td></tr><tr><td><strong>构建结果分析工具</strong></td><td>如 <code>webpack-bundle-analyzer</code>，识别大包来源</td></tr><tr><td><strong>生产环境压缩</strong></td><td><code>terser</code> / <code>esbuild</code> 优化输出</td></tr><tr><td><strong>CDN 外链引入大库</strong></td><td>React/Vue/jquery 改为 CDN 不打包进来</td></tr></tbody></table><h3 id="六、用户体验提升优化-非指标但直接影响体感" tabindex="-1"><a class="header-anchor" href="#六、用户体验提升优化-非指标但直接影响体感" aria-hidden="true">#</a> 六、用户体验提升优化（非指标但直接影响体感）</h3><table><thead><tr><th>技术点</th><th>说明</th></tr></thead><tbody><tr><td><strong>加载进度条 / loading 效果</strong></td><td>提高感知响应速度</td></tr><tr><td><strong>交互延迟反馈</strong></td><td>按钮点击立刻有反馈动画</td></tr><tr><td><strong>骨架屏 / 占位图</strong></td><td>比 loading 更稳定视觉</td></tr><tr><td><strong>首屏静态展示、异步加载动态内容</strong></td><td>保证页面第一时间“有东西”看</td></tr><tr><td><strong>客户端缓存数据</strong></td><td>保留上次状态，避免重复请求</td></tr><tr><td><strong>路由切换动画 / 页面过渡</strong></td><td>提升“丝滑感”</td></tr></tbody></table><h3 id="常用优化工具推荐" tabindex="-1"><a class="header-anchor" href="#常用优化工具推荐" aria-hidden="true">#</a> 常用优化工具推荐</h3><table><thead><tr><th>工具</th><th>用途</th></tr></thead><tbody><tr><td>Chrome DevTools <code>Performance</code></td><td>看帧率、重排、渲染瓶颈</td></tr><tr><td>Lighthouse</td><td>性能评分报告</td></tr><tr><td>WebPageTest / PageSpeed Insights</td><td>网络请求、压缩建议</td></tr><tr><td>webpack-bundle-analyzer</td><td>分析打包构成</td></tr><tr><td>SourceMap Explorer</td><td>找出大文件来源</td></tr><tr><td>Sentry / Fundebug</td><td>性能监控 + 错误日志</td></tr></tbody></table><h2 id="文字超出省略" tabindex="-1"><a class="header-anchor" href="#文字超出省略" aria-hidden="true">#</a> 文字超出省略</h2><p><strong>单行文字</strong>省略</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#box</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span> <span class="token comment">/** 不换行 */</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span> <span class="token comment">/** 超出省略 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多行文字</strong>省略</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#box</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span> <span class="token comment">/** 将对象作为弹性伸缩盒子模型展示 */</span>
  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span> <span class="token comment">/** 设置子元素排列方式 */</span>
  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span> <span class="token comment">/** 显示几行, 超出省略 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="手写一个-gettype-函数-获取详细的数据类型" tabindex="-1"><a class="header-anchor" href="#手写一个-gettype-函数-获取详细的数据类型" aria-hidden="true">#</a> 手写一个 getType 函数，获取详细的数据类型</h2><blockquote><p>常见的类型判断</p><ol><li><code>typeof</code>: 只能判断值类型，其他就是 <code>function</code> 和 <code>object。</code></li><li><code>instanceof</code>: 需要俩个参数来判断，而不是获取类型。</li></ol></blockquote><p>实现方法: <code>Object.prototype.toString.call(obj)</code> 进判断，返回 <code>[object 数据类型]</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
  <span class="token keyword">const</span> originType <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  <span class="token keyword">const</span> spaceIndex <span class="token operator">=</span> originType<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> type <span class="token operator">=</span> spaceIndex<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>spaceIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 空格开始, &#39;]&#39; 前结束</span>
  <span class="token keyword">return</span> type<span class="token punctuation">.</span><span class="token function">toLowCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="手写一个-new-对象的过程" tabindex="-1"><a class="header-anchor" href="#手写一个-new-对象的过程" aria-hidden="true">#</a> 手写一个 new 对象的过程</h2><p>创建对象的过程分为 3 步:</p><ol><li>创建一个空对象 obj，继承 constructor 的原型；</li><li>将 obj 作为 this，执行 constructor，并传入参数；</li><li>返回 obj。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> customNem<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>constructor<span class="token operator">:</span> Function<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 创建一个空对象 obj，继承 constructor 的原型；</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
  <span class="token comment">// 2. 将 obj 作为 this，执行 constructor，并传入参数；</span>
  <span class="token function">obj</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token comment">// 3. 返回 obj。</span>
  <span class="token keyword">return</span> obj
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="instanceof-原理是什么-请用代码表示" tabindex="-1"><a class="header-anchor" href="#instanceof-原理是什么-请用代码表示" aria-hidden="true">#</a> instanceof 原理是什么, 请用代码表示</h2><p>原理:</p><p><code>f instanceof Foo</code> 表示会随着原型链 <code>f.__proto__</code> 向上查找，看是否能够找到 <code>Foo.prototype</code>。</p><p>核心步骤:</p><ul><li>排除 null 和 undefined；</li><li>排除值类型；</li><li>while 循环逐级向上查找，看是否能够匹配到，直至 null。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * 手写 instanceof
 */</span>

<span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span>instance<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> origin<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment">// 排除 null undefined</span>

  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span> instance
  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 值类型</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> tempInstance <span class="token operator">=</span> instance <span class="token comment">// 防止修改 instance</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>tempInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 向上查找, 最终到 null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tempInstance<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> origin<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      tempInstance <span class="token operator">=</span> tempInstance<span class="token punctuation">.</span>__proto__
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token comment">// 功能测试</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Object<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Object<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> Object<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="手写-bind-函数" tabindex="-1"><a class="header-anchor" href="#手写-bind-函数" aria-hidden="true">#</a> 手写 bind 函数</h2><p>核心要点:</p><ul><li>bind 会返回一个新函数，但不会执行；</li><li>会绑定 this 和部分参数；</li><li>如果是箭头函数，无法改变 this，只改变参数。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * 手写 bind 函数
 * @param context bind 传入的 this
 * @param bindArgs bind 传入的各个参数
 */</span>

<span class="token comment">// @ts-ignore</span>
<span class="token builtin">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">customBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token operator">...</span>bindArgs<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// 当前函数本身</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newArgs <span class="token operator">=</span> bindArgs<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token comment">// 拼接参数</span>
    <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> newArgs<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 功能测试</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// @ts-ignore</span>
<span class="token keyword">const</span> fn1 <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">customBind</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>

<span class="token comment">// @ts-ignore</span>
<span class="token keyword">const</span> fn2 <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">customBind</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token function">fn2</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="手写-call-和-apply" tabindex="-1"><a class="header-anchor" href="#手写-call-和-apply" aria-hidden="true">#</a> 手写 call 和 apply</h2><p>区别于 bind 会返回一个新的函数（不执行），call 和 apply 会立即执行函数。</p><p>实现关键点：解决如何在函数执行时绑定 this。</p><p>解决方案：利用对象的函数执行的隐式绑定。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 此时 this 指向 obj 本身，隐式绑定。谁调用指向谁。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建顺序:</p><ol><li>排除 null ，为全局 globalThis</li><li>排除值类型，变为 <code>new Object()</code></li><li>利用 Symbol 建立唯一属性，并在调用后取出该属性。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * 手写 call
 */</span>
<span class="token comment">// @ts-ignore</span>
<span class="token builtin">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">customCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> context <span class="token operator">=</span> globalThis
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>

  <span class="token keyword">const</span> fnKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  context<span class="token punctuation">[</span>fnKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// this 为当前函数, 相当于给绑定对象添加了当前 fn 函数属性</span>

  <span class="token keyword">const</span> res <span class="token operator">=</span> context<span class="token punctuation">[</span>fnKey<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token comment">// 绑定了 this，相当于执行绑定对象函数属性，此时 this 为绑定的对象</span>

  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>fnKey<span class="token punctuation">]</span> <span class="token comment">// 清理掉函数属性, 防止污染</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token comment">// 功能测试</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// @ts-ignore</span>
fn<span class="token punctuation">.</span><span class="token function">customCall</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>手写 apply 则变化较少，直接将传入的参数改为数组即可(默认为空数组)：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * 手写 apply
 */</span>
<span class="token comment">// @ts-ignore</span>
<span class="token builtin">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">customCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> context <span class="token operator">=</span> globalThis
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>

  <span class="token keyword">const</span> fnKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  context<span class="token punctuation">[</span>fnKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// this 为当前函数, 相当于给绑定对象添加了当前 fn 函数属性</span>

  <span class="token keyword">const</span> res <span class="token operator">=</span> context<span class="token punctuation">[</span>fnKey<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token comment">// 绑定了 this，相当于执行绑定对象函数属性，此时 this 为绑定的对象</span>

  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>fnKey<span class="token punctuation">]</span> <span class="token comment">// 清理掉函数属性, 防止污染</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token comment">// 功能测试</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// @ts-ignore</span>
fn<span class="token punctuation">.</span><span class="token function">customCall</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="遍历数组-生成-tree-node" tabindex="-1"><a class="header-anchor" href="#遍历数组-生成-tree-node" aria-hidden="true">#</a> 遍历数组，生成 tree node</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">parentId</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">parentId</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">parentId</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">parentId</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">parentId</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">parentId</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路：</p><ol><li>遍历数组</li><li>每个元素，生成 tree node</li><li>找到 parentNode，并加入它的 children。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * 数组转树结构
 */</span>

<span class="token keyword">interface</span> <span class="token class-name">IArrayItem</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  parentId<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">ITreeNode</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  children<span class="token operator">?</span><span class="token operator">:</span> ITreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">convert</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> IArrayItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> ITreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用于 id 和 treeNode 的映射</span>
  <span class="token keyword">const</span> idToTreeNode<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> ITreeNode<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">null</span>
  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> parentId <span class="token punctuation">}</span> <span class="token operator">=</span> item

    <span class="token comment">// 定义 tree node 并加入 map</span>
    <span class="token keyword">const</span> treeNode<span class="token operator">:</span> ITreeNode <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> name <span class="token punctuation">}</span>
    idToTreeNode<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> treeNode<span class="token punctuation">)</span>

    <span class="token comment">// 找到 parentNode 并加入它们的 children</span>
    <span class="token keyword">const</span> parentNode <span class="token operator">=</span> idToTreeNode<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parentId<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>parentNode<span class="token punctuation">.</span>children <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> parentNode<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      parentNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 找到根节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentId <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> root <span class="token operator">=</span> treeNode
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> root
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> tree <span class="token operator">=</span> <span class="token function">convert</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57),i=[l];function r(u,d){return o(),c("div",null,i)}const v=n(p,[["render",r],["__file","11.html.vue"]]);export{v as default};
