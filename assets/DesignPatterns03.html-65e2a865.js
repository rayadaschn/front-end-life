const e=JSON.parse('{"key":"v-f02f4268","path":"/JavaScript/DesignPatterns03.html","title":"设计模式 03 实践总结","lang":"zh-CN","frontmatter":{"title":"设计模式 03 实践总结","icon":"javascript","date":"2022-08-01T00:00:00.000Z","category":["javascript"],"tag":["javascript"],"sticky":false},"headers":[{"level":2,"title":"单一职责原则","slug":"单一职责原则","link":"#单一职责原则","children":[]},{"level":2,"title":"最少知识原则","slug":"最少知识原则","link":"#最少知识原则","children":[]},{"level":2,"title":"开放封闭原则","slug":"开放封闭原则","link":"#开放封闭原则","children":[]},{"level":2,"title":"代码重构的几个要点","slug":"代码重构的几个要点","link":"#代码重构的几个要点","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1690967605000,"updatedTime":1691025750000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":6.33,"words":1899},"filePathRelative":"JavaScript/DesignPatterns03.md","localizedDate":"2022年8月1日","excerpt":"<p>在前面总结了设计模式的常用方法，在该篇中总结设计模式在实践运用中的一些原则。</p>\\n<h2> 单一职责原则</h2>\\n<p>单一职责原则（Single Responsibility Principle，SRP）是面向对象设计原则之一，它指导在设计类或模块时，一个类或模块应该只有一个职责。</p>\\n<p>单一职责原则认为一个类或模块应该只有一个引起它变化的原因。换句话说，一个类或模块应该只有一个主要的责任或任务。如果一个类或模块承担了多个职责，那么当其中一个职责发生变化时，可能会影响到其他职责的实现。这样的设计通常会导致代码的耦合性增加，难以理解、扩展和维护。</p>\\n<p>通过将不同职责的代码分离到不同的类或模块中，可以使系统更加灵活、可扩展和可维护。每个类或模块都应该专注于完成一个独立的任务，这样可以降低代码之间的依赖性，提高代码的可读性和可维护性。</p>"}');export{e as data};
