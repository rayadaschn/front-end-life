import{_ as a,X as e,Y as i,$ as r}from"./framework-97fa2d96.js";const h={},t=r,n=e,l=i,s=t('<p>从这里开始学习设计模式。</p><p>设计模式一共有 23 种，在此共记录在 JavaScript 开发中更 常见的 14 种设计模式。它们分别是：</p><ul><li><a href="#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">单例模式</a></li><li><a href="#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F">策略模式</a></li><li><a href="#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F">代理模式</a></li><li><a href="#%E8%BF%AD%E4%BB%A3%E6%A8%A1%E5%BC%8F">迭代模式</a></li><li><a href="#%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F">发布-订阅模式</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F">命令模式</a></li><li><a href="#%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F">组合模式</a></li><li><a href="DesignPatterns02">享元模式</a></li><li><a href="DesignPatterns02">职责链模式</a></li><li><a href="DesignPatterns02">中介模式</a></li><li><a href="DesignPatterns02">装饰者模式</a></li><li><a href="DesignPatterns02">状态模式</a></li><li><a href="DesignPatterns02">适配器模式</a></li></ul><h2 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h2><p>单例模式的定义是:保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><h2 id="策略模式" tabindex="-1"><a class="header-anchor" href="#策略模式" aria-hidden="true">#</a> 策略模式</h2><p>策略模式:</p><h2 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式" aria-hidden="true">#</a> 代理模式</h2><p>代理模式:</p><h2 id="迭代模式" tabindex="-1"><a class="header-anchor" href="#迭代模式" aria-hidden="true">#</a> 迭代模式</h2><p>迭代模式:</p><h2 id="发布-订阅模式" tabindex="-1"><a class="header-anchor" href="#发布-订阅模式" aria-hidden="true">#</a> 发布-订阅模式</h2><p>发布-订阅模式:</p><h2 id="命令模式" tabindex="-1"><a class="header-anchor" href="#命令模式" aria-hidden="true">#</a> 命令模式</h2><p>命令模式:</p><h2 id="组合模式" tabindex="-1"><a class="header-anchor" href="#组合模式" aria-hidden="true">#</a> 组合模式</h2><p>组合模式:</p>',17),d=[s];function c(E,f){return n(),l("div",null,d)}const p=a(h,[["render",c],["__file","DesignPatterns01.html.vue"]]);export{p as default};
