import{_ as n,X as s,Y as a,$ as e}from"./framework-97fa2d96.js";const o={},t=e,l=s,c=a,i=t(`<h2 id="dom-是什么" tabindex="-1"><a class="header-anchor" href="#dom-是什么" aria-hidden="true">#</a> DOM 是什么？</h2><p>DOM 全称叫 <code>Document Object Model</code>，中文叫文档对象模型。实际上就是一种对象，但是宿主对象。</p><p>在 JavaScript 中，有三种对象：</p><ol><li>本地对象: <ol><li>Object、Function、Array、String、Number 和 Boolean；</li><li>Error、EvalError、SyntaxError、RangeError、ReferenceError、TypeError、URIError；</li><li>本地对象是 JavaScript 语言内置的，它们提供基本的操作和功能。</li></ol></li><li>内置对象: <ol><li>Global、Math；</li><li>内置对象是本地对象的一种，它提供了一些基本的操作和功能。</li></ol></li><li>宿主对象: <ol><li>宿主对象是运行时环境提供的对象，比如浏览器提供的 window（BOM）、document（DOM） 等对象；</li><li>宿主对象是本地对象的一种，它提供了一些基本的操作和功能。</li></ol></li></ol><p>本地对象和内置对象都是 ECMAScript 规范中定义的内部对象，而宿主对象则是运行时环境提供的，即浏览器提供，所以 DOM 存在兼容性问题。</p><p>DOM 存在的意义是，通过浏览器提供的这一套方法去<strong>表示</strong>或<strong>操作</strong> HTML 页面，使得我们可以通过 JavaScript 去操作 HTML 页面。</p><h2 id="dom-节点" tabindex="-1"><a class="header-anchor" href="#dom-节点" aria-hidden="true">#</a> DOM 节点</h2><p>DOM 节点是 DOM 树中的一个节点，它表示文档中的一个元素、文本或注释等。DOM 节点具有以下特征：</p><ol><li>每个节点都有一个父节点；</li><li>每个节点可以有零个或多个子节点；</li><li>每个节点可以有零个或多个兄弟节点；</li><li>每个节点都有一个节点类型（NodeType）；</li></ol><p>节点选择:</p><ol><li>document.getElementById()：通过元素的 id 属性获取元素；</li><li>document.getElementsByTagName()：通过元素的标签名获取元素；</li><li>document.getElementsByClassName()：通过元素的 class 属性获取元素；</li><li>document.querySelector()：通过选择器获取元素；</li><li>document.querySelectorAll()：通过选择器获取所有元素；</li><li>document.createElement()：创建元素；</li><li>document.createTextNode()：创建文本节点；</li></ol><blockquote><p>值得注意的是，一般不建议直接使用 querySelector 和 querySelectorAll，而建议使用 getElementByTagName 等来获取。原因在于 querySelector 的性能问题，以及它获取的元素并不是实时的。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> queryDivs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> getPs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queryDivs<span class="token punctuation">)</span> <span class="token comment">// 返回完整列表</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getPs<span class="token punctuation">)</span> <span class="token comment">// 返回完整列表</span>

<span class="token comment">// 元素删除</span>
queryDivs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
getPs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queryDivs<span class="token punctuation">)</span> <span class="token comment">// 返回依旧是完整列表</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getPs<span class="token punctuation">)</span> <span class="token comment">// 返回删除元素后的列表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="遍历元素节点树" tabindex="-1"><a class="header-anchor" href="#遍历元素节点树" aria-hidden="true">#</a> 遍历元素节点树</h2><p>节点包含元素，元素节点就是 DOM 元素。</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202404212133176.png" alt="DOM 结构树" tabindex="0" loading="lazy"><figcaption>DOM 结构树</figcaption></figure><p>节点的类型其实很多，并不止上文所述那么简单。一个子节点可能有如下类型：</p><ul><li>元素节点：<code>nodeType</code> 为 1，<code>nodeName</code> 为大写的标签名，<code>nodeValue</code> 为 <code>null</code>；</li><li>属性节点：<code>nodeType</code> 为 2，<code>nodeName</code> 为属性的名称，<code>nodeValue</code> 为属性的值；</li><li>文本节点：<code>nodeType</code> 为 3，<code>nodeName</code> 为 <code>#text</code>，<code>nodeValue</code> 为文本内容，注意换行也算文本节点<code>\\n</code>，可以用 <code>hasChildNodes()</code> 来检测；</li><li>注释节点：<code>nodeType</code> 为 8，<code>nodeName</code> 为 <code>#comment</code>，<code>nodeValue</code> 为注释内容；</li><li>文档节点：<code>nodeType</code> 为 9，<code>nodeName</code> 为 <code>#document</code>，<code>nodeValue</code> 为 <code>null</code>；</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span>
  <span class="token comment">/* 
  &lt;li&gt;
    &lt;a&gt;a 标签&lt;/a&gt;
    &lt;p&gt;p 标签&lt;/p&gt;
    &lt;h1&gt;h1 标签&lt;/h1&gt;
  &lt;/li&gt; 
  */</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 返回结果是 6 !!! 并不是 3, 原因在于还有很多其它的节点, 如 文本等</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历节点树的方法:</p><ul><li><code>node.childNodes</code>：返回子节点列表；</li><li><code>node.firstChild</code>：返回第一个子节点；</li><li><code>node.lastChild</code>：返回最后一个子节点；</li><li><code>node.nextSibling</code>：返回下一个兄弟节点；</li><li><code>node.previousSibling</code>：返回上一个兄弟节点；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment">// 获取第一个子节点</span>
<span class="token keyword">const</span> firstChild <span class="token operator">=</span> li<span class="token punctuation">.</span>firstChild

<span class="token comment">// 获取最后一个子节点</span>
<span class="token keyword">const</span> lastChild <span class="token operator">=</span> li<span class="token punctuation">.</span>lastChild

<span class="token comment">// 获取下一个兄弟节点</span>
<span class="token keyword">const</span> nextSibling <span class="token operator">=</span> li<span class="token punctuation">.</span>nextSibling

<span class="token comment">// 获取上一个兄弟节点</span>
<span class="token keyword">const</span> previousSibling <span class="token operator">=</span> li<span class="token punctuation">.</span>previousSibling

<span class="token comment">// 获取子节点列表</span>
<span class="token keyword">const</span> childNodes <span class="token operator">=</span> li<span class="token punctuation">.</span>childNodes

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span> <span class="token comment">// 返回第一个子节点</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastChild<span class="token punctuation">)</span> <span class="token comment">// 返回最后一个子节点</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nextSibling<span class="token punctuation">)</span> <span class="token comment">// 返回下一个兄弟节点</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>previousSibling<span class="token punctuation">)</span> <span class="token comment">// 返回上一个兄弟节点</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>childNodes<span class="token punctuation">)</span> <span class="token comment">// 返回子节点列表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),p=[i];function d(u,r){return l(),c("div",null,p)}const k=n(o,[["render",d],["__file","DOM01.html.vue"]]);export{k as default};
