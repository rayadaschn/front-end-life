const e=JSON.parse('{"key":"v-eb4e40b2","path":"/JavaScript/Node07.html","title":"nvm 使用技巧","lang":"zh-CN","frontmatter":{"title":"nvm 使用技巧","icon":"nodeJS","category":["javascript"],"tag":["node"],"date":"2023-06-14T00:00:00.000Z"},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]}],"git":{"createdTime":1686712727000,"updatedTime":1686712727000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.82,"words":846},"filePathRelative":"JavaScript/Node07.md","localizedDate":"2023年6月14日","excerpt":"<h1> nvm 使用技巧</h1>\\n<p>nvm（Node Version Manager）是一款针对 Node.js 的版本管理工具。它允许用户同时安装和管理多个 Node.js 版本，并提供了一些命令行工具来快速切换不同的版本，以适应不同的使用场景。</p>\\n<p>官方文档: <a href=\\"https://github.com/nvm-sh/nvm#intro\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Nvm 官方文档</a></p>\\n<p>nvm 的主要优点包括：</p>\\n<ul>\\n<li>管理 Node.js 版本：nvm 允许用户同时安装、激活、卸载不同的 Node.js 版本，避免了多个项目之间出现版本冲突或兼容性问题的情况。</li>\\n<li>快速切换版本：通过 nvm 提供的命令行工具，用户可以快速地在不同的 Node.js 版本之间进行切换，大大节省了手动更改系统环境变量或重新安装 Node.js 的时间。</li>\\n<li>管理全局模块：当切换不同的 Node.js 版本时，nvm 还可以自动为每个版本挑选相应的全局模块，在保持用户数据的独立性的同时，也确保了运行时环境的正确性。</li>\\n</ul>"}');export{e as data};
