const e=JSON.parse('{"key":"v-cafd6ef0","path":"/Framework/Nuxt/ssr01.html","title":"服务端渲染 SSR 概述","lang":"zh-CN","frontmatter":{"title":"服务端渲染 SSR 概述","icon":"vue","date":"2023-05-11T00:00:00.000Z","category":["框架"],"tag":["ssr"],"star":false,"sticky":false},"headers":[{"level":2,"title":"目录说明","slug":"目录说明","link":"#目录说明","children":[]}],"git":{"createdTime":1703991106000,"updatedTime":1703991106000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.32,"words":1896},"filePathRelative":"Framework/Nuxt/ssr01.md","localizedDate":"2023年5月11日","excerpt":"<h1> 服务端渲染 SSR 概述</h1>\\n<p>服务端渲染这块，Vue 官网总结的非常好。<a href=\\"https://cn.vuejs.org/guide/scaling-up/ssr.html#ssr-vs-ssg\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">《实现一个基础的服务端渲染》</a> 官网的案例中，实现了一个基础的应用，这里再总结一下，Vue 原生的服务端渲染实现过程。</p>\\n<ol>\\n<li>创建 Vue 应用：使用 Vue CLI 或手动创建一个 Vue 应用，并添加支持服务端渲染的插件，例如 <code>@vue/server-renderer</code>。</li>\\n<li>编写服务端渲染入口文件：根据需要，编写服务端渲染入口文件，通常命名为 <code>server-entry.js</code>。该文件需要导出一个函数或 Promise，用于生成服务端渲染的 HTML 字符串。</li>\\n<li>编写服务端路由和控制器：根据需要，编写服务端路由和控制器，处理客户端请求并生成相应的服务端渲染 HTML。</li>\\n<li>构建和打包：使用 Vue CLI 或其他构建工具，将客户端代码和服务端代码分别打包成两个独立的 bundle 文件。</li>\\n<li>启动服务端：在服务器上启动 Node.js 环境，并运行服务端代码，监听客户端请求并返回服务端渲染 HTML。</li>\\n<li>客户端激活：在客户端代码中，通过 <code>createSSRApp</code> 函数创建 Vue 应用实例，并使用 <code>hydrate</code> 函数将服务端渲染的 HTML 字符串与客户端应用进行关联，从而完成客户端激活。</li>\\n</ol>"}');export{e as data};
