const l=JSON.parse('{"key":"v-cce031dc","path":"/OneMoreThing/interview09.html","title":"Interview -- vue 相关面试题","lang":"zh-CN","frontmatter":{"title":"Interview -- vue 相关面试题","icon":"note","date":"2023-08-23T00:00:00.000Z","category":["anonymous"],"tag":["note"],"star":false,"sticky":false},"headers":[{"level":2,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":2,"title":"vue 组件使用","slug":"vue-组件使用","link":"#vue-组件使用","children":[]},{"level":2,"title":"vue 的高级特性","slug":"vue-的高级特性","link":"#vue-的高级特性","children":[]},{"level":2,"title":"全局数据管理 vuex","slug":"全局数据管理-vuex","link":"#全局数据管理-vuex","children":[]},{"level":2,"title":"vue-router","slug":"vue-router","link":"#vue-router","children":[]},{"level":2,"title":"框架原理","slug":"框架原理","link":"#框架原理","children":[{"level":3,"title":"组件化","slug":"组件化","link":"#组件化","children":[]},{"level":3,"title":"响应式","slug":"响应式","link":"#响应式","children":[]},{"level":3,"title":"vdom 和 diff","slug":"vdom-和-diff","link":"#vdom-和-diff","children":[]},{"level":3,"title":"什么是虚拟 DOM？","slug":"什么是虚拟-dom","link":"#什么是虚拟-dom","children":[]},{"level":3,"title":"v-show 和 v-if 有什么区别？","slug":"v-show-和-v-if-有什么区别","link":"#v-show-和-v-if-有什么区别","children":[]},{"level":3,"title":"v-for 和 v-if 一起使用有什么问题？","slug":"v-for-和-v-if-一起使用有什么问题","link":"#v-for-和-v-if-一起使用有什么问题","children":[]},{"level":3,"title":"为什么 v-for 循环的 key 需要唯一？","slug":"为什么-v-for-循环的-key-需要唯一","link":"#为什么-v-for-循环的-key-需要唯一","children":[]},{"level":3,"title":"Vue 中的生命周期是什么(当父子组件同事存在)","slug":"vue-中的生命周期是什么-当父子组件同事存在","link":"#vue-中的生命周期是什么-当父子组件同事存在","children":[]},{"level":3,"title":"vue 组件如何通讯","slug":"vue-组件如何通讯","link":"#vue-组件如何通讯","children":[]},{"level":3,"title":"描述组件渲染和更新的过程","slug":"描述组件渲染和更新的过程","link":"#描述组件渲染和更新的过程","children":[]},{"level":3,"title":"为什么组件的 data 必须是一个函数？","slug":"为什么组件的-data-必须是一个函数","link":"#为什么组件的-data-必须是一个函数","children":[]},{"level":3,"title":"ajax 请求应该放在哪个生命周期中？","slug":"ajax-请求应该放在哪个生命周期中","link":"#ajax-请求应该放在哪个生命周期中","children":[]},{"level":3,"title":"什么时候用 keep-alive？","slug":"什么时候用-keep-alive","link":"#什么时候用-keep-alive","children":[]},{"level":3,"title":"vue 常见的性能优化方式","slug":"vue-常见的性能优化方式","link":"#vue-常见的性能优化方式","children":[]},{"level":3,"title":"网页 url 组成部分","slug":"网页-url-组成部分","link":"#网页-url-组成部分","children":[]},{"level":3,"title":"hash 跳转","slug":"hash-跳转","link":"#hash-跳转","children":[]},{"level":3,"title":"H5 history 跳转","slug":"h5-history-跳转","link":"#h5-history-跳转","children":[]}]},{"level":2,"title":"vue3 部分","slug":"vue3-部分","link":"#vue3-部分","children":[{"level":3,"title":"vue3 比 vue2 有什么优势?","slug":"vue3-比-vue2-有什么优势","link":"#vue3-比-vue2-有什么优势","children":[]},{"level":3,"title":"Vue3 生命周期","slug":"vue3-生命周期","link":"#vue3-生命周期","children":[]},{"level":3,"title":"Composition API 有什么好处?","slug":"composition-api-有什么好处","link":"#composition-api-有什么好处","children":[]},{"level":3,"title":"如何理解 ref、toRef 和 toRefs","slug":"如何理解-ref、toref-和-torefs","link":"#如何理解-ref、toref-和-torefs","children":[]},{"level":3,"title":"为什么需要 ref?","slug":"为什么需要-ref","link":"#为什么需要-ref","children":[]},{"level":3,"title":"为什么需要 .value?","slug":"为什么需要-value","link":"#为什么需要-value","children":[]},{"level":3,"title":"为什么需要 toRef 和 toRefs","slug":"为什么需要-toref-和-torefs","link":"#为什么需要-toref-和-torefs","children":[]},{"level":3,"title":"如何理解 v-model? 同 vue2 中的 .sync","slug":"如何理解-v-model-同-vue2-中的-sync","link":"#如何理解-v-model-同-vue2-中的-sync","children":[]},{"level":3,"title":"watch 和 watchEffect 的区别是什么?","slug":"watch-和-watcheffect-的区别是什么","link":"#watch-和-watcheffect-的区别是什么","children":[]},{"level":3,"title":"vue3 中 setup 如何获取组件实例","slug":"vue3-中-setup-如何获取组件实例","link":"#vue3-中-setup-如何获取组件实例","children":[]},{"level":3,"title":"Vue3 为什么比 Vue2 快?","slug":"vue3-为什么比-vue2-快","link":"#vue3-为什么比-vue2-快","children":[]},{"level":3,"title":"Vite 为什么会快?","slug":"vite-为什么会快","link":"#vite-为什么会快","children":[]},{"level":3,"title":"Composition API 和 React Hook 对比","slug":"composition-api-和-react-hook-对比","link":"#composition-api-和-react-hook-对比","children":[]}]}],"git":{"createdTime":1691831112000,"updatedTime":1693357264000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":13}]},"readingTime":{"minutes":14.65,"words":4394},"filePathRelative":"OneMoreThing/interview09.md","localizedDate":"2023年8月23日","excerpt":"<p>框架类面试主要考察三个方面:</p>\\n<ul>\\n<li>框架的使用(基本使用, 高级特性, 周边插件)</li>\\n<li>框架的原理(基本原理的了解, 热门技术的深度和全面性)</li>\\n<li>框架的实际应用,即设计能力(组件结构和数据结构)</li>\\n</ul>\\n<h2> 基本使用</h2>\\n<ul>\\n<li>指令和插值\\n<ul>\\n<li>插值、表达式</li>\\n<li>指令、动态属性</li>\\n<li>v-html：会有 XSS 风险，会覆盖子组件</li>\\n</ul>\\n</li>\\n<li>computed 和 watch\\n<ul>\\n<li>computed 有缓存 data 不变则不会重新计算</li>\\n<li>watch 的深度监听</li>\\n<li>watch 监听引用类型，拿不到 oldValue</li>\\n</ul>\\n</li>\\n<li>class 和 style</li>\\n<li>条件渲染\\n<ul>\\n<li><code>v-if</code> 和 <code>v-else</code> 的用法, 可使用变量, 也可使用 <code>===</code> 表达式</li>\\n<li><code>v-if</code> 和 <code>v-show</code> 的区别</li>\\n<li><code>v-if</code> 和 <code>v-show</code> 的使用场景</li>\\n</ul>\\n</li>\\n<li>循环(列表)渲染\\n<ul>\\n<li>如何遍历对象? -- <code>v-for</code></li>\\n<li>key 的重要性，key 不能重复</li>\\n<li><code>v-for</code> 和 <code>v-if</code> 不能一起使用</li>\\n</ul>\\n</li>\\n<li>事件\\n<ul>\\n<li>event 参数，自定义参数</li>\\n<li>事件修饰符\\n<ul>\\n<li>阻止单击事件继续传播: <code>&lt;a @click.stop=\\"doThis\\" &gt;A&lt;/a&gt;</code></li>\\n<li>提交时间不再重载页面: <code>&lt;a @click.submit.prevent=\\"onSubmit\\" &gt;B&lt;/a&gt;</code></li>\\n<li>修饰符可以串联: <code>&lt;a @click.stop.prevent=\\"doThat\\" &gt;C&lt;/a&gt;</code></li>\\n<li>只有修饰符: <code>&lt;a v-on:submit.prevent=\\"doThat\\" &gt;D&lt;/a&gt;</code></li>\\n</ul>\\n</li>\\n<li>按键修饰符\\n<ul>\\n<li>即使 Alt 或 Shift 被一同按下也会触发: <code>&lt;a @click.ctrl=\\"onClick\\" &gt;A&lt;/a&gt;</code></li>\\n<li>只有 Ctrl 被按下才会触发: <code>&lt;a @click.ctrl.exact=\\"onClick\\" &gt;B&lt;/a&gt;</code></li>\\n<li>没有任何修饰符被按下时才会触发: <code>&lt;a @click.exact=\\"onClick\\" &gt;C&lt;/a&gt;</code></li>\\n</ul>\\n</li>\\n<li>事件如何绑定 -- <code>@click</code></li>\\n</ul>\\n</li>\\n<li>表单\\n<ul>\\n<li>v-model</li>\\n<li>常见表单项 textarea,checkbox,radio,select</li>\\n<li>修饰符 v-model.lazy, v-model.number, v-model.trim</li>\\n</ul>\\n</li>\\n</ul>"}');export{l as data};
