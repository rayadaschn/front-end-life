import{_ as t,Z as o,a0 as c,F as l,a1 as i,X as r,Y as u,$ as d}from"./framework-97fa2d96.js";const k={},s=o,n=c,m=l,e=i,p=d,v=r,b=u,h=p(`<h1 id="webpack-性能优化之分包" tabindex="-1"><a class="header-anchor" href="#webpack-性能优化之分包" aria-hidden="true">#</a> Webpack 性能优化之分包</h1><p>Webpack 性能优化可分为俩方面：</p><ul><li>优化一：打包后的结果，上线时的性能优化。(比如分包处理、减小包体积、CDN 服务器等)</li><li>优化二：优化打包速度，开发或者构建时优化打包速度。(比如 exclude、cache-loader 等)</li></ul><p>实际上，Webpack 在配置 mode 时，已经自动为项目做了很多优化了。但是，也可以定制一些相关配置。</p><h2 id="代码分离" tabindex="-1"><a class="header-anchor" href="#代码分离" aria-hidden="true">#</a> 代码分离</h2><p>代码分离的主要目的是将代码分离到不同的 bundle 中，之后我们可以按需加载，或者并行加载这些文件。如默认情况下，所有的 JavaScrip t 代码（业务代码、第三方依赖、暂时没有用到的模块）在首页全部都加载，就会影响首页 的加载速度。代码分离可以分出更小的 bundle，以及控制资源加载优先级，提供代码的加载性能。</p><p>Webpack 中常见的代码分离有三种：</p><ul><li>入口起点：使用 entry 配置手动分离代码;</li><li>防止重复：使用 Entry Dependencies（依赖包重复）或者 SplitChunksPlugin 去重和分离代码;</li><li>动态导入：通过模块的内联函数调用来分离代码;</li></ul><h3 id="多入口起点" tabindex="-1"><a class="header-anchor" href="#多入口起点" aria-hidden="true">#</a> 多入口起点</h3><p>多入口起点，意思很简单，就是多个配置入口。通常情况下，我们会依据初始 <code>index.js</code> 作为依赖包的入口。但也可以同时分包多个，在需要时进行加载。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>

<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// ....</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&#39;./src/math.js&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name]-bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ....</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述配置中，我们定义了俩个包的入口，并设置了导出包的配置。其中，导出配置中，我们设置文件名为：<code>filename: &quot;[name]-bundle.js&quot;</code> ，这里的 name 实际上是 placeholder 占位符，默认为文件名，但也可以自定义，后续介绍（给 webpack 增加魔法注释）。</p><p>但仅仅是将俩个包切割还是不够的，因为很有可能俩个包都有依赖同一份第三方包，如都各自引用了 <code>loadsh</code>，这个时候我们应该再对这种共享包进行优化处理。</p><p>优化关键属性：<code>shared</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
<span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">&#39;shared&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&#39;./src/main.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">&#39;shared&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;loadsh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="splitchunks" tabindex="-1"><a class="header-anchor" href="#splitchunks" aria-hidden="true">#</a> SplitChunks</h3><p>上文有提到第三方包重复的问题，实际上有预置安装 <code>SplitChunksPlugin</code> 来对重复的第三方包进行分包处理，只需要提供 <code>SplitChunksPlugin</code> 相关的配置信息即可。</p>`,17),g={href:"https://webpack.docschina.org/plugins/split-chunks-plugin/",target:"_blank",rel:"noopener noreferrer"},y=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义配置解析：</p><ul><li><code>chunks</code>：默认值是 <code>async</code>，另外则为 <code>initial</code> 表示对通过的代码进行处理；<code>all</code> 表示对同步和异步代码都进行处理；</li><li><code>minSize</code>：拆分包的大小，至少为 minSize，若达不到则该包不会拆分；</li><li><code>maxSize</code>：将大于 <code>maxSize</code> 的拆分包拆分为不小于 <code>minSize</code> 的包；</li><li><code>cacheGroups</code>：用于对拆分的包就行分组，比如一个 lodash 在拆分之后，并不会立即打包，而是会等到有没有其他符合规则的包一起来打包。 <ul><li><code>test</code> 属性：匹配符合规则的包；</li><li><code>name</code> 属性：拆分包的 name 属性；</li><li><code>filename</code> 属性：拆分包的入口文件名称，可以自己使用 placeholder 属性。</li><li><code>chunkFilename</code>属性：使用代码分割（code splitting）和动态导入（dynamic import）时生成的文件的名称。当使用 Webpack 的代码分割功能时，它会将代码拆分成多个块（chunks），每个块对应一个输出文件。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>

<span class="token comment">// ...</span>
<span class="token comment">// 优化配置</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置生成的chunkId的算法</span>
    <span class="token comment">// development: named</span>
    <span class="token comment">// production: deterministic(确定性)</span>
    <span class="token comment">// webpack4中使用: natural</span>
    <span class="token literal-property property">chunkIds</span><span class="token operator">:</span> <span class="token string">&#39;deterministic&#39;</span><span class="token punctuation">,</span>

    <span class="token comment">// runtime的代码是否抽取到单独的包中(早Vue2脚手架中)</span>
    <span class="token literal-property property">runtimeChunk</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;runtime&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// 分包插件: SplitChunksPlugin</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 当一个包大于指定的大小时, 继续进行拆包</span>
      <span class="token comment">// maxSize: 20000,</span>
      <span class="token comment">// // 将包拆分成不小于minSize的包</span>
      <span class="token comment">// minSize: 10000,</span>
      <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>

      <span class="token comment">// 自己对需要进行拆包的内容进行分包</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">utils</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">utils</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[id]_utils.js&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">vendors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// /node_modules/</span>
          <span class="token comment">// window上面 &#39;/\\&#39;</span>
          <span class="token comment">// mac上面 &#39;/&#39;</span>
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[id]_vendors.js&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// 代码优化: TerserPlugin =&gt; 让代码更加简单 =&gt; Terser</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// JS代码简化</span>
      <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">extractComments</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token comment">// CSS代码简化</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态导入" tabindex="-1"><a class="header-anchor" href="#动态导入" aria-hidden="true">#</a> 动态导入</h3><p><strong>webpack</strong> 提供了两种实现动态导入的方式：</p><ul><li>第一种，使用 ECMAScript 中的 <code>import()</code> 语法来完成，也是目前推荐的方式;</li><li>第二种，使用 webpack 遗留的 require.ensure，目前已经不推荐使用;</li></ul>`,7),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import#%E5%8A%A8%E6%80%81_import",target:"_blank",rel:"noopener noreferrer"},j={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Tree_shaking",target:"_blank",rel:"noopener noreferrer"},f=p(`<p>关键字 import 可以像调用函数一样来动态的导入模块。以这种方式调用，将返回一个 <code>promise</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;/modules/my-module.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something with the module.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种使用方式也支持 <code>await</code> 关键字。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;/modules/my-module.js&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 webpack 中，动态导入的文件通常是一定会打包成独立的文件的，所以它的命名一般在 <code>output.chunkFilename</code> 中命名:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token comment">// ...</span>
<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./build&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// placeholder</span>
  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name]-bundle.js&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 单独针对分包的文件进行命名</span>
  <span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&#39;[name]_chunk.js&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果我们希望修改 name 的值，可以通过 magic comments(魔法注释)的方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>btn1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="token string">&#39;./router/about&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/* webpackChunkName: &quot;about&quot; */</code> 便是魔法注释。</p></blockquote><p>此外，webpack v4.6+ 还增加了预获取（Prefetch）和预加载（Preload）的支持。</p><p>在魔法注释里面，可以使用这些内置指令：</p><ul><li><strong>prefetch</strong> （预获取）：将来某些导航下可能需要的资源</li><li><strong>preload</strong> （预加载）：当前导航下可能需要资源</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span>
  <span class="token comment">/* webpackChunkName: &quot;component&quot; */</span>
  <span class="token comment">/* webpackPreload: true */</span>
  <span class="token string">&#39;./component&#39;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 prefetch 指令相比，preload 指令有许多不同之处：</p><ul><li>preload chunk 会在父 chunk 加载时，以并行方式开始加载。prefetch chunk 会在父 chunk 加载结束后开始加载。</li><li>preload chunk 具有中等优先级，并立即下载。prefetch chunk 在浏览器闲置时下载。</li><li>preload chunk 会在父 chunk 中立即请求，用于当下时刻。prefetch chunk 会用于未来的某个时刻。</li></ul><h2 id="onemorething" tabindex="-1"><a class="header-anchor" href="#onemorething" aria-hidden="true">#</a> OneMoreThing</h2><p>在我们给打包的文件进行命名的时候，会使用 placeholder ，placeholder 中有几个属性比较相似，它们的区别在于生成哈希的范围不同：</p><ul><li>hash：整个项目每次改动都会变化</li><li>chunkhash：根据入口文件范围内的代码块（chunk）的内容生成的哈希值。只要这个入口文件及其依赖的代码内容发生变化，其对应的 chunkhash 就会发生变化。</li><li>contenthash：只和文件内容有关，文件内容不变，它的 contenthash 不变。</li><li>hash 本身是通过 MD4 的散列函数处理后，生成一个 128 位的 hash 值（ 32 个十六进制）。</li></ul><p>hash 值的生成和整个项目有关系：</p><p>比如我们现在有两个入口<code>index.js</code>和<code>main.js</code>，它们分别会输出到不同的<code>bundle</code>文件中，并且在文件名称中我们有使用<code>hash</code>。这个时候，如果修改了 index.js 文件中的内容，那么<code>hash</code>会发生变化。那就意味着两个文件的名称都会发生变化。</p><p><code>chunkhash</code>可以有效的解决上面的问题，它会根据<strong>不同的入口</strong>进行借来解析来生成<code>hash</code>值：比如我们修改了<code>index.js</code>，那么<code>main.js</code>的<code>chunkhash</code>是<strong>不会</strong>发生改变的;</p><p><code>contenthash</code>表示生成的文件 hash 名称，只和该文件的内容有关系:</p><p>比如我们的 <code>index.js</code>，引入了一个 <code>style.css</code>，<code>style.css</code> 有被抽取到一个独立的 css 文件中。这个 css 文件在命名时，如果我们使用的是<code>chunkhash</code>，那么当 <code>index.js</code> 文件的内容发生变化时，css 文件的命名也会发生变化；这个时候我们可以使用 <code>contenthash</code> 。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&#39;./src/main.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./build&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name]_[contenthash]_bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&#39;[contenthash]_chunk.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[contenthash]_[name].css&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function _(w,S){const a=m("ExternalLinkIcon");return v(),b("div",null,[h,s("p",null,[n("Webpack 提供了 "),s("a",g,[n("SplitChunksPlugin"),e(a)]),n(" 默认的配置，chunks 仅仅针对异步请求，可以设置为 initial 或者 all。")]),y,s("p",null,[s("a",x,[n("动态导入"),e(a)]),n(" 有自身的好处，但不可滥用，因为静态框架能更好的初始化依赖，而且更有利于静态分析工具和 "),s("a",j,[n("tree shaking"),e(a)]),n(" 发挥作用。")]),f])}const q=t(k,[["render",_],["__file","webpack03.html.vue"]]);export{q as default};
