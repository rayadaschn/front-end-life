import{_ as p,Z as e,a0 as o,F as c,a1 as l,X as i,Y as u,$ as r}from"./framework-5dd7fabc.js";const k={},n=e,a=o,d=c,t=l,v=r,m=i,b=u,g=v(`<p>在 <a href="JS02">原型_原型链_new 的二三事</a> 中，我们讨论了原型和原型链的实现关系。在本文，我们再来看看如何去实现继承。</p><h2 id="_1-是什么" tabindex="-1"><a class="header-anchor" href="#_1-是什么" aria-hidden="true">#</a> 1. 是什么?</h2><p>我们还是先来看原型的这张神图：</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@main/img/jsobj.jpg" alt="Developer settings" tabindex="0" loading="lazy"><figcaption>Developer settings</figcaption></figure><p>ES6 中有俩条原型链，构造器原型链和实例原型链，原理咱们先不过多讨论。看到的是通过原型链，我们的 <code>Foo()</code> 函数可以继承 <code>Object()</code> 的一些实例属性和方法。其实在 ES6 中的继承就干了俩件事（两条原型链）：</p><blockquote><p>大多数浏览器的 ES5 实现之中，每一个对象都有<code>__proto__</code>属性，指向对应的构造函数的<code>prototype</code>属性。Class 作为构造函数的语法糖，同时有<code>prototype</code>属性和<code>__proto__</code>属性，因此同时存在两条继承链。</p><p>（1）子类的<code>__proto__</code>属性，表示构造函数的继承，总是指向父类。</p><p>（2）子类<code>prototype</code>属性的<code>__proto__</code>属性，表示方法的继承，总是指向父类的<code>prototype</code>属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token constant">B</span><span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token constant">A</span> <span class="token comment">// true</span>
<span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个和构造函数同实例的原型有所不同。</p></blockquote><ul><li><p>把子类构造函数(<code>Child</code>)的原型(<code>__proto__</code>)指向了父类构造函数(<code>Parent</code>) ：</p><p><code>Child.__proto__ = Parent</code></p><p>使得子构造器继承自父构造器的属性和方法。</p></li><li><p>把子类实例 <code>child</code> 的原型对象(<code>Child.prototype</code>) 的原型(<code>__proto__</code>)指向了父类<code>parent</code>的原型对象(<code>Parent.prototype</code>)：</p><p><code>Child.prototype.__proto__ = Parent.prototype</code></p><p>使得子类实例对象能够通过原型链访问到父类原型对象上的属性和方法。</p></li></ul><figure><img src="https://chinese.freecodecamp.org/news/content/images/2021/09/3.png" alt="继承的实际关系" tabindex="0" loading="lazy"><figcaption>继承的实际关系</figcaption></figure><p>对照这张图，我们看的很清楚，这俩步骤（注意实现它们的目的）：</p><ul><li><code>Child.__proto__ = Parent</code></li><li><code>Child.prototype.__proto__ = Parent.prototype</code></li></ul><p>那么我们如何来实现这俩个操作呢？关键点在于修改 <code>__proto__</code> 属性。能够修改这个的其实一共就 3 个:</p><ol><li><p><strong><code>new</code></strong> 操作符，内部会创建修改 <code>__proto__</code> 属性；</p></li><li><p><code>Object.create(proto, [propertiesObject])</code> 方法创建一个新对象，使用现有的对象来提供新创建的对象的 <code>__proto__</code> 。 它接收两个参数，不过第二个可选参数是属性描述符（不常用，默认是<code>undefined</code>）。(ES5 新增)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 内部简易实现, 实际上原理就是 原型式继承</span>
Object<span class="token punctuation">.</span><span class="token function-variable function">myCreate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">proto<span class="token punctuation">,</span> properties</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> proto <span class="token comment">// 继承父集</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span><span class="token constant">F</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> bar <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">myCreate</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">parentProperty</span><span class="token operator">:</span> <span class="token number">955</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">myProperty</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">999</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Object.setPrototypeOf(obj, prototype)</code> 方法设置一个指定的对象的原型 ( 即, 内部<code>[[Prototype]]</code>属性）到另一个对象或 <code>null</code>。(ES6 提供)</p></li></ol><p>以上方案，咱先按下不表。未能理解，可以继续往下看，而后再回来理解。</p><h2 id="_2-继承方案实现" tabindex="-1"><a class="header-anchor" href="#_2-继承方案实现" aria-hidden="true">#</a> 2. 继承方案实现</h2><p>明白上述的方法前提后，我们可以进行具体实现了。</p><h3 id="_2-1-原型链实现继承" tabindex="-1"><a class="header-anchor" href="#_2-1-原型链实现继承" aria-hidden="true">#</a> 2.1 原型链实现继承</h3><p>关键点： 子类型的原型为父类型的一个实例对象。即 <code>Child.prototype = new Parent()</code></p><p>缺点：</p><ol><li>不同的 <code>Child</code> 实例的 <code>__proto__</code> 会引用同一 <code>Parent</code> 的实例。</li><li>子构造函数在实例化的时候，不能给父构造函数传参数。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;唱歌&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Parent 的原型方法</span>

<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 让Son继承Patent 的关键点</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;black&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">//[ &#39;red&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;black&#39; ]</span>
instance1<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 能够调用 Parent 的原型方法</span>

<span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 新创建的 Son 保留了上一 Son 的修改结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">//[ &#39;red&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;black&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-构造函数继承-盗用构造函数" tabindex="-1"><a class="header-anchor" href="#_2-2-构造函数继承-盗用构造函数" aria-hidden="true">#</a> 2.2 构造函数继承(盗用构造函数)</h3><p>构造函数继承有很多别名: 盗用构造函数、构造函数绑定、经典继承等等。实现的关键点其实很简单，就是<strong>通过 <code>call</code> 或者 <code>apply</code> 在子构造函数内<u>执行</u>父构造函数</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// .....</span>
  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点: 解决了原型链中，每个 <code>Son</code> 实例共用同一 <code>Parent</code> 实例属性的问题，以及 子构造函数在实例化的时候，不能给父构造函数传参数的问题。</p><p>缺点：只是实现了实例属性继承，<strong><code>Parent</code> 原型的方法在 <code>Child</code> 实例中并不可用。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Patent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token class-name">Patent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;唱歌&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 原型方法</span>

<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 继承Patent</span>
  <span class="token function">Patent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
  <span class="token comment">// Son实例属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">15</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span>
instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;black&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">)</span> <span class="token comment">// { age:15, colors:[&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;black&#39;], name:&quot;张三&quot;}</span>

<span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span> <span class="token comment">// { age:15, colors:[&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;], name:&quot;李四&quot;}</span>

<span class="token comment">// 不足点</span>
<span class="token keyword">let</span> instance3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Patent</span><span class="token punctuation">(</span><span class="token string">&#39;parent&#39;</span><span class="token punctuation">)</span>
instance3<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// instance1.sing(); // 报错: 无 Parent 的原型方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-组合继承-盗用构造函数" tabindex="-1"><a class="header-anchor" href="#_2-3-组合继承-盗用构造函数" aria-hidden="true">#</a> 2.3 组合继承（盗用构造函数）</h3><p><strong>组合继承</strong>结合了<strong>原型链继承</strong>和<strong>盗用构造函数</strong>，将两者的优点结合到了一起。基本思路是使用原型链继承原型上的属性和方法，通过<strong>盗用构造函数</strong>继承实例属性。</p><p>实现关键点:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">args1<span class="token punctuation">,</span> args2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>args1 <span class="token operator">=</span> args2
  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args1<span class="token punctuation">)</span> <span class="token comment">// 在 Child 的构造函数中执行 Parent 的构造函数</span>
<span class="token punctuation">}</span>
<span class="token comment">// Child.__proto__ 也会存在同样的 Parent 的实例属性,且所有的 Child 实例的 __proto__ 都指向同一内存地址</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 重写原型,但导致默认 constructor 丢失</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constrcutor <span class="token operator">=</span> Child <span class="token comment">// 指回自身, 修复constructor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token comment">// 继承Patent, 调用一次</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Patent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用第二次</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son <span class="token comment">// 指回自身, 修复constructor</span>

<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>
instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;black&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">//[ &#39;red&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;black&#39; ]</span>
instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 张三 =&gt; Parent 的原型方法</span>
instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 19   =&gt; 自身原型方法</span>

<span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// [ &#39;red&#39;, &#39;blue&#39;, &#39;green&#39; ] =&gt; 未改变</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面可以看出，组合式继承已经解决了绝大部分问题，但是还有有一点点不足之处：</p><ol><li><strong>父构造函数的实例属性依然会存在于 子构造函数 的原型上</strong>，虽然访问时会被子构造函数的同名实例属性所覆盖；</li><li>继承过程中执行了两次 <code>Parent</code> ,第一次 <code>call</code> 和第二次 <code>new</code> 。</li></ol><p>关于<strong>第一点</strong>有一点点绕，我们回看代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Child.__proto__ 继承 Parent 的实例属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在关键步骤中，我们将子构造函数 <code>Child</code> 的原型 指向了 <code>new Parent()</code>，我们再回顾一下 <code>new</code> 创建 对象/实例 的过程，在 <a href="JS02">原型_原型链_new 的二三事</a> 中我们说过，这个过程一共分为四步：</p><ul><li>首先创建一个空对象，这个空对象将会作为执行构造函数(<code>constructor</code>)之后的返回的对象实例。</li><li>对创建的空对象的原型(<code>newObj.__proto__</code>)指向构造函数的原型属性(<code>Function.prototype</code>)。</li><li>将这个空对象赋值给构造函数内部的 this，并执行构造函数逻辑。</li><li>依据构造函数执行逻辑，返回第一步所创建的对象或构造函数的显示返回值（必须是对象）。</li></ul><p>也就是说，<code>new</code> 关键字创建出来的对象会保存原构造函数的属性。回看第一节，我们再这步的过程实际上仅仅只是需要将 <strong><code>Child.prototype.__proto__</code></strong> 指向 构造函数的原型对象 <strong><code>Parent.prototype</code></strong> ！！！（请好好理解一下这句话，对照第一节中第二张指向图）</p><p>对照第一节第一张神图的简单的解释:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 父构造函数</span>
<span class="token keyword">let</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
f1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype <span class="token comment">// 此时有该对应关系</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上可以自行验证。</p><p>回归正题，我们现在仅仅需要 <code>Child.prototype.__proto__ = Parent.prototype</code> 这样的的转变，这步在 <code>new</code> 构造函数中在第二步完成，但是 <code>new</code> 还会继续执行 第三步：<strong>将这个空对象赋值给构造函数内部的 this，并执行构造函数逻辑。</strong> 所以，这一步其实是多余的。</p><p>所以，我们可以用 第一节中提到的，ES5 新规中的 <code>Object.create(proto, [propertiesObject])</code> 来解决。它的效果如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span>
<span class="token comment">// 核心原理如下:</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span>
<span class="token comment">// 此方法等效于 obj.__proto__ = Parent</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Object.setPrototypeOf</code> 后面还会出场，咱继续按下不表，只需知道里面有这个就行。</p><p>直接就完成了原型的转变，没有了 <code>new</code> 过程中的“副作用”。</p><h3 id="_2-4-较为完善的组合继承" tabindex="-1"><a class="header-anchor" href="#_2-4-较为完善的组合继承" aria-hidden="true">#</a> 2.4 较为完善的组合继承</h3><p>通过上面的理解，我们可以得到最终的组合继承方案，将 <strong>盗用构造函数</strong> 中的 <code>new</code> 构造函数这一步用 ES5 中的 <code>Object.create(proto, [propertiesObject])</code> 进行代替。不仅解决了 父构造函数的实例属性存在于 子构造函数 的原型上的问题，还无需 执行 <code>Parent</code> 构造函数两遍。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token comment">// 继承Patent</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token comment">// Son.prototype = new Patent(); // 用 Object.create() 代替</span>
<span class="token comment">// 等效于 Son.prototype.__proto__ == Patent.prototype</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 继承Parent原型上的属性, 即重写原型,但导致默认 constructor 丢失</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son <span class="token comment">// 指回自身, 修复constructor</span>

<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种继承方式，已经很完美了，但是还是有一些小问题，但是都在现在的 <code>class</code> 中给修复了。</p><p>如静态属性和静态方法，在此时仍旧没能实现。看效果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// es5 中</span>
<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义静态属性</span>
Parent<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">50</span>
<span class="token comment">// 定义静态方法</span>
Parent<span class="token punctuation">.</span><span class="token function-variable function">sayWord</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> word
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token comment">// 继承Parent</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token comment">// 继承父类的原型方法+原型属性</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 继承Parent原型上的属性</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son <span class="token comment">// 指回自身</span>

<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>
instance<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;black&#39;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Parent<span class="token punctuation">.</span><span class="token function">sayWord</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// print hello world</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Son<span class="token punctuation">.</span><span class="token function">sayWord</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 未获取到静态方法</span>
<span class="token comment">// print TypeError: Son.sayWord is not a function</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">sayWord</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  实例 更 无法获取到静态方法</span>
<span class="token comment">// print TypeError: instance.sayWord is not a function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-最终的组合式继承" tabindex="-1"><a class="header-anchor" href="#_2-5-最终的组合式继承" aria-hidden="true">#</a> 2.5 最终的组合式继承</h3><p>那如何继承构造函数 <code>Parent</code> 中的静态方法呢? 其实很简单嘛，直接 <code>Child.__proto__ = Parent</code> 就行了。需要注意的是 <code>__proto__</code> 是最先在浏览器上支持，现在已在 ES6 中被引入。</p><p>或者使用 ES6 的另一语法，即第一节中提到的 <code>Object.setPrototypeOf(obj, prototype)</code> 方法设置一个指定的对象的原型 ( 即, 内部<code>[[Prototype]]</code>属性）到另一个对象或 <code>null</code>。即： <code>Object.setPrototypeOf(Child, Parent)</code> ，就完成了静态属性/方法 继承。</p><p>没看明白对不对? 一句话 <code>Object.setPrototypeOf(Child, Parent)</code> 等效于 <code>Child.__proto__ = Parent</code> 。</p><p>另外，对于原型(<code>__proto__</code>) 和 构造函数原型对象(<code>Foo.Prototype</code>)的关系区别。可见 <a href="JS02">原型_原型链_new 的二三事</a> 。</p><p>ψ(｀ ∇´)ψ ，看最后的封装代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义静态属性</span>
Parent<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">50</span>
<span class="token comment">// 定义静态方法</span>
Parent<span class="token punctuation">.</span><span class="token function-variable function">sayWord</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> word
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token comment">// 1. 继承Parent</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token comment">// 继承父类的原型方法+原型属性</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 2. 继承Parent原型上的属性</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son <span class="token comment">// 3. 指回自身</span>

<span class="token comment">// 4. 静态属性/方法 继承</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>setPrototypeOf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// es6 中支持</span>
  Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>Son<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Son<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 浏览器中支持</span>
  Object<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Parent
<span class="token punctuation">}</span>

<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Parent<span class="token punctuation">.</span><span class="token function">sayWord</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// print hello world</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Son<span class="token punctuation">.</span><span class="token function">sayWord</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// print hello world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>希望，你看完能够有所收获。谢谢你的时间。</p><h2 id="引用资料" tabindex="-1"><a class="header-anchor" href="#引用资料" aria-hidden="true">#</a> 引用资料</h2>`,63),y={href:"https://es6.ruanyifeng.com/#docs/class-extends",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.freecodecamp.org/chinese/news/inheritance-in-js/",target:"_blank",rel:"noopener noreferrer"};function f(h,w){const s=d("ExternalLinkIcon");return m(),b("div",null,[g,n("ul",null,[n("li",null,[n("a",y,[a("《ES6 入门》"),t(s)])]),n("li",null,[n("a",_,[a("一文看懂 JS 的继承"),t(s)])])])])}const j=p(k,[["render",f],["__file","JS05.html.vue"]]);export{j as default};
