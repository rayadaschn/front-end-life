const n=JSON.parse(`{"key":"v-59c54745","path":"/OneMoreThing/interview/03.html","title":"Interview -- ajax 相关问题","lang":"zh-CN","frontmatter":{"title":"Interview -- ajax 相关问题","icon":"note","date":"2023-08-09T00:00:00.000Z","category":["anonymous"],"tag":["note"],"star":false,"sticky":false},"headers":[{"level":2,"title":"fetch 函数","slug":"fetch-函数","link":"#fetch-函数","children":[]},{"level":2,"title":"使用 XMLHttpRequest 对象","slug":"使用-xmlhttprequest-对象","link":"#使用-xmlhttprequest-对象","children":[]},{"level":2,"title":"解释 jsonp 原理，为什么不是真正的 ajax？","slug":"解释-jsonp-原理-为什么不是真正的-ajax","link":"#解释-jsonp-原理-为什么不是真正的-ajax","children":[]}],"git":{"createdTime":1705126883000,"updatedTime":1705126883000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.66,"words":1397},"filePathRelative":"OneMoreThing/interview/03.md","localizedDate":"2023年8月9日","excerpt":"<p>虽然主题是手写 ajax，但是主要还是梳理一下前端流浪器发起数据请求的几种方法。</p>\\n<h2> fetch 函数</h2>\\n<p>当前主要流行的是使用浏览器提供的 fetch 函数，<code>fetch</code> 是浏览器提供的现代化的网络请求 API，它基于 Promise，支持异步操作。使用 <code>fetch</code> 函数可以发送 HTTP 请求并接收响应。</p>\\n<p>以下是使用 <code>fetch</code> 函数发送 GET 请求的示例：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token function\\">fetch</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'https://api.example.com/data'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">response</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">json</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">data</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 处理返回的数据</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">catch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">error</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 处理错误</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">error</span><span class=\\"token punctuation\\">(</span>error<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{n as data};
