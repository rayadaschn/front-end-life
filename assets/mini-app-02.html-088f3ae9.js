import{_ as t,X as e,Y as n,$ as l}from"./framework-97fa2d96.js";const a={},d=l,i=e,r=n,c=d('<h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h2><p>不同的技术对应不同的应用场景，下面是小程序、APP 和 H5 的比较</p><table><thead><tr><th style="text-align:center;">运行载体</th><th style="text-align:center;">运行环境</th><th style="text-align:center;">功能性</th><th style="text-align:center;">便捷性</th><th style="text-align:center;">交互体验</th><th style="text-align:center;">开发成本</th><th style="text-align:center;">推广难度</th><th style="text-align:center;">消息推送</th></tr></thead><tbody><tr><td style="text-align:center;">小程序</td><td style="text-align:center;">微信</td><td style="text-align:center;">轻应用</td><td style="text-align:center;">无需安装</td><td style="text-align:center;">解决原生 APP</td><td style="text-align:center;">中</td><td style="text-align:center;">低</td><td style="text-align:center;">受限</td></tr><tr><td style="text-align:center;">公众号</td><td style="text-align:center;">H5</td><td style="text-align:center;">简单</td><td style="text-align:center;">无需安装</td><td style="text-align:center;">一般</td><td style="text-align:center;">低</td><td style="text-align:center;">低</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;">APP</td><td style="text-align:center;">原生系统</td><td style="text-align:center;">丰富</td><td style="text-align:center;">需要安装</td><td style="text-align:center;">最流畅</td><td style="text-align:center;">高</td><td style="text-align:center;">高</td><td style="text-align:center;">支持</td></tr></tbody></table><p>为什么会快？这个实际上和小程序的架构有关。</p><p>传统的 Web 技术在做页面渲染时，页面的逻辑执行脚本和页面 DOM 渲染是共用同一个线程。因此，业务逻辑和 UI 渲染常常相互抢占资源，容易出现性能问题。</p><p>而小程序是采用了 Hybrid 技术，使用的是混合开发模式。界面采用 Web 技术渲染，再将客户端原生能力封装成接口供开发者调用，并通过双线程模型分离界面渲染和逻辑处理，从而提高小程序的渲染性能和管控安全。</p><h2 id="小程序的生命周期" tabindex="-1"><a class="header-anchor" href="#小程序的生命周期" aria-hidden="true">#</a> 小程序的生命周期</h2><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202307041625994.png" alt="小程序的生命周期" tabindex="0" loading="lazy"><figcaption>小程序的生命周期</figcaption></figure><p>如上图所示，一个完整的小程序生命周期实际上包括<strong>组件生命周期</strong>和<strong>页面生命周期</strong>两部分。</p><ul><li>一个微信小程序启动后，首次加载页面，会触发页面的 onLoad 事件（这个事件只会在页面首次加载时才会触发）；</li><li>当页面显示的时候会触发 onShow 事件，若这个页面是首次渲染完成，则会接着触发 onReady 事件；</li><li>若将小程序切换到后台，页面就会被隐藏同时触发 onHide 事件；下次从后台切换到前台时，则会再次触发 onShow 事件。</li><li>最后，当页面被回收销毁时，会触发 onUnload 事件。</li></ul><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2><ul><li>《小程序开发原理与实战》</li></ul>',12),s=[c];function g(h,o){return i(),r("div",null,s)}const y=t(a,[["render",g],["__file","mini-app-02.html.vue"]]);export{y as default};
