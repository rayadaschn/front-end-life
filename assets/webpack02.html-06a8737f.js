import{_ as t,V as o,W as c,X as n,Y as s,Z as e,$ as p,F as l}from"./framework-2060dede.js";const i={},r=n("h1",{id:"webpack-开发服务端配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webpack-开发服务端配置","aria-hidden":"true"},"#"),s(" Webpack 开发服务端配置")],-1),u=n("h2",{id:"起步-设置一个新的-webpack-项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#起步-设置一个新的-webpack-项目","aria-hidden":"true"},"#"),s(" 起步: 设置一个新的 Webpack 项目")],-1),d={href:"https://webpack.docschina.org/api/cli/#init",target:"_blank",rel:"noopener noreferrer"},k=p(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx webpack init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果尚未在项目或全局安装 <code>@webpack-cli/generators</code>，npx 可能会提示你安装。根据在配置生成过程中的选择，也可能会安装额外的 package 到项目中。</p><p>生成的目录文档：</p><div class="language-tree line-numbers-mode" data-ext="tree"><pre class="language-tree"><code>.
├── README.md
├── index.html
├── package-lock.json
├── package.json
├── src
│   └── index.js
└── webpack.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析-package-json" tabindex="-1"><a class="header-anchor" href="#解析-package-json" aria-hidden="true">#</a> 解析 package.json</h2><p>查看项目前，先来看一下初始化后的 <code>package.json</code>：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;My webpack project&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-webpack-project&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode=production --node-env=production&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build:dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode=development&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build:prod&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode=production --node-env=production&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;watch&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --watch&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack serve&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们之前运行 <code>npm run build:dev</code> 和 <code>npm run build:prod</code> 等，主要区别在于给 Webpack 传递的 <code>mode</code> 参数不同。实际上，配置对象<code>webpack.config.js</code>中也可以设置 mode，只是不太常用，它有做较多预设。</p><table><thead><tr><th style="text-align:left;">mode 选项</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>development</code></td><td style="text-align:left;">会将 <code>DefinePlugin</code> 中 <code>p<wbr>rocess.env.NODE_ENV</code> 的值设置为 <code>development</code>. 为模块和 chunk 启用有效的名。</td></tr><tr><td style="text-align:left;"><code>production</code></td><td style="text-align:left;">会将 <code>DefinePlugin</code> 中 <code>p<wbr>rocess.env.NODE_ENV</code> 的值设置为 <code>production</code>。为模块和 chunk 启用确定性的混淆名称，<code>FlagDependencyUsagePlugin</code>，<code>FlagIncludedChunksPlugin</code>，<code>ModuleConcatenationPlugin</code>，<code>NoEmitOnErrorsPlugin</code> 和 <code>TerserPlugin</code> 。</td></tr><tr><td style="text-align:left;"><code>none</code></td><td style="text-align:left;">不使用任何默认优化选项</td></tr></tbody></table><p>如果没有设置，webpack 会给 <code>mode</code> 的默认值设置为 <code>production</code>。</p><h2 id="配置-webpack-config-js" tabindex="-1"><a class="header-anchor" href="#配置-webpack-config-js" aria-hidden="true">#</a> 配置 webpack.config.js</h2><p>先来看一下基础初始化配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> WorkboxWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;workbox-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> isProduction <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isProduction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        config<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WorkboxWebpackPlugin<span class="token punctuation">.</span>GenerateSW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        config<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>config</code> 中主要配置了入口和出口。但我们主要用到的还是 <code>devServer</code>、<code>plugins</code>和 <code>module</code>这三个相关配置。</p><h3 id="devserver-配置" tabindex="-1"><a class="header-anchor" href="#devserver-配置" aria-hidden="true">#</a> devServer 配置</h3>`,15),v=n("code",null,"devServer",-1),b={href:"https://webpack.docschina.org/configuration/dev-server/",target:"_blank",rel:"noopener noreferrer"},m=p(`<ul><li><p><code>devServer.static</code>: 该配置项允许配置从目录提供静态文件的选项（默认是 <code>&#39;public&#39;</code> 文件夹）。将其设置为 <code>false</code> 以禁用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// static: [&#39;assets&#39;, &#39;css&#39;], // 配置多个静态资源路径</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>它的主要作用是如果我们打包后的资源，又依赖于其他的一些资源，那么就需要指定从该定义的路径中查找相关内容。</strong></p></li><li><p><code>devServer.hotOnly</code>: <code>hotOnly</code>是当代码编译失败时，是否刷新整个页面:</p><ul><li><p>默认情况下当代码编译失败修复后，我们会重新刷新整个页面;</p></li><li><p>如果不希望重新刷新整个页面，可以设置 hotOnly 为 true;</p></li></ul></li><li><p><code>devServer.host</code>: host 设置主机地址: 默认值是<code>localhost</code>; 如果希望其他地方也可以访问，可以设置为 <code>0.0.0.0</code>;</p><blockquote><p><strong>localhost</strong> <strong>和</strong> <strong>0.0.0.0</strong> **的区别:</p><ul><li><p><code>localhost</code>:本质上是一个域名，通常情况下会被解析成<code>127.0.0.1</code>;</p></li><li><p><code>127.0.0.1</code>:回环地址(Loop Back Address)，表达的意思其实是我们主机自己发出去的包，直接被自己接收;</p><ul><li><p>正常的数据库包经常 应用层 - 传输层 - 网络层 - 数据链路层 - 物理层 ;</p></li><li><p>而回环地址，是在网络层直接就被获取到了，是不会经常数据链路层和物理层的; ✓ 比如我们监听 <code>127.0.0.1</code>时，在同一个网段下的主机中，通过 ip 地址是不能访问的;</p></li></ul></li><li><p><code>0.0.0.0</code>:监听 IPV4 上所有的地址，再根据端口找到不同的应用程序;</p><ul><li>比如我们监听 <code>0.0.0.0</code>时，在同一个网段下的主机中，通过 ip 地址是可以访问的;</li></ul></li></ul></blockquote></li><li><p><code>devServer.open</code>: 设置是否打开浏览器，默认<code>false</code>。</p></li><li><p><code>devServer.compress</code>: 是否为静态文件开启 <code>gzip compression</code>，默认值是 false。</p></li><li><p><code>devServer.proxy</code>: <strong>设置代理解决跨域访问的问题</strong> :</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;public&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// host: &#39;0.0.0.0&#39;,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:9000&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 目标地址</span>
        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 默认情况下，/api 也会被写入到URL中，如果希望删除，可以使用pathRewrite;</span>
          <span class="token string-property property">&#39;^/api&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 表示是否更新代理后请求的headers中host地址,一般设置为true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">historyApiFallback</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>关于<strong>changeOrigin</strong>，若不设置，默认情况下请求访问会使用 8000 的端口号进行数据请求。若改为 true，则使用自定义的端口号。</p></blockquote></li><li><p><code>devServer.historyApiFallback</code>: 解决 SPA 页面在路由跳转之后，进行页面刷新时，返回 404 的错误。</p><p>类型一：Boolean 类型，默认为 false，如果设置为 true，那么在刷新时，返回 404 错误时，会自动返回 <code>index.html</code> 的内容。</p><p>类型 二：Object 类型，可以配置 from 来匹配路径，决定要跳转到哪一个页面。</p></li></ul>`,1);function g(h,y){const a=l("ExternalLinkIcon");return o(),c("div",null,[r,u,n("p",null,[s("Webpack 有大量的配置项，可能会让你不知所措，请利用 "),n("a",d,[s("webpack-cli 的 init 命令"),e(a)]),s("，它可以根据你的项目需求快速生成 webpack 配置文件，它会在创建配置文件之前询问你几个问题。")]),k,n("p",null,[v,s(" 顾名思义，就是本地开发服务器。内置了相当多的配置，具体可以查看 webpack "),n("a",b,[s("官网"),e(a)]),s("。举例几个常用的配置。")]),m])}const w=t(i,[["render",g],["__file","webpack02.html.vue"]]);export{w as default};
