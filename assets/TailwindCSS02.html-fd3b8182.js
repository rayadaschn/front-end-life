import{_ as t,X as e,Y as l,$ as n}from"./framework-5dd7fabc.js";const a={},s=n,i=e,d=l,r=s(`<h1 id="tailwind-布局" tabindex="-1"><a class="header-anchor" href="#tailwind-布局" aria-hidden="true">#</a> Tailwind 布局</h1><blockquote><p>本节梳理记录一些 Tailwind 常用的布局书写方式。</p><p>内容较多，无需一次性全部记忆，但要有所印象。</p></blockquote><h2 id="总结规律" tabindex="-1"><a class="header-anchor" href="#总结规律" aria-hidden="true">#</a> 总结规律</h2><ul><li><code>box-sizing</code> 盒子模型：盒子模型以 <code>box</code> 开头表示盒子模型，而后跟随盒子模型的边界，如<code>box-border</code>表示以 border 为边界的盒子模型，对应<code>box-sizing: border-box;</code>;</li><li><code>display</code> 布局：除 <code>display: none</code> 的类名为 <code>hidden</code> 外，其余类名基本为 display 的取值本身。</li><li><code>float</code> 浮动：直接用 <code>-</code> 将 float 和取值进行连接即可，如 <code>float-left</code> 类名表示 <code>float: left;</code>。</li><li><code>position</code> 定位：position 的取值本身；</li><li>定位位置：通用公式为 <code>{top|right|bottom|left|inset}-{number}</code>，若是负值，减号在类名前面；</li><li>visibility 可见性：取值本身，直接写 <code>visible</code> 或 <code>invisible</code>；</li><li><code>z-index</code> 层叠顺序：通用公式为<code>z-{indexNumber}</code>，若为负则负号在前；</li><li><code>flex</code> 弹性盒子： <ul><li>整体方向和是否换行，通用公式为 <code>flex-{direction|wrap}</code>；</li><li>content 的整体对齐方向布局，通用公式为 <code>{justify|content}-{value}</code> 分别表示 <code>justify-content</code> 水平方向整体布局和 <code>align-content</code> 垂直方向整体布局;</li><li>items 的单行沿容器垂直对齐方向，通用公式为 <code>item-{value}</code>；</li><li>align 的单个子项沿容器的垂直对齐方向，通用公式为 <code>align-{value}</code>；</li><li>flex 弹性缩放属性，通用公式为 <code>flex-{initial|0|none|1|auto}</code>；</li></ul></li></ul><h2 id="容器" tabindex="-1"><a class="header-anchor" href="#容器" aria-hidden="true">#</a> 容器</h2><p>容器同上一小节中介绍的断点是一样的，这里同布局的内容更贴切，因此再做总结。</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Breakpoint</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">container</td><td style="text-align:left;">None</td><td style="text-align:left;">width: 100%;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">sm (640px)</td><td style="text-align:left;">max-width: 640px;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">md (768px)</td><td style="text-align:left;">max-width: 768px;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">lg (1024px)</td><td style="text-align:left;">max-width: 1024px;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">xl (1280px)</td><td style="text-align:left;">max-width: 1280px;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">2xl (1536px)</td><td style="text-align:left;">max-width: 1536px;</td></tr></tbody></table><ul><li><p>容器居中：<code>mx-auto</code></p></li><li><p>添加水平内边距：<code>px-{size}</code></p></li><li><p>响应式变体，如只在某个断点上表现出差异：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- Full-width fluid until the \`md\` breakpoint, then lock to container --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>md:container md:mx-auto<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- ... --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>自定义容器在默认情况下居中。通过配置 <code>theme.container</code> 部分将 <code>center</code> 设置为 <code>true</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// tailwind.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">center</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="box-sizing-盒子模型" tabindex="-1"><a class="header-anchor" href="#box-sizing-盒子模型" aria-hidden="true">#</a> Box Sizing 盒子模型</h2><p>设置盒子类型会和原生有一点不同，由 box 开头表示盒子模型，而后跟随盒子模型的边界，如<code>box-border</code>表示以 border 为边界的盒子模型：</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">box-border</td><td style="text-align:left;">box-sizing: border-box;</td></tr><tr><td style="text-align:left;">box-content</td><td style="text-align:left;">box-sizing: content-box;</td></tr></tbody></table><h2 id="display-常用布局" tabindex="-1"><a class="header-anchor" href="#display-常用布局" aria-hidden="true">#</a> Display 常用布局</h2><p>除 <code>display: none</code> 为 <code>hidden</code> 外，其余基本为取值本身。</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>block</strong></td><td style="text-align:left;"><strong>display: block;</strong></td></tr><tr><td style="text-align:left;"><strong>inline-block</strong></td><td style="text-align:left;"><strong>display: inline-block;</strong></td></tr><tr><td style="text-align:left;"><strong>inline</strong></td><td style="text-align:left;"><strong>display: inline;</strong></td></tr><tr><td style="text-align:left;"><strong>flex</strong></td><td style="text-align:left;"><strong>display: flex;</strong></td></tr><tr><td style="text-align:left;">inline-flex</td><td style="text-align:left;">display: inline-flex;</td></tr><tr><td style="text-align:left;">table</td><td style="text-align:left;">display: table;</td></tr><tr><td style="text-align:left;">inline-table</td><td style="text-align:left;">display: inline-table;</td></tr><tr><td style="text-align:left;">table-caption</td><td style="text-align:left;">display: table-caption;</td></tr><tr><td style="text-align:left;">table-cell</td><td style="text-align:left;">display: table-cell;</td></tr><tr><td style="text-align:left;">table-column</td><td style="text-align:left;">display: table-column;</td></tr><tr><td style="text-align:left;">table-column-group</td><td style="text-align:left;">display: table-column-group;</td></tr><tr><td style="text-align:left;">table-footer-group</td><td style="text-align:left;">display: table-footer-group;</td></tr><tr><td style="text-align:left;">table-header-group</td><td style="text-align:left;">display: table-header-group;</td></tr><tr><td style="text-align:left;">table-row-group</td><td style="text-align:left;">display: table-row-group;</td></tr><tr><td style="text-align:left;">table-row</td><td style="text-align:left;">display: table-row;</td></tr><tr><td style="text-align:left;">flow-root</td><td style="text-align:left;">display: flow-root;</td></tr><tr><td style="text-align:left;">grid</td><td style="text-align:left;">display: grid;</td></tr><tr><td style="text-align:left;">inline-grid</td><td style="text-align:left;">display: inline-grid;</td></tr><tr><td style="text-align:left;">contents</td><td style="text-align:left;">display: contents;</td></tr><tr><td style="text-align:left;">list-item</td><td style="text-align:left;">display: list-item;</td></tr><tr><td style="text-align:left;"><strong>hidden</strong></td><td style="text-align:left;"><strong>display: none;</strong></td></tr></tbody></table><h2 id="float-浮动" tabindex="-1"><a class="header-anchor" href="#float-浮动" aria-hidden="true">#</a> float 浮动</h2><p>浮动在现代布局中用的较少了，但是也有其存在的必要。浮动较为好记，直接用 <code>-</code> 对 float 的取值进行连接即可。</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">float-right</td><td style="text-align:left;">float: right;</td></tr><tr><td style="text-align:left;">float-left</td><td style="text-align:left;">float: left;</td></tr><tr><td style="text-align:left;">float-none</td><td style="text-align:left;">float: none;</td></tr></tbody></table><p>有浮动，自然也有清除浮动，记忆方法同上，但一般都是用 <code>clear-both</code>：</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">clear-left</td><td style="text-align:left;">clear: left;</td></tr><tr><td style="text-align:left;">clear-right</td><td style="text-align:left;">clear: right;</td></tr><tr><td style="text-align:left;">clear-both</td><td style="text-align:left;">clear: both;</td></tr><tr><td style="text-align:left;">clear-none</td><td style="text-align:left;">clear: none;</td></tr></tbody></table><h2 id="position-定位" tabindex="-1"><a class="header-anchor" href="#position-定位" aria-hidden="true">#</a> Position 定位</h2><p>Position 定位非常便捷，直接书写 potion 的值即可：</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">static</td><td style="text-align:left;">position: static;</td></tr><tr><td style="text-align:left;">fixed</td><td style="text-align:left;">position: fixed;</td></tr><tr><td style="text-align:left;">absolute</td><td style="text-align:left;">position: absolute;</td></tr><tr><td style="text-align:left;">relative</td><td style="text-align:left;">position: relative;</td></tr><tr><td style="text-align:left;">sticky</td><td style="text-align:left;">position: sticky;</td></tr></tbody></table><h2 id="top-right-bottom-left" tabindex="-1"><a class="header-anchor" href="#top-right-bottom-left" aria-hidden="true">#</a> Top / Right / Bottom / Left</h2><p>控制定位元素的位置，这个类名较多一般是根据元素值去查表，推荐 VScode 插件来进行书写。</p><p>通用公式：<code>{top|right|bottom|left|inset}-{number}</code></p><p>若是负值，减号在类名前面：<code>-{top|right|bottom|left|inset}-{number|string}</code></p><h2 id="visibility-可见性" tabindex="-1"><a class="header-anchor" href="#visibility-可见性" aria-hidden="true">#</a> visibility 可见性</h2><p>同定位元素一样，直接书写 visibility 的值：</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">visible</td><td style="text-align:left;">visibility: visible;</td></tr><tr><td style="text-align:left;">invisible</td><td style="text-align:left;">visibility: hidden;</td></tr></tbody></table><p>区别于 <code>display: none</code>，DOM 元素依旧会存在但是不显示。</p><h2 id="z-index-层叠顺序" tabindex="-1"><a class="header-anchor" href="#z-index-层叠顺序" aria-hidden="true">#</a> z-index 层叠顺序</h2><p>层叠顺序也较好记忆：<code>z-{index}</code></p><h2 id="flex-弹性盒子" tabindex="-1"><a class="header-anchor" href="#flex-弹性盒子" aria-hidden="true">#</a> flex 弹性盒子</h2><p>如上文 Position 所写一样，首先父元素要先设置为 <code>fixed</code>，变为弹性盒子。</p><p>弹性盒子共分为俩部分，父元素控制整体布局，子元素控制元素细节。可见 <a href="FlexboxLayoutTechniques">《弹性布局 Flex》</a></p><h3 id="父元素整体布局设置" tabindex="-1"><a class="header-anchor" href="#父元素整体布局设置" aria-hidden="true">#</a> 父元素整体布局设置</h3><p>先回顾一下原先到布局设置:</p><ol><li><p><strong>flex-direction</strong> 属性与整体布局方向。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">flex-direction</span><span class="token punctuation">:</span> row | row-reverse | column | column-reverse<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>flex-wrap</strong> 属性与整体布局的换行表现。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap | wrap | wrap-reverse<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>flex-flow</strong> 属性是 <strong>flex-direction</strong> 和 flex-wrap 的缩写。</p></li></ol><ul><li><p>在 Tailwind 中 flex 控制子项的方向 flex-direction 变化较大，直接省略了 direction 转而拼接值；此外 column 也采用缩写 col。通用公式为<code>flex-{direction}</code>：</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">flex-row</td><td style="text-align:left;">flex-direction: row;</td></tr><tr><td style="text-align:left;">flex-row-reverse</td><td style="text-align:left;">flex-direction: row-reverse;</td></tr><tr><td style="text-align:left;">flex-col</td><td style="text-align:left;">flex-direction: column;</td></tr><tr><td style="text-align:left;">flex-col-reverse</td><td style="text-align:left;">flex-direction: column-reverse;</td></tr></tbody></table></li><li><p>控制整体是否换行 flex-wrap 同 direction 一样是略去 wrap 关键词直接拼接值。通用公式为<code>flex-{wrap}</code>：</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">flex-wrap</td><td style="text-align:left;">flex-wrap: wrap;</td></tr><tr><td style="text-align:left;">flex-wrap-reverse</td><td style="text-align:left;">flex-wrap: wrap-reverse;</td></tr><tr><td style="text-align:left;">flex-nowrap</td><td style="text-align:left;">flex-wrap: nowrap;</td></tr></tbody></table></li></ul><h3 id="对齐特性" tabindex="-1"><a class="header-anchor" href="#对齐特性" aria-hidden="true">#</a> 对齐特性</h3><p>实际上，Tailwind 对齐这一部分同 Grid 网格布局是同享的，先看原先对齐的几个属性值：</p><ol><li><p><strong>justify-content</strong> 属性与整体布局的水平对齐</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">justify-content</span><span class="token punctuation">:</span> normal | flex-start | flex-end | center | space-between |
  space-around | space-evenly<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>垂直对齐属性 <strong>align-items</strong> 与 <strong>align-self</strong></p><p><strong>区别:</strong> <strong>align-self</strong>属性是设置在具体的<strong>某一个 flex 子项</strong>上的，而<strong>align-items</strong>属性是设置<strong>在 flex 容器元素上</strong>的，控制所有 flex 子项的垂直对齐方式。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">align-items</span><span class="token punctuation">:</span> stretch | flex-start | flex-end | center | baseline<span class="token punctuation">;</span>

<span class="token property">align-self</span><span class="token punctuation">:</span> auto | stretch | flex-start | flex-end | center | baseline<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>auto</strong>是<strong>align-self 属性的默认值</strong>，表示 flex 子项的垂直对齐 方式是由 flex 容器的 align-items 属性值决定的。</li><li><strong>stretch</strong>可以看成弹性布局中<strong>align-items 属性的默认值</strong>，表示 flex 子项在垂直方向上拉伸。</li></ul></li><li><p><strong>align-content</strong> 属性与整体布局的垂直对齐</p><p><strong>区别:</strong> <strong>align-content</strong> 属性和 <strong>align-items</strong> 属性的区别在于 <strong>align-items</strong> 属性设置的是每一个 <strong>flex</strong> 子项的垂直对齐方式，而 <strong>align-content</strong> 属性将 <strong>所有 flex 子项作为一个整体进行垂直对齐设置</strong>。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">align-content</span><span class="token punctuation">:</span> stretch | flex-start | flex-end | center | space-between |
  space-around | space-evenly<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>order</strong> 属性与单个子项的顺序控制</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">order</span><span class="token punctuation">:</span> &lt;integer&gt;<span class="token punctuation">;</span> <span class="token comment">/* 整数值，默认值是 0 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>在 Tailwind 中有如下变动:</p><ul><li><p>justify-content 用于 flex 和 grid 沿容器整体布局的水平对齐方向：</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">justify-start</td><td style="text-align:left;">justify-content: flex-start;</td></tr><tr><td style="text-align:left;">justify-end</td><td style="text-align:left;">justify-content: flex-end;</td></tr><tr><td style="text-align:left;">justify-center</td><td style="text-align:left;">justify-content: center;</td></tr><tr><td style="text-align:left;">justify-between</td><td style="text-align:left;">justify-content: space-between;</td></tr><tr><td style="text-align:left;">justify-around</td><td style="text-align:left;">justify-content: space-around;</td></tr><tr><td style="text-align:left;">justify-evenly</td><td style="text-align:left;">justify-content: space-evenly;</td></tr></tbody></table></li><li><p>align-content 用于 flex 和 grid 多行沿容器整体布局的垂直对齐方向：</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">content-center</td><td style="text-align:left;">align-content: center;</td></tr><tr><td style="text-align:left;">content-start</td><td style="text-align:left;">align-content: flex-start;</td></tr><tr><td style="text-align:left;">content-end</td><td style="text-align:left;">align-content: flex-end;</td></tr><tr><td style="text-align:left;">content-between</td><td style="text-align:left;">align-content: space-between;</td></tr><tr><td style="text-align:left;">content-around</td><td style="text-align:left;">align-content: space-around;</td></tr><tr><td style="text-align:left;">content-evenly</td><td style="text-align:left;">align-content: space-evenly;</td></tr></tbody></table></li><li><p>align-items 用于 flex 和 grid 各单行沿容器整体布局的垂直对齐方向，通用公式为 <code>item-{value}</code>；：</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">items-start</td><td style="text-align:left;">align-items: flex-start;</td></tr><tr><td style="text-align:left;">items-end</td><td style="text-align:left;">align-items: flex-end;</td></tr><tr><td style="text-align:left;">items-center</td><td style="text-align:left;">align-items: center;</td></tr><tr><td style="text-align:left;">items-baseline</td><td style="text-align:left;">align-items: baseline;</td></tr><tr><td style="text-align:left;">items-stretch</td><td style="text-align:left;">align-items: stretch;</td></tr></tbody></table></li><li><p>align-self 用于 flex 和 grid 单个子项沿容器的垂直对齐方向，通用公式为 <code>align-{value}</code>：</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">self-auto</td><td style="text-align:left;">align-self: auto;</td></tr><tr><td style="text-align:left;">self-start</td><td style="text-align:left;">align-self: flex-start;</td></tr><tr><td style="text-align:left;">self-end</td><td style="text-align:left;">align-self: flex-end;</td></tr><tr><td style="text-align:left;">self-center</td><td style="text-align:left;">align-self: center;</td></tr><tr><td style="text-align:left;">self-stretch</td><td style="text-align:left;">align-self: stretch;</td></tr><tr><td style="text-align:left;">self-baseline</td><td style="text-align:left;">align-self: baseline;</td></tr></tbody></table></li></ul><h3 id="flex-属性" tabindex="-1"><a class="header-anchor" href="#flex-属性" aria-hidden="true">#</a> flex 属性</h3><p>flex 属性是 flex-grow、flex-shrink 和 flex-basis 这 3 个缩放属性的缩写。</p><ul><li><code>flex:initial</code> 等同于 <code>flex: 0 1 auto;</code>，作用为 flex 初始值；</li><li><code>flex:0</code> 等同于 <code>flex: 0 1 0%;</code>，元素尺寸会收缩但不会扩展，作用为元素尺寸表现为最小内容宽度；</li><li><strong><code>flex:none</code></strong> 等同于 <code>flex:0 0 auto;</code> , 作用为 <strong>flex</strong> 子项没有弹性, 设置为固定尺寸元素(无需设置<strong>width</strong>属性)，元素最终尺寸通常表现为最大内容宽度。</li><li><strong><code>flex:1</code></strong> 等同于 <code>flex: 1 1 0%;</code>，作用为 <strong>flex</strong> 子项自动填满剩余空间或自动收缩，<strong>在容器尺寸不足时会优先最小化内容的尺寸</strong>；</li><li><code>flex:auto</code> 等同于 <code>flex: 1 1 auto;</code>， 作用为 <strong>flex</strong> 子项自动填满剩余空间或自动收缩，<strong>在容器尺寸不足时会优先最大化内容尺寸</strong>;</li></ul><p>完整属性缩写介绍对照表，具体使用可见 <a href="FlexboxLayoutTechniques">《弹性布局 Flex》</a>。</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">abbreviation</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">flex-initial</td><td style="text-align:left;">flex: initial;</td><td style="text-align:left;">flex: 0 1 auto;</td></tr><tr><td style="text-align:left;">flex-0</td><td style="text-align:left;">flex: 0;</td><td style="text-align:left;">flex: 0 1 0%;</td></tr><tr><td style="text-align:left;">flex-none</td><td style="text-align:left;">flex: none;</td><td style="text-align:left;">flex: 0 0 auto;</td></tr><tr><td style="text-align:left;">flex-1</td><td style="text-align:left;">flex: 1;</td><td style="text-align:left;">flex: 1 1 0%;</td></tr><tr><td style="text-align:left;">flex-auto</td><td style="text-align:left;">flex: auto;</td><td style="text-align:left;">flex: 1 1 auto;</td></tr></tbody></table><h3 id="flex-grow-扩展属性" tabindex="-1"><a class="header-anchor" href="#flex-grow-扩展属性" aria-hidden="true">#</a> flex-grow 扩展属性</h3><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">flex-grow-0</td><td style="text-align:left;">flex-grow: 0;</td></tr><tr><td style="text-align:left;">flex-grow</td><td style="text-align:left;">flex-grow: 1;</td></tr></tbody></table><h3 id="flex-shrink-收缩属性" tabindex="-1"><a class="header-anchor" href="#flex-shrink-收缩属性" aria-hidden="true">#</a> flex-shrink 收缩属性</h3><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Properties</th></tr></thead><tbody><tr><td style="text-align:left;">flex-shrink-0</td><td style="text-align:left;">flex-shrink: 0;</td></tr><tr><td style="text-align:left;">flex-shrink</td><td style="text-align:left;">flex-shrink: 1;</td></tr></tbody></table>`,53),o=[r];function c(g,f){return i(),d("div",null,o)}const p=t(a,[["render",c],["__file","TailwindCSS02.html.vue"]]);export{p as default};
