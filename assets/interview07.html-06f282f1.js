import{_ as t,X as e,Y as i,$ as l}from"./framework-97fa2d96.js";const a={},r=l,n=e,d=i,o=r('<p>在此梳理 Http 相关的常见知识点。</p><h2 id="http-常见的状态码有哪些" tabindex="-1"><a class="header-anchor" href="#http-常见的状态码有哪些" aria-hidden="true">#</a> http 常见的状态码有哪些</h2><p>HTTP（超文本传输协议）是用于在客户端和服务器之间传输数据的协议。HTTP 状态码是服务器向客户端返回的三位数字代码，用于表示请求的处理结果。以下是一些常见的 HTTP 状态码及其含义：</p><h3 id="_1xx-信息性状态码" tabindex="-1"><a class="header-anchor" href="#_1xx-信息性状态码" aria-hidden="true">#</a> 1xx（信息性状态码）</h3><p>1xx（信息性状态码）：表示服务器已接收到请求并正在处理。</p><ul><li>100 Continue（继续）：客户端应继续发送请求。</li><li>101 Switching Protocols（切换协议）：服务器要求客户端切换协议。</li></ul><h3 id="_2xx-成功状态码" tabindex="-1"><a class="header-anchor" href="#_2xx-成功状态码" aria-hidden="true">#</a> 2xx（成功状态码）</h3><p>2xx（成功状态码）：表示请求已成功接收、理解和处理。</p><ul><li>200 OK（成功）：请求已成功处理。</li><li>201 Created（已创建）：请求已成功创建新的资源。</li><li>204 No Content（无内容）：服务器已成功处理请求，但无返回内容。</li></ul><h3 id="_3xx-重定向状态码" tabindex="-1"><a class="header-anchor" href="#_3xx-重定向状态码" aria-hidden="true">#</a> 3xx（重定向状态码）</h3><p>3xx（重定向状态码）：表示需要进一步操作以完成请求。</p><ul><li>301 Moved Permanently（<strong>永久</strong>重定向）：请求的资源已永久移动到新位置。</li><li>302 Found（<strong>临时</strong>重定向）：请求的资源暂时移动到新位置。</li><li>304 Not Modified（<strong>未修改</strong>）：客户端缓存的资源仍然有效，无需重新下载。</li></ul><h3 id="_4xx-客户端错误状态码" tabindex="-1"><a class="header-anchor" href="#_4xx-客户端错误状态码" aria-hidden="true">#</a> 4xx（客户端错误状态码）</h3><p>4xx（客户端错误状态码）：表示客户端发出的请求有错误。</p><ul><li>400 Bad Request（错误请求）：服务器无法理解请求的语法。</li><li>401 Unauthorized（未授权）：请求需要身份验证。</li><li>404 Not Found（未找到）：请求的资源不存在。</li></ul><h3 id="_5xx-服务器错误状态码" tabindex="-1"><a class="header-anchor" href="#_5xx-服务器错误状态码" aria-hidden="true">#</a> 5xx（服务器错误状态码）</h3><p>5xx（服务器错误状态码）：表示服务器在处理请求时发生错误。</p><ul><li>500 Internal Server Error（内部服务器错误）：服务器遇到了意外情况，无法完成请求。</li><li>503 Service Unavailable（服务不可用）：服务器暂时无法处理请求，通常是由于过载或维护。</li></ul><h2 id="http-有哪些常见-header" tabindex="-1"><a class="header-anchor" href="#http-有哪些常见-header" aria-hidden="true">#</a> http 有哪些常见 Header</h2><p>HTTP 协议中有许多常见的头部（Header），这些头部用于在请求和响应中传递附加信息。梳理一些常见的 HTTP 头部：</p><ol><li>Accept：指定客户端能够处理的媒体类型。</li><li><strong>Content-Type</strong>：指定请求或响应中的实体主体的媒体类型。</li><li>Authorization：提供身份验证凭据，用于访问受限资源。</li><li>User-Agent：标识发出请求的用户代理（通常是浏览器）。</li><li>Cookie：包含已存储在客户端的 HTTP cookie。</li><li><strong>Cache-Control</strong>：指定缓存机制是否可以缓存请求/响应，并在多久后过期。</li><li>Content-Length：表示请求或响应中的实体主体长度（以字节为单位）。</li><li>Location：指定重定向的 URL。</li><li><strong>Referer</strong>：指定请求的来源页面的 URL，是否跨域。</li><li><strong>If-Modified-Since</strong>：指定如果资源自指定日期以来没有被修改过，则发送请求。</li><li>Set-Cookie：在响应中设置 HTTP cookie。</li><li>Server：指定 HTTP 服务器的软件标识和版本号。</li><li>X-Requested-With：指定异步请求的类型（通常与 AJAX 一起使用）。</li></ol><h2 id="强制缓存和协商缓存" tabindex="-1"><a class="header-anchor" href="#强制缓存和协商缓存" aria-hidden="true">#</a> 强制缓存和协商缓存</h2><h3 id="强制缓存" tabindex="-1"><a class="header-anchor" href="#强制缓存" aria-hidden="true">#</a> 强制缓存</h3><p>强制缓存是一种缓存策略，它通过在响应头中设置一些特定的 HTTP 头部来告知客户端在一定时间内使用本地缓存而不发送请求到服务器。以下是强制缓存的主要步骤和相关的 HTTP 头部：</p><ol><li><p>客户端首次请求资源时，服务器通过响应头设置以下头部来指定缓存的有效期限：</p><ul><li>Expires：是 http 1.0 的规范，值是一个 GMT 格式的时间点字符串，指定资源的过期日期和时间。</li><li>Cache-Control：是 http 1.1 的规范，一般常用该字段的 max-age 值来进行判断，它是一个相对时间。指定缓存的行为和参数。常见的值包括： <ul><li><strong>max-age</strong>：指定缓存的最大有效时间（以秒为单位），比如 .Cache-Control:max-age=1000 代表资源的有效期是 1000 秒。</li><li><strong>no-cache</strong>：强制客户端发送请求到服务器进行验证。</li><li>no-store：禁止缓存。</li><li>public：允许任何中间缓存和客户端缓存。</li><li>private：只允许客户端缓存。</li></ul></li></ul></li><li><p>客户端收到响应后，将资源和相关的缓存信息存储在本地缓存中，以备将来使用。</p></li><li><p>当客户端再次请求相同的资源时，客户端会首先检查本地缓存。</p><ul><li>如果缓存未过期（根据 Expires 或 Cache-Control 中的 max-age 判断），客户端直接使用本地缓存，不发送请求到服务器。</li><li>如果缓存已过期或被标记为无效，客户端发送请求到服务器，并在请求头中包含一些条件，以便服务器确定是否返回新的资源。 <ul><li>If-Modified-Since：指定上次缓存的<strong>修改时间</strong>，服务器可以根据该值判断资源是否有更新。</li><li>If-None-Match：指定上次缓存的<strong>实体标签（ETag）</strong>，服务器可以根据该值判断资源是否有更新。</li></ul></li></ul></li></ol><blockquote><p>Expires 是一个具体的过期时间，而 Cache-Control 是更灵活和精确的缓存控制机制(功能更强大)。现代开发中 Expires 逐渐被淘汰了，原因在于 Expires 失效时间是一个绝对时间，如果服务器时间与客户端时间偏差较大时，就会导致缓存混乱。 Cache-Control 的优先级高于 Expires，如果两者同时存在，Cache-Control 会覆盖 Expires。</p></blockquote><p>通过使用强制缓存，可以减少对服务器的请求次数，提高网页加载速度和性能。但需要注意，如果服务器更新了资源并且将缓存的过期时间设置为很长，客户端可能无法及时获取到更新的内容。在这种情况下，可以考虑使用适当的缓存控制策略，如缓存验证（Conditional Requests）来平衡缓存和资源更新的需求。</p><h3 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h3><p>协商缓存是一种缓存策略，它通过在请求和响应中使用特定的 HTTP 头部来减少对服务器的请求次数，同时确保客户端始终获取到最新的资源。协商缓存的主要步骤和相关的 HTTP 头部如下：</p><ol><li>客户端发送请求到服务器，并在请求头中包含以下头部字段中的一个： <ul><li>If-Modified-Since：指定上次缓存的修改时间。</li><li>If-None-Match：指定上次缓存的实体标签（ETag）。</li></ul></li><li>服务器收到请求后，会检查请求头中的 If-Modified-Since 和 If-None-Match 字段，并与资源的最新信息进行比较。 <ul><li>如果资源自上次请求以来没有修改过，服务器会返回状态码 304 Not Modified，表示资源未修改。</li><li>如果资源已经修改过，服务器会正常返回最新的资源，并在响应头中以下头部字段中的一个： <ul><li>Last-Modified/If-Modified-Since 二者的值都是 GMT 格式的时间字符串， Last-Modified 标记最后文件修改时间， 下一次请求时，请求头中会带上 If-Modified-Since 值就是 Last-Modified 告诉服务器我本地缓存的文件最后修改的时间，在服务器上根据文件的最后修改时间判断资源是否有变化。</li><li>Etag/If-None-Match：由服务器为每一个资源生成的唯一标识串，只要资源有变化就这个值就会改变。</li></ul></li></ul></li><li>客户端收到响应后，会根据服务器返回的状态码和头部字段进行处理： <ul><li>如果收到状态码 304 Not Modified，表示资源未修改，客户端可以使用本地缓存，无需重新下载。</li><li>如果收到新的资源或其他状态码，客户端将更新本地缓存，并存储服务器返回的最新的 Last-Modified 和 ETag 字段，以备将来的请求使用。</li></ul></li></ol><p>协商缓存通过在请求和响应中使用 If-Modified-Since 或 If-None-Match 字段，使客户端与服务器进行交互，以确定资源是否需要更新。这种方式可以减少对服务器的请求次数，并确保客户端获取到最新的资源。协商缓存比强制缓存更具灵活性，适用于<strong>频繁更新的资源</strong>或<strong>需要精确控制缓存</strong>的情况。</p><blockquote><p>总体来说它们各自的优先级是:</p><p>强制缓存&gt; 协商缓存，优先判断是否为强制缓存，再走协商缓存。</p><p>Cache-Control &gt; expires &gt; Etag &gt; Last-Modified</p><p>请求资源的顺序为: 浏览器会获取该缓存资源的 header 中的信息，根据 response header 中的 expires 和 cache-control 来判断是否命中强缓存，如果命中则直接从缓存中获取资源。</p><p>如果没有命中强缓存，浏览器就会发送请求到服务器，这次请求会带上 IF-Modified-Since 或者 IF-None-Match, 它们的值分别是第一次请求返回 Last-Modified 或者 Etag，由服务器来对比这一对字段来判断是否命中。如果命中，则服务器返回 304 状态码，并且不会返回资源内容，浏览器会直接从缓存获取；否则服务器最终会返回资源的实际内容，并更新 header 中的相关缓存字段。</p></blockquote><h2 id="刷新页面对-http-缓存有什么影响" tabindex="-1"><a class="header-anchor" href="#刷新页面对-http-缓存有什么影响" aria-hidden="true">#</a> 刷新页面对 http 缓存有什么影响</h2><table><thead><tr><th style="text-align:center;">用户操作</th><th style="text-align:center;">Expires/Cache-Control</th><th style="text-align:center;">Last-Modied/Etag</th></tr></thead><tbody><tr><td style="text-align:center;">地址栏回车</td><td style="text-align:center;">有效</td><td style="text-align:center;">有效</td></tr><tr><td style="text-align:center;">页面链接跳转</td><td style="text-align:center;">有效</td><td style="text-align:center;">有效</td></tr><tr><td style="text-align:center;">新开窗口</td><td style="text-align:center;">有效</td><td style="text-align:center;">有效</td></tr><tr><td style="text-align:center;">前进回退</td><td style="text-align:center;">有效</td><td style="text-align:center;">有效</td></tr><tr><td style="text-align:center;">F5 刷新</td><td style="text-align:center;">无效(有争议，不同浏览器反馈不一致)</td><td style="text-align:center;">有效</td></tr><tr><td style="text-align:center;">Ctrl+F5 强制刷新</td><td style="text-align:center;">无效</td><td style="text-align:center;">无效</td></tr></tbody></table><h2 id="三级缓存" tabindex="-1"><a class="header-anchor" href="#三级缓存" aria-hidden="true">#</a> 三级缓存</h2><p>请求步骤为:</p><ol><li>查看本地内存是否存在</li><li>查看本地硬盘是否存在</li><li>网络请求资源,并缓存到硬盘和内存中</li></ol>',37),h=[o];function s(c,x){return n(),d("div",null,h)}const g=t(a,[["render",s],["__file","interview07.html.vue"]]);export{g as default};
