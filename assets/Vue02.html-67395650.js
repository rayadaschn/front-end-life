import{_ as e,V as o,W as c,X as n,Y as s,Z as t,$ as p,F as l}from"./framework-2060dede.js";const i={},u=n("h1",{id:"vue3-中的全局注册",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vue3-中的全局注册","aria-hidden":"true"},"#"),s(" Vue3 中的全局注册")],-1),r=n("h2",{id:"_1-动物园里有什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-动物园里有什么","aria-hidden":"true"},"#"),s(" 1. 动物园里有什么?")],-1),d=n("code",null,"Vue3",-1),k=n("code",null,"element-plus",-1),v=n("code",null,"Icons-vue",-1),m=n("code",null,"main.ts",-1),g={href:"https://element-plus.gitee.io/en-US/component/icon.html#register-all-icons",target:"_blank",rel:"noopener noreferrer"},b=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>

<span class="token comment">// if you&#39;re using CDN, please remove this line.</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ElementPlusIconsVue <span class="token keyword">from</span> <span class="token string">&quot;@element-plus/icons-vue&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> component<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>ElementPlusIconsVue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好像有点不大优雅，这个时候我们可能会把它封装成一个函数，让后外部导入进来，然后再执行。不过也有点问题需要解决：得获取到 <code>createApp()</code> 当前所创建的应用实例。<code>Vue</code> 为我们提供了一种较为优雅的方式： <code>app.use()</code> 安装插件。</p><p>好，这里我们暂时把上述内容按下不表。我们先来看看什么是插件？ (● ﾟ ω ﾟ ●)</p>`,3),h={href:"https://cn.vuejs.org/guide/reusability/plugins.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://cn.vuejs.org/api/application.html#app-component",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"app.component()",-1),w={href:"https://cn.vuejs.org/api/application.html#app-directive",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"app.directive()",-1),q={href:"https://cn.vuejs.org/api/application.html#app-provide",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"app.provide()",-1),A={href:"https://cn.vuejs.org/guide/components/provide-inject.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://cn.vuejs.org/api/application.html#app-config-globalproperties",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"app.config.globalProperties",-1),O={href:"https://github.com/vuejs/vue-router-next",target:"_blank",rel:"noopener noreferrer"},C=p(`<p>好像也不是很懂，没有关系，举个栗子。在 vue 中我们定义的单组件本身也是一个插件，所以我们在父组件中使用它需要用 <code>components</code> 进行挂载:</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 导入子组件</span>
<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&quot;@cp/Child.vue&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 挂载组件模版</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    Child<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 组件里的业务代码</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了这种组件插件外，我们还有一种更为通用的 <strong><code>JS/TS</code>插件</strong>，其实就是我们封装好的 <code>JS/TS</code> 独立函数文件。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">&quot;md5&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 导入即是挂载</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用</span>
    <span class="token keyword">const</span> <span class="token literal-property property">md5Msg</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，我们可以通过在本地封装组件/JS/TS 插件，也能直接通过 <code>npm</code> 下载插件，供项目使用。只不过，这里要注意的是全局使用还是局部使用。局部使用就是如上述所示，我们接下来看看全局插件如何挂载。</p><h2 id="_2-在全局挂载插件" tabindex="-1"><a class="header-anchor" href="#_2-在全局挂载插件" aria-hidden="true">#</a> 2. 在全局挂载插件</h2><p>在全局挂载插件，我们用的最多是在 <code>main.ts</code> 上挂载 <code>pinia</code> 和 <code>router</code>等。这类其实就是 <code>JS/TS插件</code>，也是我们用的最多的，当然也有全局引用 UI 组件库的，如<code>ElementPlus</code> 等。我们先来看看是如何挂载的：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">&quot;element-plus&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;element-plus/dist/index.css&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App.vue&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 挂载</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道，<code>createApp</code> 会返回创建的一个实例应用 <code>app</code>，而这个实例上便有 <code>use</code> 方法用于挂载全局插件。来看看官方介绍:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
  <span class="token function">use</span><span class="token punctuation">(</span>plugin<span class="token operator">:</span> Plugin<span class="token punctuation">,</span> <span class="token operator">...</span>options<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个参数应是插件本身，可选的第二个参数是要传递给插件的选项。</p><p><strong>插件可以是一个带 <code>install()</code> 方法的对象，亦或直接是一个将被用作 <code>install()</code> 方法的函数。</strong> 插件选项 (<code>app.use()</code> 的第二个参数) 将会传递给插件的 <code>install()</code> 方法。</p><p>若 <code>app.use()</code> 对同一个插件多次调用，该插件只会被安装一次。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> MyPlugin <span class="token keyword">from</span> <span class="token string">&#39;./plugins/MyPlugin&#39;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">// 插件参数</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>MyPlugin，options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，在 Vue 中插件支持导出两种格式的：一种是函数，一种是对象。</p><ul><li><strong>当导出为一个函数时， Vue 会直接调用这个函数</strong>：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 函数形式</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>app<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 逻辑代码...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当导出为一个对象时，对象上面需要有一个 <code>install</code> 方法给 Vue ， <strong>Vue 通过调用这个方法来启用插件</strong>：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 对象形式</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">install</span><span class="token operator">:</span> <span class="token punctuation">(</span>app<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 逻辑代码...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>俩种形式都有两个相同的入参<code>app</code>和 <code>options</code> :</p><table><thead><tr><th>参数</th><th>作用</th><th>类型</th></tr></thead><tbody><tr><td>app</td><td><code>createApp()</code> 生成的实例</td><td>Vue3 中 为<code>App&lt;Element&gt;</code></td></tr><tr><td>options</td><td>插件初始化时的选项</td><td><code>undefined</code> 或一个对象，对象的 TS 类型由插件的选项决定</td></tr></tbody></table><p>“插件选项 (<code>app.use()</code> 的第二个参数) 将会传递给插件的 <code>install()</code> 方法。”这里的插件选项就是 <code>options</code>。</p><h2 id="_3-自己编写一个插件" tabindex="-1"><a class="header-anchor" href="#_3-自己编写一个插件" aria-hidden="true">#</a> 3. 自己编写一个插件</h2><p>我们先来看看简单的函数形式插件，由于拥有 <code>app</code> 实例以及当全局挂载后，会自动运行。所以，给开头的封装提供了机会，结合上述函数式插件的表现方式，我们可以有：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ./global/register-icons.ts</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 导入 App 类型</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ElementPlusIconsVue <span class="token keyword">from</span> <span class="token string">&quot;@element-plus/icons-vue&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 执行的函数, 此处不传 options</span>
<span class="token keyword">function</span> <span class="token function">registerIcons</span><span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token operator">&lt;</span>Element<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> component<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>ElementPlusIconsVue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> registerIcons<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>main.ts</code> 中应用就行了。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> registerIcons <span class="token keyword">from</span> <span class="token string">&quot;./global/register-icons&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>registerIcons<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注册全局 Element-icons</span>

app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也许你这里会有困惑，为什么在挂载时直接 <code>app.use(registerIcons)</code> 就可以了，我们并没有给它传递参数 <code>app</code> 呀。</p><p>我们看看 <code>use</code> 的 TS 类型定义：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">interface</span> <span class="token class-name">App<span class="token operator">&lt;</span>HostElement <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token generic-function"><span class="token function">use</span><span class="token generic class-name"><span class="token operator">&lt;</span>Options <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
    plugin<span class="token operator">:</span> Plugin_2<span class="token operator">&lt;</span>Options<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>options<span class="token operator">:</span> Options
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token generic-function"><span class="token function">use</span><span class="token generic class-name"><span class="token operator">&lt;</span>Options<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>plugin<span class="token operator">:</span> Plugin_2<span class="token operator">&lt;</span>Options<span class="token operator">&gt;</span><span class="token punctuation">,</span> options<span class="token operator">:</span> Options<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们可以看到 <code>plugin</code>的定义类型为 <code>Plugin_2&lt;Options&gt;</code> ，接着往下看：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">Plugin_2<span class="token operator">&lt;</span>Options <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token operator">|</span> <span class="token punctuation">(</span>PluginInstallFunction<span class="token operator">&lt;</span>Options<span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
      install<span class="token operator">?</span><span class="token operator">:</span> PluginInstallFunction<span class="token operator">&lt;</span>Options<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token operator">|</span> <span class="token punctuation">{</span>
      install<span class="token operator">:</span> PluginInstallFunction<span class="token operator">&lt;</span>Options<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> Plugin_2 <span class="token keyword">as</span> Plugin <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">PluginInstallFunction<span class="token operator">&lt;</span>Options<span class="token operator">&gt;</span></span> <span class="token operator">=</span> Options <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token operator">?</span> <span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token punctuation">,</span> <span class="token operator">...</span>options<span class="token operator">:</span> Options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">any</span>
  <span class="token operator">:</span> <span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token punctuation">,</span> options<span class="token operator">:</span> Options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，<code>Plugin_2</code> 内部会检测是否有 <code>install</code> 方法，该方法最终指向 <code>PluginInstallFunction</code> 方法，而最终的 <code>PluginInstallFunction</code>内部就有用到 <code>app</code> 。</p><p>不懂也没有关系，对代码的理解交给时间吧。</p><p>以上是函数式插件，那我们定义一个对象式插件呢？（自定义的指令就是用对象式来定义哒~）</p><p>关于自定义指令可以看《<a href="Vue01">Vue3 中的 script-setup</a>》。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/plugins/directive.ts</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 插件选项的类型</span>
<span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>
  <span class="token comment">// 文本高亮选项</span>
  highlight<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 默认背景色</span>
    backgroundColor<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 自定义指令
 * <span class="token keyword">@description</span> 保证插件单一职责，当前插件只用于添加自定义指令
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">install</span><span class="token operator">:</span> <span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> Options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 文本高亮
     * <span class="token keyword">@description</span> 用于给指定的 DOM 节点添加背景色，搭配文本内容形成高亮效果
     * <span class="token keyword">@tips</span> 指令传入的值需要是合法的 CSS 颜色名称或者 Hex 值
     * <span class="token keyword">@example</span> &lt;div v-highlight=&quot;\`cyan\`&quot; /&gt;
     */</span>
    app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&quot;highlight&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 获取默认颜色</span>
      <span class="token keyword">let</span> defaultColor <span class="token operator">=</span> <span class="token string">&quot;unset&quot;</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;[object Object]&quot;</span> <span class="token operator">&amp;&amp;</span>
        options<span class="token operator">?.</span>highlight<span class="token operator">?.</span>backgroundColor
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        defaultColor <span class="token operator">=</span> options<span class="token punctuation">.</span>highlight<span class="token punctuation">.</span>backgroundColor<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 设置背景色</span>
      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span>
        <span class="token keyword">typeof</span> binding<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">?</span> binding<span class="token punctuation">.</span>value <span class="token operator">:</span> defaultColor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们定义了一个文本高亮的插件，并且给高亮指令一个可选的颜色值。</p><p>然后，我们就可以在 <code>main.ts</code> 中启用该插件了，并且在启用的过程中，可以进行 <code>options</code> 配置默认背景颜色。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;@/App.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> directive <span class="token keyword">from</span> <span class="token string">&quot;@/plugins/directive&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 导入插件</span>

<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
  <span class="token comment">// 自定义插件</span>
  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>directive<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    highlight<span class="token operator">:</span> <span class="token punctuation">{</span>
      backgroundColor<span class="token operator">:</span> <span class="token string">&quot;#ddd&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Vue 组件中使用:</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>根据 highlight 指令的判断规则：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-highlight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\`red\`<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>这个是红色高亮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-highlight</span><span class="token punctuation">&gt;</span></span>这个是使用插件初始化时设置的灰色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>搞定~ (づ｡◕‿‿◕｡)づ</p><p>感谢你的时间，希望你也有所收获。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>`,45),I={href:"https://element-plus.gitee.io/en-US/component/icon.html#register-all-icons",target:"_blank",rel:"noopener noreferrer"},j={href:"https://cn.vuejs.org/guide/reusability/plugins.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://vue3.chengpeiquan.com/",target:"_blank",rel:"noopener noreferrer"};function E(F,T){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[s("在 "),d,s(" 中当我们想用某个功能，并且想要这个能够全局生效时，我们通常会说去安装一个插件。如我们想全局注册 "),k,s(" 的 "),v,s(" 图标组件，我们得在 "),m,s(" 内部加入如下代码 "),n("a",g,[s("注册所有图标"),t(a)]),s(" ：")]),b,n("p",null,[n("a",h,[s("插件 (Plugins) "),t(a)]),s("，Vue 官方的解释是一种能为 Vue 添加全局功能的工具代码。主要运用场景为:")]),n("ol",null,[n("li",null,[s("通过 "),n("a",y,[f,t(a)]),s(" 和 "),n("a",w,[_,t(a)]),s(" 注册一到多个全局组件或自定义指令。")]),n("li",null,[s("通过 "),n("a",q,[x,t(a)]),s(" 使一个资源"),n("a",A,[s("可被注入"),t(a)]),s("进整个应用。")]),n("li",null,[s("向 "),n("a",P,[V,t(a)]),s(" 中添加一些全局实例属性或方法")]),n("li",null,[s("一个可能上述三种都包含了的功能库 (例如 "),n("a",O,[s("vue-router"),t(a)]),s(")。")])]),C,n("ul",null,[n("li",null,[n("p",null,[n("a",I,[s("注册全局组件"),t(a)])])]),n("li",null,[n("p",null,[n("a",j,[s("插件"),t(a)])])]),n("li",null,[n("p",null,[n("a",S,[s("Vue3 入门指南与实战案例"),t(a)])])])])])}const N=e(i,[["render",E],["__file","Vue02.html.vue"]]);export{N as default};
