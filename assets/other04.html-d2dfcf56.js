import{_ as o,X as i,Z as p,$ as l,V as c,W as d,F as r,Y as u}from"./framework-2eee3422.js";const k={},s=i,n=p,v=r,e=l,t=u,m=c,g=d,h=t('<h1 id="利用husky进行-git-提交前检查" tabindex="-1"><a class="header-anchor" href="#利用husky进行-git-提交前检查" aria-hidden="true">#</a> 利用husky进行 git 提交前检查</h1><p>Husky 是 git hook 工具，<strong>它允许我们轻松地处理Git Hooks 并在提交代码时运行我们想要的脚本</strong>。 它的工作原理是在我们的 package.json 文件中加入一个对象，配置Husky 来运行我们指定的脚本。 之后，Husky 会管理我们的脚本将在Git 生命周期的哪个阶段运行。</p><p>lint-staged：<strong>是一个前端文件过滤的工具</strong>。 是一个仅仅过滤出Git代码暂存区文件（被committed 的文件）的工具。 Lint-staged 仅仅是文件过滤器，不会帮你格式化任何东西</p><p>通常来说 git 推送代码的过程为：<code>git add</code> - <code>git commit</code> - <code>git push</code>，在 <code>git commit</code> 期间进行代码检测操作是较好的。接下来看处理过程：</p>',4),b=s("p",null,"注意，以下皆为 husky@6.0 以上的版本，截止 2023.05.23 为 husky@8.0.3。",-1),q={href:"https://zhuanlan.zhihu.com/p/366786798",target:"_blank",rel:"noopener noreferrer"},_=s("p",null,"简单的说，新版本的配置过程比旧版本的多一个动作：",-1),y=s("p",null,"老版本：安装 ——> 配置",-1),f=s("p",null,[n("新版本：安装 ——> 启用 ——> 生成 "),s("code",null,".husky"),n(" 相关配置")],-1),x=t(`<ul><li><p>安装依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> husky lint-staged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>启动 husky：</p><ul><li><p>初次配置是手动启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: npx husky <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>后续其它小伙伴下拉代码是“被动启动 husky” ：</p><p>在 <code>package.json</code> 中添加 prepare 脚本命令，这个命令会在 <code>npm install</code> （不带参数）之后自动执行，也就是它会在安装完依赖后自动执行 <code>husky install</code> 命令。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个命令会在 <code>.husky/</code> 目录中添加相关依赖。</p></li></ul></li><li><p>添加 Git Hook 指令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;npm run lint-staged&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我这里是在 git commit 之前添加运行 “<code>npm run lint-staged</code>” 脚本指令。这时，会在 <code>.husky/</code> 目录下新增一个名为 pre-commit 的 shell 脚本，内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>
<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> -- <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>

<span class="token function">npm</span> run lint-staged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，已经完成了 Husky 部分的相关配置了，接下来为 lint-staged 进行配置。</p></li><li><p>配置 <code>lint-staged</code></p><p>我们设置的脚本是“<code>npm run lint-staged</code>”，因此需要继续在<code>package.json</code> 中添加相关指令：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lint-staged&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即“<code>npm run lint-staged</code>”脚本的作用是直接执行 <code>lint-staged</code>，因此，接着需要对 <code>lint-staged</code>进行设置，依旧在 <code>package.json</code> 中：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lint-staged&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;src/**/*.{js,jsx,tsx,ts,less,sass,md}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;prettier --write&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述<code>lint-staged</code>配置中的意思是 <strong>表明只对src 目录下的<code>git add</code>到 stage 区的文件进行扫描</strong>，且同时对这些文件执行 <code>prettier --write</code> 操作。</p><blockquote><p><code>prettier --write</code> 操作需要安装相应的 prettier 依赖包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> prettier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>具体使用可以看<a href="other01">《代码规范和自动格式化》</a></p></blockquote></li></ul>`,1),j={href:"https://typicode.github.io/husky/guide.html",target:"_blank",rel:"noopener noreferrer"};function V(N,$){const a=v("ExternalLinkIcon");return m(),g("div",null,[h,s("blockquote",null,[b,s("p",null,[n("旧版本的 husky 的构建流程同现在的不同，具体问题可以查看"),s("a",q,[n("《husky为什么放弃了之前的配置方式》"),e(a)]),n("。")]),_,y,f]),x,s("p",null,[n("此时，我们已经完成了所有的配置，更多配置可以查看"),s("a",j,[n("官网"),e(a)]),n("。")])])}const B=o(k,[["render",V],["__file","other04.html.vue"]]);export{B as default};
