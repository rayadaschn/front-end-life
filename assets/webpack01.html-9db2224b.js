import{_ as n,V as s,W as a,Y as p}from"./framework-2eee3422.js";const t={},e=p,o=s,c=a,i=e(`<h1 id="解决前端跨域问题" tabindex="-1"><a class="header-anchor" href="#解决前端跨域问题" aria-hidden="true">#</a> 解决前端跨域问题</h1><h2 id="前言-同源策略" tabindex="-1"><a class="header-anchor" href="#前言-同源策略" aria-hidden="true">#</a> 前言-同源策略</h2><p>同源策略（Same-Origin Policy，简称 SOP）是一种重要的安全策略，用于 Web 浏览器保护用户隐私和安全。它指定浏览器在加载文档或执行脚本时，只能访问与原始文档具有相同协议、主机名和端口号的资源。</p><p>简单来说，如果一个网页中使用了 JavaScript 脚本或其他方式加载了其他来源的资源（例如图片、脚本、样式表等），那么这些资源的加载和访问将受到同源策略的限制，只能访问与该网页同源的资源，不能访问其他来源的资源。这种限制可以有效防止恶意网站窃取用户的信息，保护用户隐私和安全。</p><blockquote><p>实际上，跨域的产生和前后端分离有很大关系。若前后端不分离，数据全有后端提供，则无跨域问题。</p><p>当前后端分离后，浏览器发现静态资源和 API 接口(XHR、Fetch)请求不是来自同一个地方时(同源策略)，就产生了跨域。这只发生在前端浏览器中，而后端服务器之间的数据请求，并不会产生跨域影响。因此，在后面介绍的 webpack 通过 devServer.proxy 配置或者其他跨域方案实现的代理转发，实际上就是利用后端服务进行数据请求操作，当请求完成后再将响应结果转发给前端客户端。</p></blockquote><h2 id="跨域的解决方案总结" tabindex="-1"><a class="header-anchor" href="#跨域的解决方案总结" aria-hidden="true">#</a> 跨域的解决方案总结</h2><h3 id="常见方案" tabindex="-1"><a class="header-anchor" href="#常见方案" aria-hidden="true">#</a> 常见方案</h3><ol><li>使用 CORS，跨域资源共享;</li><li>node 代理服务器（本地 webpack 中设置的就是它）；</li><li>Nginx 等反向代理；</li><li>JSONP，以前较为流行，但也许前后端统一设置。</li></ol><h3 id="cors" tabindex="-1"><a class="header-anchor" href="#cors" aria-hidden="true">#</a> CORS</h3><p><strong>跨源资源共享</strong>(CORS， Cross-Origin Resource Sharing 跨域资源共享)。它是一种基于<code>http header</code>的机制；该机制通过允许服务器标示除了它自己以外的其它源（域、协议和端口），使得浏览器允许这些 origin 访问加载自己的资源。</p><p>cors 的实现需要浏览器和服务器共同支持。浏览器在发送跨域请求时，会在请求头中添加一个 origin 字段，表示请求来源。服务器在接收到请求时，会在响应头中添加一个 access-control-allow-origin 字段，指定允许访问的域名。如果服务器允许该域名访问资源，就会在响应头中添加其他一些字段，比如 access-control-allow-methods、access-control-allow-headers 等，用于控制请求方法和请求头信息。</p><p>下面是一个简单的 cors 示例：</p><p>客户端代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.example.com/data&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

http
  <span class="token punctuation">.</span><span class="token function">createserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">setheader</span><span class="token punctuation">(</span><span class="token string">&#39;access-control-allow-origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://www.example.com&#39;</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">setheader</span><span class="token punctuation">(</span><span class="token string">&#39;access-control-allow-methods&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;get, post, options&#39;</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">setheader</span><span class="token punctuation">(</span><span class="token string">&#39;access-control-allow-headers&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;content-type&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&#39;options&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">writehead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span><span class="token function">writehead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;content-type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;hello, world!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，客户端向<code>http://www.example.com/data</code>发送 get 请求，服务器返回一个 json 格式的数据。在服务器的响应头中，我们设置了<code>access-control-allow-origin</code>字段，允许<code>http://www.example.com</code>域名访问资源，若是允许任意域名访问则可设置为星号<code>*</code>。</p><h3 id="node-服务器代理" tabindex="-1"><a class="header-anchor" href="#node-服务器代理" aria-hidden="true">#</a> Node 服务器代理</h3><p>node.js 服务器代理是一种解决服务端跨域请求的方式。它的基本原理是在 node.js 服务器上设置一个代理服务器，将跨域请求转发到目标服务器上，实现跨域请求。</p><p>具体实现步骤如下：</p><ol><li><p>在 node.js 服务器上安装 http-proxy-middleware 中间件：<code>npm install http-proxy-middleware --save</code></p></li><li><p>在 node.js 服务器代码中引入中间件，并设置代理规则：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> createproxymiddleware <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http-proxy-middleware&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token string">&#39;/api&#39;</span><span class="token punctuation">,</span>
  <span class="token function">createproxymiddleware</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://www.example.com&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 目标服务器地址</span>
    <span class="token literal-property property">changeorigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否跨域</span>
    <span class="token literal-property property">pathrewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;^/api&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 将 /api 前缀替换为空</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server started on port 3000&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们设置了一个代理规则，将以 /api 开头的请求转发到 <code>http://www.example.com/</code> 服务器上。同时，我们还设置了 <strong>changeorigin</strong> 为 <strong>true</strong>，表示允许跨域请求。<strong>pathrewrite</strong> 用于替换请求路径中的前缀，这里将 <code>/api</code> 前缀替换为空。</p><p>通过这种方式，我们可以在 node.js 服务器上实现跨域请求，同时也可以对请求进行一些处理，比如修改请求头、请求参数等。</p><p>需要注意的是，node.js 服务器代理也需要注意安全性问题，避免被恶意攻击。同时，代理服务器的性能也需要考虑，避免成为瓶颈。</p></li></ol><p><strong>在 WebPack 中设置以解决跨域问题</strong>：</p><p>在 webpack 中设置 node 服务器代理，可以使用 webpack-dev-server 提供的 proxy 选项来实现。proxy 选项可以将请求代理到另一个服务器上，从而实现跨域请求。</p><p>具体实现步骤如下：</p><ol><li><p>在 webpack 配置文件中添加 devserver 配置项，并设置 proxy 选项：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">devserver</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://www.example.com&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 目标服务器地址</span>
      <span class="token literal-property property">changeorigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否跨域</span>
      <span class="token literal-property property">pathrewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;^/api&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 将 /api 前缀替换为空</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们设置了一个代理规则，将以 <code>/api</code> 开头的请求转发到 <code>http://www.example.com/</code> 服务器上。同时，我们还设置了 <strong>changeorigin</strong> 为 <strong>true</strong>，表示允许跨域请求。<strong>pathrewrite</strong> 用于替换请求路径中的前缀，这里将 <code>/api</code> 前缀替换为空。</p></li><li><p>在前端代码中发送请求时，将请求路径设置为代理路径即可：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/data&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="nginx-反向代理" tabindex="-1"><a class="header-anchor" href="#nginx-反向代理" aria-hidden="true">#</a> Nginx 反向代理</h3><p>nginx 反向代理可以通过设置跨域请求头来解决跨域问题。一般用于线上环境，解决跨域。（当然，更简单的是直接后端配置 CORS）</p><p>具体实现步骤如下：</p><ol><li>在 nginx 的配置文件中设置反向代理规则：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>location <span class="token operator">/</span>api <span class="token punctuation">{</span>
  proxy_pass http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token punctuation">;</span> <span class="token comment">// 目标服务器地址</span>
  add_header <span class="token string">&#39;access-control-allow-origin&#39;</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 设置跨域请求头</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们设置了一个反向代理规则，将以 /api 开头的请求转发到 <code>http://www.example.com</code> 服务器上。同时，我们还设置了 <code>access-control-allow-origin</code> 请求头，允许任意域名访问该资源，从而实现跨域请求。</p><ol start="2"><li>在前端代码中发送请求时，将请求路径设置为反向代理路径即可：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/data&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 fetch 发送请求时，将请求路径设置为 <code>/api/data</code>，nginx 反向代理会将该请求转发到 <code>http://www.example.com/data</code>，从而实现跨域请求。</p><h3 id="jsonp-解决跨域" tabindex="-1"><a class="header-anchor" href="#jsonp-解决跨域" aria-hidden="true">#</a> JSONP 解决跨域</h3><p>JSONP 是一种常用的跨域解决方案，它通过动态创建<code>&lt;script&gt;</code>标签，利用 HTML 中<code>&lt;script&gt;</code>标签没有跨域限制的特性，实现跨域数据传输。</p><p>具体实现过程如下：</p><ol><li>前端页面通过 <code>&lt;script&gt;</code> 标签动态加载一个跨域的 JS 文件，并传递一个回调函数的名称作为参数，如：</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://example.com/data.js?callback=handleData<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>服务端接收到请求后，将数据封装在回调函数中返回给客户端，如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">handleData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>前端页面定义回调函数，解析返回的数据（实际返回的数据为函数+参数，参数为实际跨域返回的数据），如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handleData</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">,</span> data<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，前端页面就可以通过 JSONP 方式获取跨域数据，并在本地解析和使用了。</p><p>需要注意的是，JSONP 只支持 GET 请求，并且要求服务端返回的数据必须是可执行的 JavaScript 代码，而且需要约定回调函数的名称。同时，由于 JSONP 会将回调函数作为参数传递到服务端，因此存在一定的安全风险，可能会被恶意利用，因此需要谨慎使用。</p><p>可以看出，以上解决跨域的方案，大多都需要服务端进行配合设置。</p>`,46),l=[i];function u(r,d){return o(),c("div",null,l)}const v=n(t,[["render",u],["__file","webpack01.html.vue"]]);export{v as default};
