import{_ as l,Z as o,a0 as r,F as c,a1 as d,X as p,Y as t,$ as u}from"./framework-97fa2d96.js";const v={},n=o,a=r,m=c,s=d,i=u,k=p,b=t,h=n("h2",{id:"jenkins-安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jenkins-安装","aria-hidden":"true"},"#"),a(" Jenkins 安装")],-1),g={href:"https://www.jenkins.io/zh/doc/tutorials/build-a-node-js-and-react-app-with-npm/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://vuepress.mirror.docker-practice.com/install/centos/#",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"这里介绍一种通用型方案：利用 Java 运行 WAR 文件进行安装部署。这种方案的好处在于，无需服务 Root 权限，便可在线安装部署 Jenkins。",-1),f=n("blockquote",null,[n("p",null,"Jenkins 的 Web 应用程序 ARchive（WAR）文件版本可以安装在任何支持 Java 的操作系统或平台上。")],-1),J=n("p",null,"具体流程如下：",-1),x={href:"https://updates.jenkins.io/download/war/",target:"_blank",rel:"noopener noreferrer"},w=i(`<li><p>在下载的目录内打开一个终端/命令提示符窗口到。</p></li><li><p>运行命令 <code>java -jar jenkins.war</code></p><ul><li><p><strong>第一次运行，会返回一个初始密码！！！</strong> 需要妥善保管，待会要用，若是丢失了则需要去一下地址查看：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 不同安装路径可能不用</span>
/var/lib/jenkins/secrets/initialAdminPassword
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>值得注意的是，此时确保安装的 Java 版本符合要求。若是下载了较新的 WAR 包，则建议安装 Java11 以上，具体看下文介绍。</p></li><li><p>并且该指令无作做到持久化，关闭窗口后，便会停止，下文介绍持久化操作。</p></li></ul></li><li><p>浏览 <code>http://localhost:8080</code> 并等到 <em>Unlock Jenkins</em> 页面出现。</p><p>这里并非一定是 localhost，localhost 是本地服务。应该根据服务器地址自行设置。</p></li>`,3),$=i(`<h3 id="java-安装" tabindex="-1"><a class="header-anchor" href="#java-安装" aria-hidden="true">#</a> Java 安装</h3><p>环境为腾讯云的 Linux。</p><ol><li><p>搜索 jdk:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: yum search jdk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会列出当前能用的 jdk 版本。依据情况进行下载，通用的是 Java-1.8.0（较老）、Java-11-openjdk。</p></li><li><p>确定好 Java 版本后开始安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 请务必确认好版本</span>

<span class="token comment"># 1.8 版</span>
$: yum <span class="token function">install</span> java-1.8.0-openjdk.x86_64

<span class="token comment"># 11 版</span>
$: yum <span class="token function">install</span> java-11-openjdk.x86_64

<span class="token comment"># 验证安装</span>
$: <span class="token function">java</span> <span class="token parameter variable">-version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若先安装的 1.8 版，后安装的 11 版。而此时需要用到 11 版，可以切换默认 Java 版本（需要权限）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--config</span> <span class="token function">java</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令会显示当前系统中安装的所有 Java 版本，并让选择将哪个版本设置为默认版本。输入数字对应的序号并按回车键即可完成设置。</p><blockquote><p>没有权限进行切换 Java 版本，但又要用别的 Java 版本该如何？</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: update-alternatives <span class="token parameter variable">--config</span> <span class="token function">java</span>

There are <span class="token number">2</span> programs <span class="token function">which</span> provide <span class="token string">&#39;java&#39;</span><span class="token builtin class-name">.</span>

  Selection    Command
-----------------------------------------------
*+ <span class="token number">1</span>           java-1.8.0-openjdk.x86_64 <span class="token punctuation">(</span>/usr/lib/jvm/java-1.8.0-openjdk/bin/java<span class="token punctuation">)</span>
   <span class="token number">2</span>           java-11-openjdk.x86_64 <span class="token punctuation">(</span>/usr/lib/jvm/java-11-openjdk/bin/java<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看当前 Java 版本的同时，括号内会展现不同 Java 安装的路径。利用这个路径便可使用指定的 Java 版本了。</p><p>用法（需要用参数 <code>-jar</code>）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: /usr/lib/jvm/java-11-openjdk/bin/java <span class="token parameter variable">-jar</span> myapp.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将使用 /usr/lib/jvm/java-11-openjdk 目录下的 Java 可执行程序来运行 myapp.jar 文件。</p></blockquote></li></ol><h3 id="java-运行持久化" tabindex="-1"><a class="header-anchor" href="#java-运行持久化" aria-hidden="true">#</a> java 运行持久化</h3><p>在使用 Jenkins 时，如果希望在关闭浏览器后仍然保持 Jenkins 后台运行，则可以使用以下方法：</p><ol><li><p><strong>使用 nohup 命令（no hang up，不要挂断电话）</strong>：nohup 命令可以使进程忽略 SIGHUP 信号（即挂起信号），从而使其在终端关闭后继续在后台运行。例如，要在后台运行 Jenkins 并忽略 SIGHUP 信号，请使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> jenkins.war <span class="token operator">&gt;</span> ./jenkins.log <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><ul><li><p>在 nohup 命令后面添加重定向符号（<code>&gt;</code>）和输出文件名（记录日志），以将程序的输出重定向到指定的文件中；</p></li><li><p>在 Linux 和 Unix 系统中，<code>&amp;</code> 符号表示将命令放入后台运行。当使用 <code>&amp;</code> 符号时，程序会在后台运行，并且终端会立即返回到命令提示符。</p></li><li><p>上述命令的意思是将启动名为 <code>jenkins.war</code> 的 Java 程序，并将其输出写入到 <code>jenkins.log</code> 文件中。但是，由于在命令末尾添加了 <code>&amp;</code> 符号，该程序会在后台运行，并且控制台会立即返回到命令提示符。</p><p>如果不使用 <code>&amp;</code> 符号，则程序将在前台运行，并且控制台将一直占用，直到程序退出或通过键盘输入 <code>Ctrl+C</code> 中断进程。</p></li></ul></blockquote><p>键入上述指令后，会启动 Jenkins 并将其作为后台任务运行。此时，当关闭终端或断开 SSH 连接时，Jenkins 仍将继续在后台运行。</p></li><li><p><strong>使用 screen 命令</strong>：screen 命令可以创建一个虚拟窗口，并在其中运行命令或程序。可以使用 screen 命令来在 Jenkins 调试控制台中运行 Jenkins，并在关闭 SSH 连接后继续在后台运行。例如，要在 Jenkins 调试控制台中运行 Jenkins 并在后台运行，请使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">screen</span> <span class="token parameter variable">-S</span> jenkins
$: <span class="token function">java</span> <span class="token parameter variable">-jar</span> jenkins.war
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这会创建一个名为 &quot;jenkins&quot; 的新 screen 会话，并在其中启动 Jenkins。此时，当关闭 SSH 连接时，Jenkins 仍将继续在后台运行。</p></li></ol><h3 id="结束持久化" tabindex="-1"><a class="header-anchor" href="#结束持久化" aria-hidden="true">#</a> 结束持久化</h3><p>以上俩种方案都可以做到对运行 Jenkins 的持久化。那若何结束进程呢？可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看运行 Jenkins 的进程</span>
$: <span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">grep</span> jenkins.war

<span class="token comment"># 利用 kill 杀死进程(假设 PID 为 12345)</span>
$: <span class="token function">kill</span> <span class="token number">12345</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指令解析:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token operator">&lt;</span>your_process_name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>&lt;your_process_name&gt;</code> 是需要查找的进程名。该命令将列出所有匹配的进程，并显示其 PID（进程 ID）和其他详细信息。</p><p>要关闭正在运行的 nohup 程序，可以使用以下方法之一：</p><ol><li><p>使用 kill 命令：kill 命令可以发送信号给指定的进程，并请求其关闭或终止。例如，要关闭 PID 为 12345 的进程，请使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">kill</span> <span class="token number">12345</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果希望强制终止进程而不等待其自行关闭，请使用 <code>-9</code> 选项：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token number">12345</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用 pkill 命令：pkill 命令可以根据进程名或其他属性来查找并关闭匹配的进程。例如，要关闭名为 &quot;myprocess&quot; 的进程，请使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">pkill</span> myprocess
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果希望强制终止匹配的进程而不等待其自行关闭，请使用 <code>-9</code> 选项：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">pkill</span> <span class="token parameter variable">-9</span> myprocess
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>需要注意的是，在使用以上命令时，请确保已经正确标识了要关闭的进程，并且已经备份了任何重要的数据或配置文件。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,16),S={href:"https://www.liaoxuefeng.com/article/1083282007018592",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.macrozheng.com/mall/reference/jenkins.html",target:"_blank",rel:"noopener noreferrer"};function q(I,N){const e=m("ExternalLinkIcon");return k(),b("div",null,[h,n("p",null,[a("Jenkins 安装有很多方案，具体可以查看 Jenkins "),n("a",g,[a("官网"),s(e)]),a(" 介绍，其中多用到 Docker，可以看 Docker "),n("a",j,[a("官网安装介绍"),s(e)]),a("。")]),_,f,J,n("ol",null,[n("li",null,[n("p",null,[a("将"),n("a",x,[a("最新的稳定 Jenkins WAR 包"),s(e)]),a(" 下载到计算机上的相应目录。")])]),w]),$,n("ul",null,[n("li",null,[n("a",S,[a("使用 Jenkins 持续集成"),s(e)])]),n("li",null,[n("a",y,[a("使用 Jenkins 一键打包部署 SpringBoot 应用，就是这么 6！"),s(e)])])])])}const A=l(v,[["render",q],["__file","Jenkins.html.vue"]]);export{A as default};
