import{_ as s,Z as a,a0 as o,F as t,a1 as c,X as i,Y as p,$ as l}from"./framework-97fa2d96.js";const r={},e=a,d=o,u=t,k=c,v=l,m=i,g=p,h=v(`<h2 id="文件命名" tabindex="-1"><a class="header-anchor" href="#文件命名" aria-hidden="true">#</a> 文件命名</h2><ul><li><p>路由组件: 通常放置于 <code>src/views</code> 下，一般情况下以单个名词或动词进行命名。对于一些需要用多个单词才能描述的资源，可以使用 kebab-case 短横线风格命名。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/router/routes.ts</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> RouteRecordRaw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>

<span class="token keyword">const</span> routes<span class="token operator">:</span> RouteRecordRaw<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// 面对面栏目</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">&#39;/face-to-face&#39;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&#39;face-to-face&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@views/face-to-face.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> routes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>公共组件: 通常放置于 <code>src/components</code> 下，也可以视不同的使用情况，在路由文件夹下创建属于当前路由的 components 目录，作为一个小范围共享的公共组件目录来管理，而 src/components 则只存放全局性质的公共组件。</p><p>公共组件一般采用 PascalCase 帕斯卡大驼峰命名。这在 VSCode 里可以得到不同颜色的高亮效果。</p></li><li><p>types 文件, 通常放置于&#39;src/types&#39;目录作为管理公共类型, 统一使用<code>.ts</code>作为拓展名管理。而不是用<code>.d.ts</code>作为类型声明文件，好处是可以通过 <code>import type</code>显示导入。</p></li></ul><h2 id="代码变量命名" tabindex="-1"><a class="header-anchor" href="#代码变量命名" aria-hidden="true">#</a> 代码变量命名</h2><p>变量<strong>只采用 camelCase 小驼峰进行命名</strong>，并且依据不同类型，搭配不同的命名前缀和后缀。</p><ul><li><p>对于 string 字符串类型，使用相关的名词进行命名；</p></li><li><p>对于 number 数值类型，除变量本身可以代表数字的名词（如 age、second）外，还可以搭配<strong>后缀命名</strong>，常用的有 <strong>Count</strong>、<strong>Number</strong>、<strong>Size</strong>和<strong>Amount</strong> 等相关单位；</p></li><li><p>对于 boolean 布尔值类型，除常见可以表示状态的形容词（如 disabled、visible）外，还可以搭配 <strong>is</strong>、<strong>has</strong> 等 Be 动词进行<strong>前缀命名</strong>；</p><blockquote><p><strong>is</strong> 是为了同函数进行区分，如<code>showDialog()</code>是像是弹窗的方法，而 <code>isShowDialog</code>才是一个 boolean 类型逻辑判断。</p></blockquote></li><li><p>对于 array 数组类型，通常采用名词复数形式，或者名词后面加上 <strong>List</strong> 结尾作为命名后缀。</p></li><li><p>对于 function 函数的命名，<strong>只采用 camelCase 小驼峰风格</strong>。但是需要区分是否为异步。</p><p>获取数据的函数，通常采用 <code>get</code> 、 <code>query</code> 、 <code>read</code> 等代表会返回数据的动词作为前缀，如果还是觉得很难确定使用哪一个，可以统一使用 <code>get</code> ，也可以根据函数的操作性质来决定：</p><ul><li>如果是<strong>同步操作</strong>，不涉及接口请求，使用 <code>get</code> 作为前缀</li><li>如果是需要从 API 接口查询数据的<strong>异步操作</strong>，使用 <code>query</code> 作为前缀</li><li>如果是 Node.js 程序这种需要进行文件内容读取的场景，就使用 <code>read</code></li></ul><p><strong>修改数据的函数</strong>，通常采用 <code>save</code> 、 <code>update</code> 、 <code>delete</code> 等会变更数据的动词作为前缀，一般情况下：</p><ul><li>数据存储可以统一使用 <code>save</code></li><li>如果要区分新建或者更新操作，可以对新建操作使用 <code>create</code> ，对更新操作使用 <code>update</code></li><li>删除使用 <code>delete</code> 或 <code>remove</code></li><li>如果是 Node.js 程序需要对文件写入内容，使用 <code>write</code></li><li>表单验证合法性等场景，可以使用 <code>verify</code> 或 <code>check</code></li><li>切换可见性可以用 <code>show</code> 和 <code>hide</code> ，如果是写在一个函数里，可以使用 <code>toggle</code></li><li>发送验证码、发送邮件等等可以使用 <code>send</code></li><li>打开路由、打开外部 URL 可以使用 <code>open</code></li></ul></li></ul><h2 id="vue-中变量" tabindex="-1"><a class="header-anchor" href="#vue-中变量" aria-hidden="true">#</a> Vue 中变量</h2><p>对于 Composition API，如<code>ref</code>，为了显示区分此为 ref 类型响应式变量，可对变量增加后缀<code>Ref</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> numberRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文件" tabindex="-1"><a class="header-anchor" href="#参考文件" aria-hidden="true">#</a> 参考文件</h2>`,9),f={href:"https://vue3.chengpeiquan.com/efficient.html#%E5%91%BD%E5%90%8D%E6%8A%80%E5%B7%A7",target:"_blank",rel:"noopener noreferrer"};function b(_,y){const n=u("ExternalLinkIcon");return m(),g("div",null,[h,e("ul",null,[e("li",null,[e("a",f,[d("Vue3 入门指南与实战案例"),k(n)])])])])}const x=s(r,[["render",b],["__file","effect.html.vue"]]);export{x as default};
