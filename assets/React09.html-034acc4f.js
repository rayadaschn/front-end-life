const e=JSON.parse('{"key":"v-587367aa","path":"/Framework/React/React09.html","title":"React之技术细节","lang":"zh-CN","frontmatter":{"title":"React之技术细节","icon":"react","date":"2024-12-08T00:00:00.000Z","category":["框架"],"tag":["React"],"sticky":false},"headers":[{"level":2,"title":"setState 的更新逻辑","slug":"setstate-的更新逻辑","link":"#setstate-的更新逻辑","children":[]},{"level":2,"title":"setState 的 Promise 化","slug":"setstate-的-promise-化","link":"#setstate-的-promise-化","children":[]},{"level":2,"title":"什么时候用 Redux?","slug":"什么时候用-redux","link":"#什么时候用-redux","children":[]}],"git":{"createdTime":1733705323000,"updatedTime":1735451036000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":2.28,"words":683},"filePathRelative":"Framework/React/React09.md","localizedDate":"2024年12月8日","excerpt":"<p>这里用于梳理 React 的一些技术实现细节，以作技术回顾。</p>\\n<h2> setState 的更新逻辑</h2>\\n<p>这里主要讨论的是 React18 以前的策略。React18 之后，全部采用异步调用。可见<a href=\\"/front-end-life/Framework/React/React02.html#setstate-%E8%AE%BE%E7%BD%AE%E4%B8%BA%E5%BC%82%E6%AD%A5%E7%9A%84%E5%8E%9F%E5%9B%A0\\" target=\\"blank\\">setstate-的更新逻辑</a></p>\\n<p>React18 以前，setState 的更新逻辑有时是同步的有时是异步的，这取决于调用 setState 的环境。实际上，在 React 控制之内的事件处理过程中，setState 是异步的，而在 React 控制之外的事件处理过程中，setState 是同步的。</p>"}');export{e as data};
