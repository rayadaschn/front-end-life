import{_ as n,X as s,Y as a,$ as e}from"./framework-5dd7fabc.js";const o={},c=e,t=s,p=a,i=c(`<p>本文用于记录常用 Node 的一些方法，方便记忆。</p><h2 id="process-模块" tabindex="-1"><a class="header-anchor" href="#process-模块" aria-hidden="true">#</a> <code>process</code> 模块</h2><p><code>process</code> 在<code>Node.js</code>中每个应用程序都是一个进程类的<strong>实例对象</strong>。</p><p>使用<code>process</code>对象代表该应用程序,这是一个全局对象，可以通过它来获取<code>Node.js</code>应用程序以及运行该程序的用户、环境等各种信息的属性、方法和事件。</p><h3 id="进程对象属性" tabindex="-1"><a class="header-anchor" href="#进程对象属性" aria-hidden="true">#</a> 进程对象属性</h3><ul><li><p><code>execPath</code> 可执行文件的绝对路径,如 <code>/usr/local/bin/node</code></p></li><li><p><code>version</code> 版本号</p></li><li><p><code>versions</code> 依赖库的版本号</p></li><li><p><code>platform</code> 运行平台。 如 <code>darwin</code>、<code>freebsd</code>、<code>linux</code>、<code>sunos</code>、<code>win32</code></p></li><li><p><code>stdin</code> 标准输入流可读流，默认暂停状态</p></li><li><p><code>stdout</code> 标准输出可写流，同步操作</p></li><li><p><code>stderr</code> 错误输出可写流，同步操作</p></li><li><p><code>argv</code> 属性值为数组。 如 <code>node your-script.js arg1 arg2 arg3</code>, 则 :</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
<span class="token comment">// 输出结果为:</span>
<span class="token punctuation">[</span>
  <span class="token string">&#39;/usr/local/bin/node&#39;</span><span class="token punctuation">,</span> <span class="token comment">// process.argv[0]：Node 可执行文件路径</span>
  <span class="token string">&#39;/path/to/your-script.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// process.argv[1]：你运行的脚本路径</span>
  <span class="token string">&#39;arg1&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 从 argv[2] 开始是你传的参数</span>
  <span class="token string">&#39;arg2&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;arg3&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>env</code> 操作系统环境信息</p></li><li><p><code>pid</code> 应用程序进程 ID</p></li><li><p><code>title</code> 窗口标题</p></li><li><p><code>arch</code> 处理器架构 <code>arm</code>、<code>ia32</code>、<code>x64</code></p></li></ul><h3 id="进程方法" tabindex="-1"><a class="header-anchor" href="#进程方法" aria-hidden="true">#</a> 进程方法</h3><ul><li><code>process.cwd()</code> 方法: 返回当前目录，不使用任何参数</li><li><code>process.exit()</code>: 退出当前 node 应用程序。 <ul><li>可以传递一个参数，参数为 0 或 1。</li><li>0 表示正常退出，1 表示非正常退出。</li><li>如果不传递参数，默认退出状态码为 0。</li></ul></li></ul><h2 id="子进程-child-process-模块" tabindex="-1"><a class="header-anchor" href="#子进程-child-process-模块" aria-hidden="true">#</a> 子进程 <code>child_process</code> 模块</h2><p>在<code>Node.js</code>中，只有一个线程执行所有操作，如果某个操作需要大量消耗 CPU 资源的情况下，后续操作都需要等待。</p><p>在<code>Node.js</code>中，提供了一个<code>child_process</code>模块,通过它可以开启多个子进程，在多个子进程之间可以共享内存空间，可以通过子进程的互相通信来实现信息的交换。</p><h3 id="spawn-衍生方法" tabindex="-1"><a class="header-anchor" href="#spawn-衍生方法" aria-hidden="true">#</a> <code>spawn</code> 衍生方法</h3><p><code>spawn</code> 的意思是启动一个新的子进程(异步方法)，并与它保持流式通信（stdin、stdout、stderr）。</p><p>语法: <code>child_process.spawn(command, [args], [options])</code></p><ul><li><code>command</code> 必须指定的参数，指定需要执行的命令</li><li><code>args</code> 数组，存放了所有运行该命令需要的参数</li><li><code>options</code> 参数为一个对象，用于指定开启子进程时使用的选项 <ul><li><code>cwd</code> 子进程的工作目录</li><li><code>env</code> 环境变量</li><li><code>detached</code> 如果为<code>true</code>,该子进程将成为一个进程组中的领头进程，当父进程不存在时也可以独立存在。</li><li><code>stdio</code> 三个元素的数组，设置标准输入/输出 <ul><li><code>pipe</code> 在父进程和子进程之间创建一个管道，父进程可以通过子进程的<code>stdio[0]</code>访问子进程的标准输入，通过<code>stdio[1]</code>访问标准输出,<code>stdio[2]</code>访问错误输出</li><li><code>ipc</code> 在父进程和子进程之间创建一个专用与传递消息的 IPC 通道。可以调用子进程的 send 方法向子进程发消息，子进程会触发 message 事件</li><li><code>ignore</code> 指定不为子进程设置文件描述符。这样子进程的标准输入、标准输出和错误输出被忽略</li><li><code>stream</code> 子进程和父进程共享一个终端设备、文件、端口或管道</li><li>正整数值 和共享一个 steam 是一样的</li><li><code>null</code>或<code>undefined</code> 在子进程中创建与父进程相连的管道</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从当前进程中生出（spawn）一个新的子进程</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> spawn <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> ls <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;-lh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/usr&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 相当于运行命令：ls -lh /usr</span>

<span class="token comment">// 当子进程的标准输出流有数据写入时，会触发子进程对象的stdout事件</span>
ls<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">输出: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 当子进程的标准【错误输出】流有数据写入时，会触发子进程对象的stderr事件</span>
ls<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">错误: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 当子进程退出时，会触发子进程对象的exit事件。这里的退出【不管资源是否清理完】。</span>
<span class="token comment">// 因为多个进程可能会共享同一个输入/输出流，所以当子进程退出时，子进程的输入/输出可能并未终止。</span>
ls<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">子进程退出，退出码：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 当子进程所有输入输出都【终止】时，会触发子进程对象的close事件。这里是【真正的退出】</span>
<span class="token comment">// 该事件的参数code为子进程的退出码，0表示正常退出，1表示非正常退出。</span>
ls<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">子进程退出，退出码：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>spawn</code>方法返回一个隐式创建的代表子进程的<code>ChildProcess</code>对象;</li><li>子进程对象同样拥有<code>stdin</code>属性值为一个可用于读入子进程的标准输入流对象</li><li>子进程对象同样拥有<code>stdiout</code>属性值和<code>stderr</code>属性值可分别用于写入子进程的标准输出流与标准错误输出流</li></ul><h3 id="exec-同步开启子进程" tabindex="-1"><a class="header-anchor" href="#exec-同步开启子进程" aria-hidden="true">#</a> <code>exec</code> 同步开启子进程</h3><p><code>exec</code>方法可以开启一个用于运行某个命令的子进程并缓存子进程的输出结果</p><p><code>spawn</code>是一个异步方法，<code>exec</code>是一个同步方法，衍生一个 shell 并在 shell 上运行命令</p><p>语法: <code>child_process.exec(command,[options],[callback]);</code></p><ul><li><code>command</code> 需要执行的命令</li><li><code>options</code> 选项对象</li><li><code>cwd</code> 子进程的当前工作目录</li><li><code>env</code> 指定子进程的环境变量</li><li><code>encoding</code> 指定输出的编码</li><li><code>timeout</code> 子进程的超时时间</li><li><code>maxbuffer</code> 指定缓存标准输出和错误输出的缓存区最大长度</li><li><code>killSignal</code> 指定关闭子进程的信号，默认值为 &quot;SIGTERM&quot;</li><li><code>callback</code> 指定子进程终止时调用的回调函数: <code>(error, stdout, stderr) =&gt; { ... }</code><ul><li><code>error</code> 子进程的错误信息</li><li><code>stdout</code> 子进程的标准输出</li><li><code>stderr</code> 子进程的标准错误输出</li></ul></li></ul><h3 id="execfile-开启子进程" tabindex="-1"><a class="header-anchor" href="#execfile-开启子进程" aria-hidden="true">#</a> <code>execFile</code> 开启子进程</h3><p>可以使用 <code>execFile</code> 开启一个专门用于运行某个可执行文件的子进程。类似 <code>child_process.exec()</code>，但直接衍生命令，且无需先衍生一个 <code>shell</code>。</p><p>语法: <code>child_process.execFile(file,[args],[optioins],[callback]);</code></p><ul><li><code>file</code> 可执行文件的路径</li><li><code>args</code> 数组，存放了所有运行该命令需要的参数</li><li><code>options</code> 参数为一个对象，用于指定开启子进程时使用的选项 <ul><li><code>cwd</code> 子进程的工作目录</li><li><code>env</code> 环境变量</li><li><code>detached</code> 如果为<code>true</code>,该子进程将成为一个进程组中的领头进程，当父进程不存在时也可以独立存在。</li><li><code>stdio</code> 三个元素的数组，设置标准输入/输出</li></ul></li></ul>`,26),l=[i];function d(u,r){return t(),p("div",null,l)}const m=n(o,[["render",d],["__file","Node15.html.vue"]]);export{m as default};
