import{_ as t,Z as p,a0 as o,F as c,a1 as i,X as l,Y as u,$ as r}from"./framework-97fa2d96.js";const d={},s=p,n=o,k=c,m=i,a=r,v=l,g=u,b=a(`<h1 id="自定义-cli-01-之-commander" tabindex="-1"><a class="header-anchor" href="#自定义-cli-01-之-commander" aria-hidden="true">#</a> 自定义 Cli 01 之 commander</h1><p>问题：当我们在用脚手架时，究竟发生了什么？当我们在 terminal 中键入 <code>create-react-app project-name</code> 时，究竟发生了什么？</p><h2 id="初始化-npm-init" tabindex="-1"><a class="header-anchor" href="#初始化-npm-init" aria-hidden="true">#</a> 初始化 npm init</h2><p>脚手架实际上也是一个工具包，只不过它替我们自动化完成了很多初始任务。我们先 <code>npm init</code> 初始化一个项目。</p><p>最终会生成一个 <code>package.json</code> 包，在这个包中，我们还需要新建一个 “ bin ” 字段，它可以指定一些可以作为命令行工具使用的 JavaScript 脚本文件。当用户全局安装时，这些脚本文件会被添加到系统的可执行路径中，从而可以在任何地方通过命令行来执行这些脚本。</p><p><code>bin</code> 字段接收一个对象作为参数，对象的属性名表示命令的名称，属性值表示对应的 JavaScript 脚本文件。在这里，我们便能设定如“ create-react-app ”这样的脚手架名称了！如下，我们设定一个名为 <code>huy-cli</code>的命令行工具：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-package&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;My cli package&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;huy-cli&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./lib/index.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>huy-cli</code>命令行指向了<code>&quot;./lib/index.js&quot;</code>，因此我们再创建一下这个文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./lib/index.js</span>
#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello my cli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在文件头我们设置了一行<code>#!/usr/bin/env node</code> 指定当前脚本由 node.js 进行解析。</p><p>这个时候初始准备工作就完成了，但是还是无法在 terminal 中直接运行 <code>huy-cli</code>，原因在于 node 并没有获取到我们这个包的地址，它现在还查询不到。如果我们把这个包引入到我们的项目中，它可以运行，但是现在还没有，这里我们还要用到 <code>npm link</code> 进行软连接。</p><p><code>npm link</code> 是一个 Node.js 工具，它允许你在本地开发时使用本地的 npm 模块，而不是从远程 npm 仓库中下载依赖。通常情况下，<code>npm link</code> 的使用场景是在开发一个 npm 模块或一个应用程序时，需要将本地修改后的模块或包与应用程序进行关联，并在开发过程中实时测试和调试。</p><p>使用 <code>npm link</code> 命令链接本地模块到全局命令行环境下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> <span class="token function">link</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个时候，我们就可以在 terminal 中直接执行 <code>huy-cli</code>了，它会有 node 解析我们自定义的 <code>index.js</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$:  huy-cli

<span class="token comment"># 打印如下结果:</span>
Hello my cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果想要取消 <code>npm link</code>，直接在当前项目中执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> unlink <span class="token operator">&lt;</span>package_name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h2 id="初探-commander" tabindex="-1"><a class="header-anchor" href="#初探-commander" aria-hidden="true">#</a> 初探 commander</h2>`,18),h={href:"https://github.com/tj/commander.js",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"commander",-1),j=s("code",null,"commander",-1),x=a(`<ol><li>安装 <code>commander</code> 模块</li></ol><p>使用以下命令在项目中安装 <code>commander</code> 模块：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> commander
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>引入 <code>commander</code> 模块</li></ol><p>在 JavaScript 文件中引入 <code>commander</code> 模块：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>配置命令和选项</li></ol><p>使用 <code>program</code> 对象来配置命令和选项：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>program
  <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&#39;0.1.0&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-p, --port &lt;number&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;set server port&#39;</span><span class="token punctuation">,</span> parseInt<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-e, --env &lt;name&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;set environment name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-d, --debug&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;output extra debugging&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;start [name]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;start server&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Starting server </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>options<span class="token punctuation">.</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>.version()</code> 方法用于指定程序的版本号，<code>.option()</code> 方法用于定义选项，<code>.command()</code> 方法用于定义命令，<code>.action()</code> 方法用于指定命令执行的动作。</p><ol start="4"><li>解析命令行参数</li></ol><p>使用 <code>program.parse()</code> 方法解析命令行参数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>运行命令行工具</li></ol><p>使用以下命令运行命令行工具：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> my-program.js start my-server <span class="token parameter variable">--port</span> <span class="token number">8080</span> <span class="token parameter variable">--env</span> production <span class="token parameter variable">--debug</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>my-program.js</code> 是你的程序入口文件，<code>start</code> 是命令名，<code>my-server</code> 是命令参数，<code>--port</code>、<code>--env</code> 和 <code>--debug</code> 是选项名，<code>8080</code>、<code>production</code> 和 <code>true</code> 是选项值。</p><p>以上就是 <code>commander</code> 的基本使用方法。除此之外，<code>commander</code> 还提供了很多其他的功能，例如自动生成帮助信息、支持子命令、自定义选项解析器等等，可以根据实际需求进行相应的配置和使用。</p><h3 id="program-命令行的主-子命令" tabindex="-1"><a class="header-anchor" href="#program-命令行的主-子命令" aria-hidden="true">#</a> program 命令行的主/子命令</h3><p>在 <code>commander</code> 中，<code>program</code> 是一个核心对象，用于定义命令行工具的主命令和子命令，并处理命令行参数。</p><p><code>program</code> 对象是通过调用 <code>require(&#39;commander&#39;).program</code> 得到的，而 <code>require(&#39;commander&#39;)</code> 则是引入 <code>commander</code> 模块并返回其中的 <code>Command</code> 类。因此，可以将 <code>program</code> 视为 <code>Command</code> 类的一个实例，用于设置和处理命令行参数。</p><p>例如，在以下代码中，我们使用 <code>program</code> 定义了一个名为 <code>my-tool</code> 的主命令：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program
  <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;My command line tool&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;My command line tool&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>.version()</code> 方法用于指定命令行工具的版本号，<code>.description()</code> 方法用于指定命令行工具的描述信息，<code>.action()</code> 方法用于指定主命令被执行时的回调函数。</p><p>在最后一行的 <code>.parse()</code> 方法中，<code>process.argv</code> 表示当前进程的命令行参数数组。通过调用 <code>.parse()</code> 方法，程序会解析这个参数数组，并根据不同的命令和选项执行相应的操作。</p><h3 id="version-包版本" tabindex="-1"><a class="header-anchor" href="#version-包版本" aria-hidden="true">#</a> version 包版本</h3><ol><li>配置命令和选项</li></ol><p>使用 <code>program.version()</code> 方法来定义程序的版本号：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>program<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>解析命令行参数并查看版本</li></ol><p>在代码中调用 <code>.parse()</code> 方法解析命令行参数，当用户在命令行中输入 <code>-V</code> 或 <code>--version</code> 时，会自动输出程序的版本号：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>program<span class="token punctuation">.</span>version<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>program<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整代码样例如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env node</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>program<span class="token punctuation">.</span>version<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>program<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在终端中执行以下命令即可查看程序版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> my-program.js <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>my-program.js</code> 是你的程序文件名。</p><h3 id="option-命令行选项方法" tabindex="-1"><a class="header-anchor" href="#option-命令行选项方法" aria-hidden="true">#</a> option 命令行选项方法</h3><p>在 <code>commander</code> 中，<code>option</code> 是用来定义命令行选项的方法。选项是指命令行中可选的参数，以单破折号或双破折号开头，例如 <code>-p</code>、<code>--port</code> 等。选项可以带有值或不带值，可以是布尔型、字符串型、数字型等类型。</p><p><code>option</code> 方法接收三个参数：</p><ol><li><p>选项名：一个字符串，表示选项的名称，可以是单破折号形式（例如 <code>-p</code>），也可以是双破折号形式（例如 <code>--port</code>）。</p></li><li><p>描述信息：一个字符串，用于描述选项的作用和用法。</p></li><li><p>处理函数：一个函数，用于处理选项的值，该函数接收一个参数，即选项的值，可以对其进行转换、验证等操作，然后返回处理后的结果。</p></li></ol><p>例如，在以下代码中，<code>.option()</code> 方法定义了三个选项：<code>-p, --port &lt;number&gt;</code>、<code>-e, --env &lt;name&gt;</code> 和 <code>-d, --debug</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-p, --port &lt;number&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;set server port&#39;</span><span class="token punctuation">,</span> parseInt<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-e, --env &lt;name&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;set environment name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-d, --debug&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;output extra debugging&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>&lt;number&gt;</code> 表示该选项要求输入一个数字类型的值，并使用 <code>parseInt</code> 方法将其转换成整数类型；<code>&lt;name&gt;</code> 表示该选项要求输入一个字符串类型的值；<code>-d, --debug</code> 表示该选项是一个布尔型选项，不需要输入值。</p><p>在程序运行时，可以通过 <code>program.opts()</code> 方法获取所有选项的值。例如，在以下代码中，<code>.opts()</code> 方法获取了 <code>-p</code> 和 <code>-e</code> 选项的值，并打印到控制台上：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-p, --port &lt;number&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;set server port&#39;</span><span class="token punctuation">,</span> parseInt<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-e, --env &lt;name&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;set environment name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>program<span class="token punctuation">.</span><span class="token function">opts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在终端中执行以下命令会输出选项的值：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> my-program.js <span class="token parameter variable">-p</span> <span class="token number">8080</span> <span class="token parameter variable">--env</span> production
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span> <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token string">&quot;production&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="command-定义子命令" tabindex="-1"><a class="header-anchor" href="#command-定义子命令" aria-hidden="true">#</a> command 定义子命令</h3><p>在 <code>commander</code> 中，<code>command</code> 方法用于定义子命令。子命令是指在一个主命令下的子命令，例如 <code>git commit</code> 命令中的 <code>commit</code> 就是一个子命令。</p><p><code>command</code> 方法接收两个参数：</p><ol><li><p>命令名称：一个字符串，表示子命令的名称。</p></li><li><p>命令描述：一个字符串，用于描述子命令的作用和用法。</p></li></ol><p>例如，在以下代码中，<code>.command()</code> 方法定义了一个名为 <code>start</code> 的子命令：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;start &lt;name&gt; [otherArgs...]&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;start server&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Starting server </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Araay: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>&lt;name&gt;</code> 表示该子命令需要输入一个参数，这个参数的值会被传递给 <code>.action()</code> 中的回调函数。<code>[otherArgs...]</code> 表示非必要的其它参数，以空格划分，最后输出 <code>args</code> 数组形式。</p><p>在程序运行时，可以通过 <code>program.parse()</code> 方法解析命令行参数，并根据不同的命令执行不同的操作。例如，在以下代码中，如果用户输入了 <code>start</code> 子命令，则会执行 <code>.action()</code> 中的回调函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;start &lt;name&gt;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;start server&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Starting server </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在终端中执行以下命令可以启动子命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> my-program.js start my-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Starting server my-server<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因此，<code>command</code> 方法使得我们能够更加清晰和灵活地组织命令行工具的功能，将不同的操作分别封装成子命令，并通过 <code>.parse()</code> 方法来解析命令行参数并执行相应的操作。</p><h3 id="定义多个子命令" tabindex="-1"><a class="header-anchor" href="#定义多个子命令" aria-hidden="true">#</a> 定义多个子命令</h3><p>在 <code>commander</code> 中，可以使用多个 <code>.command()</code> 方法来定义不同的子命令。例如，在以下代码中，我们定义了两个名为 <code>start</code> 和 <code>stop</code> 的子命令：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;start &lt;name&gt;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;start server&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Starting server </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;stop &lt;name&gt;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;stop server&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Stopping server </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>.command(&#39;start &lt;name&gt;&#39;)</code> 定义了一个名为 <code>start</code> 的子命令，并指定了一个命令参数 <code>&lt;name&gt;</code>；<code>.command(&#39;stop &lt;name&gt;&#39;)</code> 定义了一个名为 <code>stop</code> 的子命令，并指定了一个命令参数 <code>&lt;name&gt;</code>。</p><p>在程序运行时，根据传递的参数不同，会执行不同的子命令。例如，在终端中执行以下命令会启动 <code>start</code> 子命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> my-program.js start my-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Starting server my-server<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行以下命令会启动 <code>stop</code> 子命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> my-program.js stop my-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Stopping server my-server<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="action-指定回调函数" tabindex="-1"><a class="header-anchor" href="#action-指定回调函数" aria-hidden="true">#</a> action 指定回调函数</h3><p>在 <code>commander</code> 中，<code>.action()</code> 方法用于指定命令或子命令被调用时的回调函数。该方法接收一个回调函数作为参数，这个回调函数会在命令或子命令被执行时被调用。</p><p>例如，在以下代码中，我们使用 <code>.action()</code> 方法指定了一个回调函数，该回调函数会在 <code>start</code> 子命令被执行时被调用，并输出一条日志信息：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;start &lt;name&gt;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;start server&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Starting server </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在终端中执行以下命令可以启动子命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> my-program.js start my-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Starting server my-server<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到，在执行 <code>start</code> 子命令时，<code>.action()</code> 方法指定的回调函数被自动调用，并输出了一条日志信息。</p><p>除了在子命令中使用外，<code>.action()</code> 方法也可以在主命令中使用，用于指定主命令被执行时的回调函数。例如，在以下代码中，我们使用 <code>.action()</code> 方法指定了一个回调函数，该回调函数会在主命令被执行时被调用，并输出一条日志信息：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program
  <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;My command line tool&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;My command line tool&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在终端中执行以下命令可以执行主命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> my-program.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>My <span class="token builtin class-name">command</span> line tool
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,91);function y(q,_){const e=k("ExternalLinkIcon");return v(),g("div",null,[b,s("p",null,[n("光完成上述操作还不够，我们在用脚手架的时候，可能还会给它传递一些参数，这个时候就要用的 TJ 大神的 "),s("a",h,[n("commander"),m(e)]),n(" 包了。"),f,n(" 是一个 Node.js 的命令行框架，可以帮助我们轻松地构建命令行工具。下面是 "),j,n(" 的基本使用方法（概述，具体用法看下文）：")]),x])}const w=t(d,[["render",y],["__file","cli01.html.vue"]]);export{w as default};
