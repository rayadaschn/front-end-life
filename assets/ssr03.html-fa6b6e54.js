import{_ as a,V as n,W as s,Y as e}from"./framework-2eee3422.js";const t={},p=e,o=n,c=s,i=p(`<h1 id="nuxt-3-之基础入门" tabindex="-1"><a class="header-anchor" href="#nuxt-3-之基础入门" aria-hidden="true">#</a> Nuxt 3 之基础入门</h1><h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h2><p>不同于常规的 Vue 项目是以 <code>index.js</code> 为项目的入口文件，Nuxt 将 <code>App.vue</code> 作为文件入口点，并为应用程序的每个路由展示内容。这是 Nuxt 的一个核心特性是文件系统路由器。pages/ 目录中的每个 Vue 文件都会创建一个相应的 URL(或路由)来显示文件的内容。</p><ol><li><p>路由的占位：</p><p>同 Vue 一样，Nuxt 也是通过路由占位切换不同的页面。在 Vue 中是通过 <code>RouterView</code> ，而 Nuxt 为 <code>NuxtPage</code>。</p></li><li><p>路由的切换:</p><p>通常在 Nuxt 中是通过 <code>&lt;NuxtLink&gt;</code> 组件在它们之间链接页面。它呈现一个 <code>&lt;a&gt;</code> 标记，其中 href 属性设置为页面的路由。</p><p>当然可以通过 <code>navigateTo</code> 或者 <code>useRouter</code> 等函数式编程进行路由切换，但是这不利于 SEO 的解析。此时效果等同于 SPA 。</p></li><li><p>路由参数 params:</p><p>通过 <code>useRoute</code> 可以获取路由参数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
  <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 当访问 /posts/1, route.params.id 值为 1</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>导航守卫: 中间件 Middleware</p><p>在 Nuxt 中有一个中间件 Middleware 的概念。实际上就是导航守卫的作用。</p><ul><li><p>创建 middleware 文件</p><p>在 Nuxt 项目中，在 <code>middleware</code> 目录下创建一个新的 JavaScript 文件。该文件将包含所有的 middleware 代码。例如，可以创建一个名为 <code>auth.js</code> 的新文件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> store<span class="token punctuation">,</span> redirect <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果用户未经身份验证，则重定向到登录页面</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>loggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们定义了一个名为 <code>auth</code> 的 middleware，用于确保用户已经登录。如果用户未经身份验证，则该函数将使用 <code>redirect</code> 方法将用户重定向到登录页面。</p></li><li><p>注册 middleware</p><p>在 Nuxt 中，可以在路由配置对象或页面组件中注册 middleware。例如，可以在 <code>nuxt.config.js</code> 文件中为全局路由注册 middleware：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">router</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">middleware</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;auth&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们将 <code>auth</code> middleware 注册为全局路由 middleware。这意味着每个路由都将使用该 middleware。</p><p>此外，我们还可以在路由配置对象或页面组件中注册 middleware。在页面组件中注册 middleware：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">middleware</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;auth&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们将 <code>auth</code> middleware 注册为该页面组件的 middleware。这意味着该页面将使用该 middleware。</p></li><li><p>使用 middleware</p><p>现在，当用户访问需要身份验证的页面时，middleware 将运行并检查用户是否已经登录。如果用户未经身份验证，则 middleware 将将用户重定向到登录页面。</p><p>这就是使用 middleware 的基本步骤。你可以使用 middleware 完成许多任务，例如身份验证、页面初始化、请求处理、性能指标跟踪等。在编写 middleware 时，请记住将其注册到正确的路由或页面上，并在 middleware 函数中执行必要的逻辑。</p></li></ul></li></ol>`,4),l=[i];function d(r,u){return o(),c("div",null,l)}const m=a(t,[["render",d],["__file","ssr03.html.vue"]]);export{m as default};
