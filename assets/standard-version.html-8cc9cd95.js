import{_ as d,Z as t,a0 as o,F as r,a1 as l,X as c,Y as p,$ as v}from"./framework-97fa2d96.js";const u={},e=t,n=o,m=r,s=l,i=v,g=c,b=p,h=e("p",null,"standard-version 是一个基于 Conventional Commits 规范的版本自动化管理工具。它可以自动化地生成 changelog、更新版本号和生成 git 标签等操作，使得版本管理和发布流程更加规范化和自动化。",-1),k=e("p",null,[n("Conventional Commit 规范在"),e("a",{href:"GitOperationManuals"},"《Git 操作手册》"),n(" 一文中介绍过，这里不再赘述。本文介绍一下 standard-version 这个工具是如何通过 package.json 更新 CHANGELOG 的。")],-1),_={href:"https://github.com/conventional-changelog/standard-version#bumpfiles-packagefiles-and-updaters",target:"_blank",rel:"noopener noreferrer"},f=i(`<h2 id="基本的-git-发版过程" tabindex="-1"><a class="header-anchor" href="#基本的-git-发版过程" aria-hidden="true">#</a> 基本的 Git 发版过程</h2><p>一个基本的 Git 版本发布流程，包括以下具体步骤：</p><ul><li><code>git pull origin master</code>：从远程仓库的 master 分支拉取最新代码。这是为了确保本地代码与远程代码保持同步，避免版本冲突。</li><li>根据 package.json 中的 version 更新版本号和 changelog。通常可以使用自动化工具，如 standard-version 或 npm version 等，来自动生成版本号和 changelog，以提高版本管理的规范性和效率。</li><li><code>git add -A</code>：将所有变更的文件添加到 Git 暂存区。</li><li><code>git commit</code>：提交改动到本地 Git 仓库，并添加提交信息。提交信息应当清晰、简洁、明确，以便其他开发人员理解改动的内容。</li><li><code>git tag</code>：打上版本号标签，并将标签推送到远程仓库。例如，可以使用 <code>git tag v1.0.0</code> 命令打上版本号为 1.0.0 的标签。标签可以方便地标记版本和发布信息，同时也可以用于 Git 回退和比较等操作。</li><li><code>git push</code>：将本地代码和标签推送到远程仓库。例如，可以使用 <code>git push origin master --tags</code> 命令将本地 master 分支和所有标签推送到远程仓库。</li></ul><p>上述过程中绝大部分可以通过 standard-version 来自动化完成，以减少意外的产生。</p><p>standard-version 所做的事情实际上就 3 点: 自动化升级 <code>package.json</code> 中的版本号、更新/生成 <code>CHANGELOG.md</code> 和 tag 版本。下面看一下具体如何使用。</p><h2 id="安装和配置" tabindex="-1"><a class="header-anchor" href="#安装和配置" aria-hidden="true">#</a> 安装和配置</h2><p>在项目中安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> standard-version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或全局安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> standard-version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完后，在项目的 package.json 中添加脚本命令:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// other...</span>
    <span class="token property">&quot;release&quot;</span><span class="token operator">:</span> <span class="token string">&quot;standard-version&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>在项目目录下使用，以更新 CHANGELOG 和版本号：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 方法 1:  局部安装使用方法</span>
$: npx standard-version
<span class="token comment"># 方法 2:  局部安装使用刚刚添加的脚本命令</span>
$: <span class="token function">npm</span> run release

<span class="token comment"># 方法 3:  若全局安装则直接使用</span>
$: standard-version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),x={href:"http://CHANGELOG.md",target:"_blank",rel:"noopener noreferrer"},G=i(`<h2 id="定制使用" tabindex="-1"><a class="header-anchor" href="#定制使用" aria-hidden="true">#</a> 定制使用</h2><p>定制 standard-version：standard-version 工具支持定制化配置，以满足不同项目的需求。具体来说，可以通过以下方式进行定制化配置：</p><ul><li><p><code>--first-release</code>：缩写 <code>-f</code>，指定是否为第一个版本发布，如果是，则不升级版本号，并会自动将版本号设置为 1.0.0。</p></li><li><p><code>--release-as &lt;version&gt;</code>：缩写 <code>-r &lt;version&gt;</code>，手动指定要发布的版本号。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: standard-version <span class="token parameter variable">-r</span> minor
<span class="token comment"># output tag: v1.1.0</span>

$: standard-version <span class="token parameter variable">-r</span> <span class="token number">1.0</span>.0
<span class="token comment"># output tag: v1.0.0</span>

$: standard-version <span class="token parameter variable">-r</span> <span class="token number">1.0</span>.1-test
<span class="token comment"># output tag: v1.0.1-test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>--tag-prefix [prefix]</code>：缩写 <code>-t [prefix]</code>，指定 git 标签的前缀，默认为 <code>v</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: standard-version <span class="token parameter variable">-t</span> <span class="token string">&#39;stable-&#39;</span>
<span class="token comment"># output tag: stable-1.0.1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>--prerelease [suffix]</code>：缩写 <code>-p [prefix]</code>，指定 git 标签的后缀。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: standard-version <span class="token parameter variable">-p</span> <span class="token string">&#39;beta&#39;</span>
<span class="token comment"># output tag: v1.0.1-beta.0</span>

$: standard-version <span class="token parameter variable">-p</span> <span class="token string">&#39;beta&#39;</span>
<span class="token comment"># output tag: v1.0.1-0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>--dry-run</code>：缩写 <code>-d</code>，运行 standard-version 命令的模拟模式，不会对代码进行实际修改和提交。</p></li></ul><h2 id="使用技巧" tabindex="-1"><a class="header-anchor" href="#使用技巧" aria-hidden="true">#</a> 使用技巧</h2><p>若是在 package.json 中添加了脚本命令</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// other...</span>
    <span class="token property">&quot;release&quot;</span><span class="token operator">:</span> <span class="token string">&quot;standard-version&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则在项目运行时，也可添加定制参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> run release -- --dry-run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，第一个 <code>--</code> 是为了告诉 npm 命令后面的参数将会被传递给执行的脚本，而第二个 <code>--</code> 是为了将参数传递给 <code>npm run release</code> 命令所调用的脚本。</p><p>因此，为了将参数准确地传递给执行的脚本，需要在 npm run 命令后面添加两个 <code>--</code>，其中第一个 <code>--</code> 是告诉 npm 命令后面的参数将会被传递给执行的脚本，而第二个 <code>--</code> 是将参数传递给 npm run 命令所调用的脚本。通过这种方式，才能够正确地传递参数并执行脚本。</p>`,10);function j(C,N){const a=m("ExternalLinkIcon");return g(),b("div",null,[h,k,e("p",null,[e("a",_,[n("官方文档传送门 🚪"),s(a)])]),f,e("p",null,[n("运行上面的命令后，standard-version 工具会自动根据 Conventional Commits 规范生成新的版本号和 changelog，并更新 package.json 和 "),e("a",x,[n("CHANGELOG.md"),s(a)]),n(" 文件。同时，它会自动打上 git 标签，并等待 git push 推送到远程仓库。")]),G])}const q=d(u,[["render",j],["__file","standard-version.html.vue"]]);export{q as default};
