const e=JSON.parse('{"key":"v-2d72fd45","path":"/JavaScript/JS02.html","title":"原型-原型链-new的二三事","lang":"zh-CN","frontmatter":{"title":"原型-原型链-new的二三事","icon":"javascript","date":"2023-02-20T00:00:00.000Z","category":["javascript"],"tag":["javascript"],"sticky":false},"headers":[{"level":2,"title":"先说结论","slug":"先说结论","link":"#先说结论","children":[]},{"level":2,"title":"1. 到底是什么?","slug":"_1-到底是什么","link":"#_1-到底是什么","children":[]},{"level":2,"title":"2. 原型链","slug":"_2-原型链","link":"#_2-原型链","children":[]}],"git":{"createdTime":1683516320000,"updatedTime":1683890174000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":6}]},"readingTime":{"minutes":8.32,"words":2497},"filePathRelative":"JavaScript/JS02.md","localizedDate":"2023年2月20日","excerpt":"<h1> 原型-原型链-new 的二三事</h1>\\n<h2> 先说结论</h2>\\n<p>在 JavaScript 中，每个函数都有一个 <code>prototype</code> 属性和一个 <code>__proto__</code> 属性。它们两者之间有以下区别：</p>\\n<ol>\\n<li><code>prototype</code> 是函数<strong>独有</strong>的属性，而 <code>__proto__</code> 是每个对象（包括函数对象）<strong>都有</strong>的属性。</li>\\n<li><code>prototype</code> 属性是用于实现基于原型的继承的。它指向一个对象，该对象被用作构造函数创建的所有对象的<strong>原型</strong>。而 <code>__proto__</code> 属性则指向该对象的原型，即该对象继承自哪个对象。</li>\\n<li>在构造函数中，<code>prototype</code> 属性通常用于添加方法和属性，以便通过该构造函数创建的所有对象都可以访问这些方法和属性。而 <code>__proto__</code> 属性则用于从父对象继承属性和方法。</li>\\n<li>由于 <code>prototype</code> 是函数特有的属性，因此只能在函数内部使用；而 <code>__proto__</code> 属性是每个对象都有的属性，因此可以在任何对象上使用。</li>\\n<li><code>prototype</code> 属性不会随着对象创建而自动赋值给该对象的 <code>__proto__</code> 属性，需要使用 <code>new</code> 关键字来创建对象并将其 <code>__proto__</code> 属性指向构造函数的 <code>prototype</code> 属性。而 <code>__proto__</code> 属性则会自动指向构造函数的 <code>prototype</code> 属性所引用的对象。</li>\\n</ol>"}');export{e as data};
