import{_ as n,X as s,Y as a,$ as t}from"./framework-5dd7fabc.js";const p={},e=t,o=s,c=a,l=e(`<p>线上的脚本在用户端加载失败，如何重试？普通的解决办法是<strong>重新加载页面</strong>： 最简单的方法是要求用户手动刷新页面。</p><p>但是这只能在用户端网络不好的情况刷新有效，若是，或者脚本本身存在问题，用户手动刷新页面可能无法解决问题。这种情况下，需要将脚本地址指向备用地址，然后进行重试。</p><h2 id="设计难点" tabindex="-1"><a class="header-anchor" href="#设计难点" aria-hidden="true">#</a> 设计难点</h2><p>对于该问题实际上有以下几个方面需要进行考虑。</p><ol><li>脚本加载失败如何判断？</li><li>脚本加载失败什么时候进行重试?</li><li>脚本如何重试?</li></ol><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><ol><li><p>脚本加载失败如何判断？</p><p>可以通过 <code>window.onerror</code> 来判断脚本加载失败。但是需要做错误处理, 因为除了脚本加载错误外, 还有可能是其他错误。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断是否为脚本加载错误</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">!==</span> <span class="token string">&#39;SCRIPT&#39;</span> <span class="token operator">||</span> e <span class="token keyword">instanceof</span> <span class="token class-name">ErrorEvent</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;捕获到错误&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span> <span class="token comment">// 捕获时生效</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>脚本加载失败什么时候进行重试?</p><p>在上述代码中, 我们使用了捕获时监听错误, 这是由于像 <code>throw error</code> 这样的错误是不会冒泡的, 所以需要在捕获时期进行监听。</p><p>此外， 事件的监听应当在脚本加载前执行，只是因为 js 是单线程的，如果脚本先加载，产生错误便不会继续进行执行了。</p></li><li><p>脚本如何重试?</p><p>光重试还不行, 应该对脚本设置多个域名, 进行备份, 当一个脚本加载失败后, 还可以尝试加载其他域名下的同脚本。因此，可以用一个数组来保存多个脚本地址。</p><p>其次，重试过程中，还需要保证脚本发生阻塞，以防止后续加载的脚本对重试的脚本产生依赖。</p><p>最终代码:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>脚本加载错误<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;test1new.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test2new.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test3new.com&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> retryDomain <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 重试所用域名</span>

      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
        <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">!==</span> <span class="token string">&quot;SCRIPT&quot;</span> <span class="token operator">||</span> e <span class="token keyword">instanceof</span> <span class="token class-name">ErrorEvent</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;捕获到错误&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> key <span class="token operator">=</span> url<span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> retryDomain<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            retryDomain<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 初始重试所用域名序号</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">const</span> domain <span class="token operator">=</span> domains<span class="token punctuation">[</span>retryDomain<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          url<span class="token punctuation">.</span>host <span class="token operator">=</span> domain<span class="token punctuation">;</span> <span class="token comment">// 设置为新的域名</span>

          <span class="token comment">// 创建新的 script 标签, 但这样加载并不会产生阻塞</span>
          <span class="token comment">// const newScript = document.createElement(&quot;script&quot;);</span>
          <span class="token comment">// newScript.src = url.toString();</span>
          <span class="token comment">// document.body.insertBefore(newScript, e.target);</span>

          <span class="token comment">// 使其保持阻塞</span>
          document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>\`\\<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;\${url.toString()}&quot;</span><span class="token operator">&gt;</span>\\</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\`)

          retryDomain[key] = (retryDomain[key] + 1) % domains.length; // index 增加
        },
        true // 冒泡捕获
      );
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://test1.com/test.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://testError.com/test.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://test3.com/test.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,7),i=[l];function u(k,r){return o(),c("div",null,i)}const v=n(p,[["render",u],["__file","JS20.html.vue"]]);export{v as default};
