import{_ as t,Z as e,a0 as p,F as o,a2 as l,a1 as c,X as i,Y as u,$ as r}from"./framework-97fa2d96.js";const d={},k=e,n=p,v=o,m=l,g=c,s=r,h=i,b=u,f=s(`<p>记录一些经常忘记的概念。</p><h3 id="请描述-tcp-三次握手和四次挥手" tabindex="-1"><a class="header-anchor" href="#请描述-tcp-三次握手和四次挥手" aria-hidden="true">#</a> 请描述 TCP 三次握手和四次挥手</h3><ol><li>先建立连接(确保双方都有收发消息的能力)</li><li>再传输内容(如发送一个 get 请求)</li><li>网络连接是 TCP 协议，传输内容是 HTTP 协议。</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202309042127410.png" alt="三次握手" tabindex="0" loading="lazy"><figcaption>三次握手</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/format,png-20230309230614791.png" alt="四次挥手" tabindex="0" loading="lazy"><figcaption>四次挥手</figcaption></figure><h2 id="for-in-和-for-of-的区别是什么" tabindex="-1"><a class="header-anchor" href="#for-in-和-for-of-的区别是什么" aria-hidden="true">#</a> for...in 和 for...of 的区别是什么</h2><p>在 JavaScript 中，<code>for...in</code> 和 <code>for...of</code> 是两种不同的循环语句，区别如下：</p><ol><li><p><code>for...in</code> 循环：</p><ul><li>用于迭代对象的可枚举属性。</li><li>循环变量是对象的属性名（字符串类型）。</li><li>可以用于迭代普通对象、数组和原型链上的属性。</li><li>注意：<code>for...in</code> 循环不保证按照特定的顺序遍历对象的属性。</li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// 输出属性名：a, b, c</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出属性值：1, 2, 3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>for...of</code> 循环：</p><ul><li>用于迭代可迭代对象（例如<strong>数组</strong>、<strong>字符串</strong>、<strong>Set</strong>、<strong>Map</strong> 等）的元素。</li><li>循环变量是对象的值，而不是索引或属性名。</li><li>不能直接用于迭代普通对象，需要通过转换或手动迭代对象的属性。</li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> element <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token comment">// 输出数组元素：1, 2, 3</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token comment">// 输出字符串字符：H, e, l, l, o</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>总结：</p><ul><li><code>for...in</code> 用于迭代对象的属性名。</li><li><code>for...of</code> 用于迭代可迭代对象的元素值。</li><li><code>for...in</code> 适用于迭代<strong>对象</strong>的属性，而 <code>for...of</code> 适用于迭代<strong>数组</strong>、<strong>字符串</strong>等可迭代对象的元素。</li></ul><h3 id="offsetheight、scrollheight-和-clientheight-的区别是什么" tabindex="-1"><a class="header-anchor" href="#offsetheight、scrollheight-和-clientheight-的区别是什么" aria-hidden="true">#</a> offsetHeight、scrollHeight 和 clientHeight 的区别是什么</h3><ul><li>offsetHeight 包含了元素的整体高度，包括内容、内边距和<strong>边框</strong>。 <ul><li>offsetHeight 和 offsetWidth = content + padding + border</li></ul></li><li>scrollHeight 包含了元素内容的整体高度，<strong>包括溢出部分</strong>。 <ul><li>scrollHeight 和 scrollWidth = padding + 实际内容尺寸</li></ul></li><li>clientHeight 表示元素可见区域的高度，不包括滚动条、边框和外边距。 <ul><li>clientHeight 和 clientWidth = content + padding</li></ul></li></ul><h3 id="vue-组件通讯有几种方式" tabindex="-1"><a class="header-anchor" href="#vue-组件通讯有几种方式" aria-hidden="true">#</a> Vue 组件通讯有几种方式?</h3><ul><li>props 和 $emit</li><li>provide 和 inject</li><li>Vuex 和 pinia</li><li>$ref</li><li>自定义事件 evenBus</li></ul><h3 id="严格模式的特点" tabindex="-1"><a class="header-anchor" href="#严格模式的特点" aria-hidden="true">#</a> 严格模式的特点</h3><p>使用: 在头部声明 <code>&#39;use strict&#39;</code>。</p><ul><li><p>全局变量必须先声明</p></li><li><p>禁止用 with</p><ul><li><p>with 是用于在指定的对象上创建一个代码块作用域，以便在该作用域内可以更方便地访问对象的属性和方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">with</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在此代码块中可以直接使用 object 的属性和方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>创建 eval 作用域</p><ul><li><p>eval 是 JavaScript 中的一个内置函数，它接受一个字符串作为参数，并将该字符串作为 JavaScript 代码进行解析和执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>禁止 this 指向 window</p></li><li><p>函数参数不能重名</p></li></ul><h3 id="http-跨域请求时为何发送-options-请求" tabindex="-1"><a class="header-anchor" href="#http-跨域请求时为何发送-options-请求" aria-hidden="true">#</a> HTTP 跨域请求时为何发送 options 请求</h3><ul><li>options 请求是跨域请求之前的与检查;</li><li>它是浏览器自行发起的，无需干预。</li></ul><h2 id="深入原理" tabindex="-1"><a class="header-anchor" href="#深入原理" aria-hidden="true">#</a> 深入原理</h2><h3 id="js-内存垃圾回收用什么算法" tabindex="-1"><a class="header-anchor" href="#js-内存垃圾回收用什么算法" aria-hidden="true">#</a> JS 内存垃圾回收用什么算法</h3><ol><li><p>标记清除（Mark and Sweep）：这是 JavaScript 中最常见的垃圾回收机制。它的工作原理是通过标记那些不再被引用的对象，然后将它们清除（回收）掉。该算法通过从根对象开始，递归遍历整个对象图，并标记所有可访问的对象。然后，清除阶段将清除未被标记的对象。</p></li><li><p>引用计数（Reference Counting）：【已废弃】该算法跟踪每个对象被引用的次数。当对象的引用计数为零时，即没有任何引用指向它时，该对象就可以被回收。然而，引用计数算法难以处理循环引用的情况，即使循环引用的对象已经不再被使用，它们的引用计数也不会降为零，导致内存泄漏。</p></li></ol><blockquote><p><strong>闭包是内存泄漏嘛?</strong></p><p>闭包不是内存泄漏！区别是闭包数据是无法被回收清除。</p></blockquote><h3 id="如何检测-js-内存泄漏" tabindex="-1"><a class="header-anchor" href="#如何检测-js-内存泄漏" aria-hidden="true">#</a> 如何检测 JS 内存泄漏</h3><p>使用浏览器的开发者工具：现代浏览器（如 Chrome、Firefox）提供了内置的开发者工具，其中包含用于分析 JavaScript 内存使用情况的功能。用&quot;Memory&quot;或&quot;Performance&quot;选项卡来监测内存的分配和释放情况，查找潜在的内存泄漏问题。</p><p>若内存一直在增加，而无法释放，则存在内存泄漏。</p><blockquote><p>内存泄漏的场景有哪些?</p><p>以 Vue 举例:</p><ul><li>被全局变量、函数引用，组件销毁时未清除；</li><li>被全局事件、定时器引用，组件销毁时未清楚；</li><li>被自定义事件引用，组件销毁时未清除。</li></ul></blockquote><h3 id="浏览器和-node-js-的事件循环有什么区别" tabindex="-1"><a class="header-anchor" href="#浏览器和-node-js-的事件循环有什么区别" aria-hidden="true">#</a> 浏览器和 Node.js 的事件循环有什么区别?</h3><blockquote><p>宏任务和微任务</p><ul><li>宏任务：如 setTimeout、setInterval 和网络请求等；</li><li>微任务：如 Promise、async/await；</li><li>微任务在下一轮 DOM 渲染之前执行，宏任务在之后执行。</li></ul></blockquote><ul><li>浏览器和 node.js 的 event loop 流程基本相同;</li><li>node.js 宏任务和微任务分类型，有优先级。</li><li>推荐使用 <code>setImmediate</code> 代替 <code>process.nextTick</code> 看</li></ul>`,30),T=s(`<h2 id="查漏补缺" tabindex="-1"><a class="header-anchor" href="#查漏补缺" aria-hidden="true">#</a> 查漏补缺</h2><h3 id="【历史问题】如何解决移动端-300ms-的延迟" tabindex="-1"><a class="header-anchor" href="#【历史问题】如何解决移动端-300ms-的延迟" aria-hidden="true">#</a> 【历史问题】如何解决移动端 300ms 的延迟？</h3><blockquote><p>背景: 触摸屏 double tap to zoom</p></blockquote><p>初始解决方案: fastClick 库</p><ul><li>监听 <code>touchend</code> 事件(<code>touchstart</code> 和 <code>touchend</code> 会优先 click 触发)</li><li>使用自定义 DOM 事件模拟一个 click 事件</li><li>把默认的 click 是啊金(300ms 之后触发) 静止掉</li></ul><p>现代浏览器的改进:</p><p>在 <code>meta</code> 中加入 <code>content=&quot;width=device-width&quot;</code> 更改默认视口宽度。禁用了浏览器默认的双击缩放行为，但用户仍然可以通过双指缩放操作来缩放页面。</p><p>还可以在 meta 中加入 <code>user-scalable=no</code> 禁用用户对页面进行缩放，从而减少延迟。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>
      <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0, user-scalable=no<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="token-和-cookie-的区别" tabindex="-1"><a class="header-anchor" href="#token-和-cookie-的区别" aria-hidden="true">#</a> token 和 cookie 的区别</h3><ul><li>cookie 是 HTTP 规范;会默认被浏览器存储;有跨域限制;需要配合 session 使用;</li><li>token 无标准;默认没有跨域限制; 以 JWT 自定义传递；并且需要自己存储；</li></ul><blockquote><p>现代浏览器禁止第三方 js 库设置 cookie</p></blockquote><p>JSON Web Token（JWT）是一种用于在网络应用之间传递认证和授权信息的<strong>开放标准</strong>。JWT 的基本流程：</p><ol><li><p>身份验证：用户提供其凭据（如用户名和密码）进行身份验证。</p></li><li><p>服务端生成 Token：服务器验证用户的凭据，并生成一个 JWT。JWT 由三个部分组成：头部（Header）、载荷（Payload）和签名（Signature）。</p><ul><li>头部（Header）：包含指定算法（如 HMAC SHA256 或 RSA）用于签名验证的信息。</li><li>载荷（Payload）：包含关于用户或其他数据的声明（Claims），如用户 ID、角色等。</li><li>签名（Signature）：使用服务器密钥或私钥对头部和载荷进行签名，以确保 JWT 的完整性和真实性。</li></ul></li><li><p>返回 Token：服务器将生成的 JWT 返回给客户端（通常是通过 HTTP 响应的方式）。</p></li><li><p>存储 Token：客户端通常将 JWT 存储在本地，例如使用浏览器的本地存储（如 localStorage）或会话存储（如 sessionStorage）。</p></li><li><p>发送 Token：客户端在后续的请求中将 JWT 作为身份验证凭据发送到服务器。通常，JWT 被添加到请求的授权头部（Authorization Header）中，使用 Bearer 方案。</p></li><li><p>验证和解析 Token：服务器接收到带有 JWT 的请求后，使用相同的算法和密钥来验证 JWT 的签名，并解析其中的信息。</p></li><li><p>授权访问：服务器根据 JWT 的有效性和包含的声明进行授权判断，决定是否允许用户访问请求的资源。</p></li></ol><p>JWT 的优势在于它是无状态的，因为所有必要的信息都包含在 JWT 中，服务器不需要在后端存储会话信息。这使得 JWT 成为分布式系统和基于微服务架构的身份验证和授权解决方案的有力选项。</p><h3 id="http-协议-和-1-0、1-1-和-2-0-有什么区别" tabindex="-1"><a class="header-anchor" href="#http-协议-和-1-0、1-1-和-2-0-有什么区别" aria-hidden="true">#</a> HTTP 协议 和 1.0、1.1 和 2.0 有什么区别?</h3><p>HTTP 1.0 是最基础的 HTTP 协议，支持基本的 GET、POST 方法；</p><p>HTTP 1.1 增加缓存策略 cache-control E-tag; 支持长连接 <code>Connection: keep-alive</code>，一次 TCP 连接多次请求；支持断点续传，状态码 206；支持新的 PUT DELETE 等，可用于 Restful API。</p><p>HTTP 2.0 可压缩 header,减少体积; 多路复用, 一次 TCP 连接中可以多个 HTTP 并行请求；服务端推送。</p><h3 id="什么是-https-中间人攻击-如何预防" tabindex="-1"><a class="header-anchor" href="#什么是-https-中间人攻击-如何预防" aria-hidden="true">#</a> 什么是 HTTPS 中间人攻击？如何预防？</h3><blockquote><p>HTTP 是明文传输，实际问的是 HTTPS 加密过程。</p></blockquote><h3 id="script-标签中-defer-和-async-有什么区别" tabindex="-1"><a class="header-anchor" href="#script-标签中-defer-和-async-有什么区别" aria-hidden="true">#</a> script 标签中 defer 和 async 有什么区别?</h3><ul><li>无属性时，HTML 会暂停解析，下载 JS 文件，并执行 JS 代码；再继续解析 HTML。</li><li>defer：HTML 会继续解析，并行下载 JS，HTML 解析完成后再执行 JS。</li><li>async：HTML 继续解析，并行下载 JS，下载完成立刻执行 JS 代码，再解析 HTML。</li></ul><h3 id="prefetch-和-dns-prefetch-有什么区别" tabindex="-1"><a class="header-anchor" href="#prefetch-和-dns-prefetch-有什么区别" aria-hidden="true">#</a> prefetch 和 dns-prefetch 有什么区别？</h3><ul><li>preload 资源在当前页面使用，会优先加载；</li><li>prefetch 资源会在未来的页面使用，所以在空闲时加载。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 普通引用 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

  <span class="token comment">&lt;!-- preload --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

  <span class="token comment">&lt;!-- prefetch --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preftch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>other.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>dns-prefetch 实际上是 DNS 预查询;</li><li>preconnect 是 DNS 预连接。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- dns-preftch --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-preftch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://fonts.xxx.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

  <span class="token comment">&lt;!-- preconnect --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preconnect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://fonts.xxx.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>href 和 src 有什么区别?</strong></p><ol><li><p>用途：</p><ul><li>href：(Hypertext Reference) 属性用于指定链接的目标地址，通常用于<code>&lt;a&gt;</code>（锚点）标签，用于创建超链接，将用户导航到其他网页或资源。</li><li>src：(Source) 属性用于指定外部资源（如图片、脚本、样式表等）的来源，通常用于 <code>&lt;img&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;link&gt;</code> 等标签，用于引入外部资源。</li></ul></li><li><p>加载方式：</p><ul><li>href：href 指定的目标地址会被浏览器解析为一个新的文档，浏览器会重新加载并显示该文档的内容。</li><li>src：src 指定的资源会被浏览器请求并加载到当前文档中，例如图片会被显示，脚本会被执行。</li></ul></li><li><p>影响文档解析：</p><ul><li>href：href 属性不会影响当前文档的解析过程，浏览器会继续解析当前文档，并在遇到 <code>&lt;a&gt;</code> 标签时处理链接。</li><li>src：src 属性会影响当前文档的解析过程，浏览器会在遇到包含 src 属性的标签时暂停文档解析，先加载并执行资源，然后再继续解析文档。</li></ul></li><li><p>标签使用：</p><ul><li>href：常见的标签使用 href 属性，如 <code>&lt;a&gt;</code>、<code>&lt;link&gt;</code>（用于引入样式表）。</li><li>src：常见的标签使用 src 属性，如 <code>&lt;img&gt;</code>（用于引入图片）、<code>&lt;script&gt;</code>（用于引入脚本）。</li></ul></li></ol></blockquote><h3 id="前端攻击有哪些-该如何预防" tabindex="-1"><a class="header-anchor" href="#前端攻击有哪些-该如何预防" aria-hidden="true">#</a> 前端攻击有哪些?该如何预防?</h3><ul><li><p>XSS(Cross Site Script) 跨脚本攻击;</p></li><li><p>手段：黑客将 JS 代码插入到网页内容中，渲染时执行 JS 代码。</p></li><li><p>预防：特殊字符替换（前端或后端处理）</p></li><li><p>DDOS(Distribute denial-of-service) 分布式拒绝服务</p></li><li><p>手段: 分布式的、大规模的流量访问，使服务器瘫痪；</p></li><li><p>预防：需要硬件层预防（如阿里云 WAF）</p></li></ul><h3 id="http-和-websocket-有什么区别" tabindex="-1"><a class="header-anchor" href="#http-和-websocket-有什么区别" aria-hidden="true">#</a> HTTP 和 WebSocket 有什么区别?</h3><p>WebSocket 支持端对端通讯</p><ul><li>先发起一个 HTTP 请求</li><li>成功后再升级到 WebSocket 协议，再通讯。</li></ul><p>俩者区别:</p><ul><li>WebSocket 协议名是<code>ws://</code>，可双端发起请求；</li><li>WebSocket 没有跨域限制；</li><li>通过 send 和 onmessage 通信（HTTP 通过 req 和 res）</li></ul><p>简单实现一个 WebSocket:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 服务端端代码
 */</span>

<span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> WebSocketServer <span class="token operator">=</span> WebSocket<span class="token punctuation">.</span>Server

<span class="token keyword">const</span> wsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 确立端口号</span>

wsServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">)</span>

  ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;收到消息:&#39;</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// 服务端向客户端发送消息</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;服务端已经收到了信息:&#39;</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>WebSocket 客户端<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>WebSocket 客户端代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://127.0.0.1:3000&#39;</span><span class="token punctuation">)</span>

      ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;opened~&#39;</span><span class="token punctuation">)</span>
        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;客户端建立连接&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;收到了信息:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="从输入-url-到页面渲染的完整过程" tabindex="-1"><a class="header-anchor" href="#从输入-url-到页面渲染的完整过程" aria-hidden="true">#</a> 从输入 url 到页面渲染的完整过程</h3><h4 id="网络请求" tabindex="-1"><a class="header-anchor" href="#网络请求" aria-hidden="true">#</a> 网络请求</h4><ul><li>DNS 查询(得到 IP), 建立 TCP 连接(三次握手)；</li><li>浏览器发起 HTTP 请求；</li><li>收到请求响应，得到 HTML 源代码。</li></ul><p>得到 HTML 源代码后，还会继续请求静态资源：</p><ul><li>解析 HTML 过程中，遇到静态资源还会继续发起网络请求；</li><li>JS、CSS、图片和视频等。</li></ul><p>主要静态资源可能会有缓存，此时不必发起网络请求。</p><h4 id="解析" tabindex="-1"><a class="header-anchor" href="#解析" aria-hidden="true">#</a> 解析</h4><p>解析： 字符串 -&gt; 结构化数据的过程</p><ul><li>HTML 构建 DOM 树</li><li>CSS 构建 CSSOM 树(style tree)</li><li>俩者结合，形成 render tree</li></ul><blockquote><p>优化解析:</p><ul><li>css 放在 <code>&lt;head&gt;&lt;/head&gt;</code> 中，不要异步加载 CSS；</li><li>JS 放在 <code>&lt;body&gt;&lt;/body&gt;</code> 最下面(或合理使用 defer async)</li><li><code>&lt;img&gt;</code>提前定义 width 和 height。</li></ul></blockquote><h4 id="渲染" tabindex="-1"><a class="header-anchor" href="#渲染" aria-hidden="true">#</a> 渲染</h4><p>渲染： Render Tree 绘制到页面</p><ul><li>计算各个 DOM 的尺寸、定位，最后绘制到页面；</li><li>遇到 JS 可能会执行（参考 defer async）；</li><li>异步 CSS、图片加载，可能会触发重新渲染。</li></ul><h3 id="重绘和重排的区别" tabindex="-1"><a class="header-anchor" href="#重绘和重排的区别" aria-hidden="true">#</a> 重绘和重排的区别?</h3><p>重绘（repaint）: 是指元素外观改变，如<strong>颜色</strong>、<strong>背景色</strong>，但是元素的<strong>尺寸</strong>、<strong>定位</strong>不变，不会影响到其他元素的位置。</p><p>重排（reflow）：是指重新计算尺寸和布局，可能会影响其他元素的位置。如元素的高度增加，可能会使相邻元素位置下移。</p><p>区别：重排播重绘要影响更大，消耗也更大，因此要避免无意义的重排。</p><p>减少重排的方法：</p><ul><li>集中修改样式，或直接切换 css class；</li><li>修改之前先设置 <code>display: none</code>，脱离文档流；</li><li>使用 BFC 特性，不影响其它元素的位置；</li><li>频繁触发的使用节流和防抖；</li><li>使用 createDocumentFragment 批量操作 DOM；</li><li>优化动画，使用 CSS3 和 requestAnimationFrame。</li></ul><h3 id="网页多标签-tab-通讯" tabindex="-1"><a class="header-anchor" href="#网页多标签-tab-通讯" aria-hidden="true">#</a> 网页多标签 tab 通讯</h3><ol><li><p>使用 WebSocket：无跨域限制，但需要服务端支持，成本高。</p></li><li><p>使用 LocalStorage 通讯：直接解决<strong>同域</strong>的 tab 页面通讯。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;storage&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;key:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;value:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>newValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>SharedWorker 通讯：SharedWorker 是 WebWorker 的一种。WebWorker 可开启进程执行 JS，但不能操作 DOM；SharedWorker 可单独开启一个进程，用于<strong>同域页面</strong>通讯。</p></li></ol><h3 id="网页和-iframe-如何通信" tabindex="-1"><a class="header-anchor" href="#网页和-iframe-如何通信" aria-hidden="true">#</a> 网页和 iframe 如何通信?</h3><p>使用 PostMessage 进行网页和 iframe 通信。 注意跨域的限制和判断(域名的合法性)。</p><p>在父窗口（父网页）中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取 iframe 元素</span>
<span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myIframe&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 发送消息给 iframe</span>
<span class="token keyword">function</span> <span class="token function">sendMessageToIframe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello from parent window!&#39;</span>
  iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;*&#39; 表示允许跨域通信</span>
<span class="token punctuation">}</span>

<span class="token comment">// 监听来自 iframe 的消息</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>source <span class="token operator">===</span> iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> receivedMessage <span class="token operator">=</span> event<span class="token punctuation">.</span>data
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Received message from iframe:&#39;</span><span class="token punctuation">,</span> receivedMessage<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 iframe 中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 发送消息给父窗口</span>
<span class="token keyword">function</span> <span class="token function">sendMessageToParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello from iframe!&#39;</span>
  parent<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;*&#39; 表示允许跨域通信</span>
<span class="token punctuation">}</span>

<span class="token comment">// 监听来自父窗口的消息</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>source <span class="token operator">===</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> receivedMessage <span class="token operator">=</span> event<span class="token punctuation">.</span>data
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Received message from parent window:&#39;</span><span class="token punctuation">,</span> receivedMessage<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,66);function w(S,q){const a=v("RouterLink");return h(),b("div",null,[f,k("p",null,[n("具体可看"),g(a,{to:"/JavaScript/Node01.html"},{default:m(()=>[n("《node 基础》")]),_:1})]),T])}const x=t(d,[["render",w],["__file","interview15.html.vue"]]);export{x as default};
