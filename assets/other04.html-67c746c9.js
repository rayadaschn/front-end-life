import{_ as p,X as o,Z as i,$ as l,V as c,W as r,F as u,Y as d}from"./framework-2eee3422.js";const k={},n=o,s=i,v=u,t=l,a=d,m=c,g=r,b=a('<h1 id="利用-husky-进行-git-提交前检查" tabindex="-1"><a class="header-anchor" href="#利用-husky-进行-git-提交前检查" aria-hidden="true">#</a> 利用 husky 进行 git 提交前检查</h1><p>本文将系统梳理一遍，在新项目中配置 Husky 对 git 进行检查的过程。在最后实战几个场景。</p><h2 id="工具介绍" tabindex="-1"><a class="header-anchor" href="#工具介绍" aria-hidden="true">#</a> 工具介绍</h2><ul><li><p>Husky 是 git hook 工具，<strong>它允许我们轻松地处理 Git Hooks 并在提交代码时运行我们想要的脚本</strong>。 它的工作原理是在我们的 package.json 文件中加入一个对象，配置 Husky 来运行我们指定的脚本。 之后，Husky 会管理我们的脚本将在 Git 生命周期的哪个阶段运行。</p></li><li><p>lint-staged：<strong>是一个前端文件过滤的工具</strong>。 是一个仅仅过滤出 Git 代码暂存区文件（被 committed 的文件）的工具。 Lint-staged 仅仅是文件过滤器，不会帮你格式化任何东西。</p></li></ul>',4),h=n("p",null,"常见的钩子插件：",-1),q=a("<li><code>commitlint</code>：用于检测提交的信息。</li><li><code>lint-staged</code>：检查本次修改更新的代码，并自动修复并且可以添加到暂存区。</li><li><code>pre-commit</code>：<code>git hooks</code>的钩子，在代码提交前检查代码是否符合规范，不符合规范将不可被提交。</li><li><code>commit-msg</code>：<code>git hooks</code>的钩子，在代码提交前检查<code>commit</code>信息是否符合规范。</li>",4),y=n("code",null,"commitizen",-1),_=n("code",null,"git",-1),j=n("code",null,"commit",-1),x={href:"https://www.conventionalcommits.org/zh-hans/v1.0.0/",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"配置过程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#配置过程","aria-hidden":"true"},"#"),s(" 配置过程")],-1),$=n("p",null,[s("通常来说 git 推送代码的过程为："),n("code",null,"git add"),s(" - "),n("code",null,"git commit"),s(" - "),n("code",null,"git push"),s("，在 "),n("code",null,"git commit"),s(" 期间进行代码检测操作是较好的。接下来看处理过程：")],-1),H=n("p",null,"注意，以下皆为 husky@6.0 以上的版本，截止 2023.05.24 为 husky@8.0.3。",-1),S={href:"https://zhuanlan.zhihu.com/p/366786798",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"简单的说，新版本的配置过程比旧版本的多一个动作：",-1),E=n("p",null,"老版本：安装 ——> 配置",-1),P=n("p",null,[s("新版本：安装 ——> 启用 ——> 生成 "),n("code",null,".husky"),s(" 相关配置")],-1),V=a(`<ul><li><p>安装依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> husky lint-staged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>启动 husky：</p><ul><li><p>初次配置是手动启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: npx husky <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>后续其它小伙伴下拉代码是“被动启动 husky” ：</p><p>在 <code>package.json</code> 中添加 prepare 脚本命令，这个命令会在 <code>npm install</code> （不带参数）之后自动执行，也就是它会在安装完依赖后自动执行 <code>husky install</code> 命令。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个命令会在 <code>.husky/</code> 目录中添加相关依赖。</p></li></ul></li><li><p>添加 Git Hook 指令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;npm run lint-staged&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我这里是在 git commit 之前添加运行 “<code>npm run lint-staged</code>” 脚本指令。这时，会在 <code>.husky/</code> 目录下新增一个名为 pre-commit 的 shell 脚本，内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>
<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> -- <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>

<span class="token function">npm</span> run lint-staged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>shell 脚本释义：</p><p><code>#!/usr/bin/env sh</code> 是一个 Unix/Linux 操作系统中用来指定脚本解释器的标准写法。该行以“<code>#</code>”开头，其目的是标记此文件的解释器类型和路径，告诉操作系统应该如何运行它。</p><p>在这个例子中，它指定了使用 <code>/usr/bin/env</code> 命令查找 <code>sh</code> 解释器，并将其作为解析当前脚本文件的默认解释器。</p><p><code>$(dirname -- &quot;$0&quot;)</code> 与 <code>_husky.sh</code> 配合使用来引入一个名为 &quot;husky&quot; 的 Git Hook 工具，具体表示：</p><ul><li><code>$0</code> 表示当前 Shell 脚本的文件名。</li><li><code>--</code> 表示停止处理命令行选项参数，确保后续所有内容都被解释器视为参数。</li><li><code>dirname</code> 命令返回指定路径的上级目录名。</li><li><code>&quot;$0&quot;</code> 使用引号对 <code>$0</code> 进行转义，以允许包含空格或其他特殊字符。</li><li><code>. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;</code> 会将整个 <code>husky.sh</code> 脚本文件导入到当前 Shell 类型的脚本环境中，采用的 &quot;.&quot; 符号意味着当前 Shell 脚本将以另一个 Shell 脚本文件中的所有其它命令、函数和配置进行装载执行。</li></ul><p>然后执行 <code>npm run lint-staged</code> 。</p></blockquote><p>此时，已经完成了 Husky 部分的相关配置了，接下来为 lint-staged 进行配置。</p></li><li><p>配置 <code>lint-staged</code></p><p>我们设置的脚本是“<code>npm run lint-staged</code>”，因此需要继续在<code>package.json</code> 中添加相关指令：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lint-staged&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即“<code>npm run lint-staged</code>”脚本的作用是直接执行 <code>lint-staged</code>，因此，接着需要对 <code>lint-staged</code>进行设置，依旧在 <code>package.json</code> 中：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lint-staged&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;src/**/*.{js,jsx,tsx,ts,less,sass,md}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier --write&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述<code>lint-staged</code>配置中的意思是 <strong>表明只对 src 目录下的<code>git add</code>到 stage 区的文件进行扫描</strong>，且同时对这些文件执行 <code>prettier --write</code> 操作。</p><blockquote><p><code>prettier --write</code> 操作需要安装相应的 prettier 依赖包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> prettier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>具体使用可以看<a href="other01">《代码规范和自动格式化》</a></p></blockquote></li></ul>`,1),G={href:"https://typicode.github.io/husky/guide.html",target:"_blank",rel:"noopener noreferrer"},F=n("h2",{id:"husky-配置实战",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#husky-配置实战","aria-hidden":"true"},"#"),s(" Husky 配置实战")],-1),N=n("blockquote",null,[n("p",null,"场景：利用 Husky 对提交的代码进行 ESlint 检测，并对不规范的代码利用 Prettier 进行修复。"),n("p",null,[s("加料：【特殊场景】假设当前项目在 GitA 仓库的 myProject 目录下，即此时 "),n("code",null,".git"),s(" 文件不再是在项目的外层，而是在 "),n("code",null,"./GitA/myProject"),s(" 下。")])],-1),D=n("p",null,"注意一般情况下是仓库即为项目文件保存位置，无需下面的 CD，请依据个人情况进行配置！",-1),T=n("p",null,"配置过程：",-1),z=a(`<li><p>从 Git 仓库中将项目下拉下来，并 CD 切换进项目目录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># a. 拉下项目</span>
$: <span class="token function">git</span> clone GitA

<span class="token comment"># b. 切换目录，进入项目文件</span>
$: <span class="token builtin class-name">cd</span> myProject
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),A=a(`<p>安装依赖，ESlint 和 Prettier 的配置详情可以看<a href="other01">《代码规范和自动格式化》</a>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装所需基本包</span>
$: <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> husky lint-staged eslint prettier

<span class="token comment"># 安装 ESlint 和 Prettier 解决冲突 plugins, 若是 Vue 等项目可安装其对应的其它 plugins</span>
$: <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> eslint-config-prettier eslint-plugin-prettier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),B={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fprettier%2Feslint-plugin-prettier",target:"_blank",rel:"noopener noreferrer"},L={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fprettier%2Feslint-config-prettier",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,[s("后续只需在扩展末尾添加 "),n("code",null,'"plugin:prettier/recommended"'),s(" 即可。")],-1),I=a(`<li><p>创建 ESlint 和 Prettier 的配置文件。</p><ul><li><p>创建 ESlint 配置文件，依据个人需求选择相应的配置。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: npx eslint <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如图依据个人项目需求生成相应的 ESlint 配置文件：</p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202305251318216.png" style="zoom:50%;"></li><li><p>手动创建 Prettier 配置文件 <code>.prettierrc</code> ，该文件为 prettier 的默认配置文件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .prettierrc</span>
<span class="token punctuation">{</span>
 <span class="token string-property property">&quot;endOfLine&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lf&quot;</span><span class="token punctuation">,</span>
 <span class="token string-property property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
 <span class="token string-property property">&quot;printWidth&quot;</span><span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span>
 <span class="token string-property property">&quot;tabWidth&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
 <span class="token string-property property">&quot;indentStyle&quot;</span><span class="token operator">:</span> <span class="token string">&quot;space&quot;</span><span class="token punctuation">,</span>
 <span class="token string-property property">&quot;bracketSpacing&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
 <span class="token string-property property">&quot;useTabs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建 <code>.eslintignore</code> 文件，排除部分无需检查的代码文件：</p><div class="language-.eslintignore line-numbers-mode" data-ext=".eslintignore"><pre class="language-.eslintignore"><code>.eslintrc.cjs
.prettierrc.js
/node_modules/
public
dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>为前面生成的 ESlint 配置文件，添加扩展，使得以 Prettier 进行修复代码，并解决冲突。我这里为 <code>.eslintrc.cjs</code> ：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 其它配置</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;eslint:recommended&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;plugin:vue/vue3-essential&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;plugin:@typescript-eslint/recommended&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// --- 在末尾添加如下插件, 即为此前安装的插件配置 ---</span>
    <span class="token string">&#39;plugin:prettier/recommended&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 其它配置</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>值得注意的是，此处是 Vue3 + Ts 的配置，extends 中的“<code>plugin:vue/vue3-essential</code>” 插件，存在解析器 “<code>vue-eslint-parser</code>”，用<code>npx eslint --init</code> 生成的配置中，默认使用的是“<em><code>@typescript-eslint/parser</code></em>”解析器，而 extends 的顺序是 ts 在 vue 后面，因此将 vue 的解析器覆盖掉了，所以需要对解析器的配置做出微小调整：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,</span>
<span class="token string-property property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-eslint-parser&quot;</span><span class="token punctuation">,</span>
<span class="token string-property property">&quot;parserOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token string-property property">&quot;ecmaVersion&quot;</span><span class="token operator">:</span> <span class="token string">&quot;latest&quot;</span><span class="token punctuation">,</span>
   <span class="token string-property property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@typescript-eslint/parser&quot;</span><span class="token punctuation">,</span>
   <span class="token string-property property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>最终的“<code>.eslintrc.cjs</code>”：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">es2021</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;eslint:recommended&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;plugin:vue/vue3-essential&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;plugin:@typescript-eslint/recommended&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;plugin:prettier/recommended&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">overrides</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&#39;vue-eslint-parser&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 修改解析器</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">&#39;latest&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&#39;@typescript-eslint/parser&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 添加解析器</span>
    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;@typescript-eslint&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，已经可以用 Prettier 去修复 ESlint 检测出的不合规的代码了。可在 <code>package.json</code> 中添加 <code>scripts</code>：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-tsc &amp;&amp; vite build&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;preview&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite preview&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint . --ext .vue,.js,.ts,.jsx,.tsx --fix&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们添加了 <code>lint</code> 指令，然后运行 <code>npm run lint</code> 即可检测修复不合规的代码了。接下来，我们将这个步骤添加到 git commit 期间去。</p></li><li><p>配置 Husky 和 lint-staged ：</p><ul><li><p>启动 Husky ，这里的是特殊场景，需要到外外面的父级目录去启动 Husky ，并将 Husky 安装到项目所在文件夹。因此需要在 <code>package.json</code> 中添加如下 prepare：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cd .. &amp;&amp; husky install myProject/.husky&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面的 “myProject” 是该项目的项目名。成功运行后，在项目目录下创建出基础的 Husky 文件夹。</p></li><li><p>添加 Git Hook 指令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;cd ugs_yyt &amp;&amp; npm run lint-staged&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里也需要区分目录，其余就都和常规项目都是一样的啦。</p></li><li><p>继续配置 <code>package.json</code> ：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cd .. &amp;&amp; husky install myProject/.husky&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-tsc &amp;&amp; vite build&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;preview&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite preview&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint . --ext .vue,.js,.ts,.jsx,.tsx --fix&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lint-staged&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;src/**/*.{vue,js,ts,jsx,tsx}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;eslint --fix&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>以上即完成了所有的配置了，在下次提交代码时，会自动触发检测修复代码指令。</p></li>`,1),O=n("p",null,"​",-1);function W(Q,U){const e=v("ExternalLinkIcon");return m(),g("div",null,[b,n("blockquote",null,[h,n("ol",null,[q,n("li",null,[y,s("："),_,s("的规范化提交工具，帮助你填写"),j,s("信息，符合 "),n("a",x,[s("约定式提交"),t(e)]),s(" 要求。")])])]),f,$,n("blockquote",null,[H,n("p",null,[s("旧版本的 husky 的构建流程同现在的不同，具体问题可以查看"),n("a",S,[s("《husky 为什么放弃了之前的配置方式》"),t(e)]),s("。")]),w,E,P]),V,n("p",null,[s("此时，我们已经完成了所有的配置，更多配置可以查看"),n("a",G,[s("官网"),t(e)]),s("。")]),F,N,D,T,n("ol",null,[z,n("li",null,[A,n("blockquote",null,[n("p",null,[n("a",B,[s("eslint-plugin-prettier"),t(e)]),s("： 基于 prettier 代码风格的 eslint 规则，即 eslint 使用 pretter 规则来格式化代码。")]),n("p",null,[n("a",L,[s("eslint-config-prettier"),t(e)]),s("： 禁用所有与格式相关的 eslint 规则，解决 prettier 与 eslint 规则冲突，确保将其放在 extends 队列最后，这样它将覆盖其他配置。")]),C])]),I]),O])}const Y=p(k,[["render",W],["__file","other04.html.vue"]]);export{Y as default};
