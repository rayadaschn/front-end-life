const t=JSON.parse('{"key":"v-52784a26","path":"/JavaScript/other05.html","title":"新版 stylelint","lang":"zh-CN","frontmatter":{"title":"新版 stylelint","icon":"javascript","date":"2023-05-27T00:00:00.000Z","category":["javascript"],"tag":["javascript"]},"headers":[{"level":2,"title":"起步","slug":"起步","link":"#起步","children":[]},{"level":2,"title":"定制需求","slug":"定制需求","link":"#定制需求","children":[]},{"level":2,"title":"报错查询","slug":"报错查询","link":"#报错查询","children":[]}],"git":{"createdTime":1685170023000,"updatedTime":1685321383000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":5.98,"words":1795},"filePathRelative":"JavaScript/other05.md","localizedDate":"2023年5月27日","excerpt":"<h1> 新版 stylelint 的配置</h1>\\n<p>众所周知的前端代码格式化三件套：ESlint、Prettier、Stylelint。其中，ESlint + Prettier 的配合已经非常流行了，能够满足项目的绝大部分需求，因此对于 CSS 等样式进行检测修复的 Stylelint 就没有那么需要了。本文还是梳理一下它的当下配置方法。</p>\\n<p>在过去的话不推荐的理由：</p>\\n<ul>\\n<li>ESlint 和 Prettier 已经是会产生冲突，再加入 Stylelint 会让本地配置变得更加复杂，包也变得更加臃肿（因此官方在@15 版本中做了优化配置，不再有冲突配置）；</li>\\n<li>如今更加流行的是 CSS-in-JS ，能利用静态分析优化掉大量冗余的 CSS，减小包的体积；再如 Tailwind 等框架的流行，直接干掉了纯 CSS，Stylelint 就更不需要了。当然，新版的 Stylelint 还是给予了 CSS-in-JS 支持，并且 @15 也做了大量的优化，如<a href=\\"https://stylelint.io/migration-guide/to-15/#removed-processors-configuration-property\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">删除 processors 配置</a>等。</li>\\n</ul>"}');export{t as data};
