const n=JSON.parse('{"key":"v-7b1df6b0","path":"/JavaScript/ts01.html","title":"装饰器","lang":"zh-CN","frontmatter":{"title":"装饰器","icon":"javascript","date":"2023-08-22T00:00:00.000Z","category":["javascript"],"tag":["typescript"]},"headers":[{"level":2,"title":"执行顺序","slug":"执行顺序","link":"#执行顺序","children":[]},{"level":2,"title":"参考文件","slug":"参考文件","link":"#参考文件","children":[]}],"git":{"createdTime":1692695745000,"updatedTime":1692797263000,"contributors":[{"name":"rayadaschn","email":"115447518+rayadaschn@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":2.08,"words":625},"filePathRelative":"JavaScript/ts01.md","localizedDate":"2023年8月22日","excerpt":"<p>装饰器（Decorator）是一种语法结构，用来在定义时修改类（class）的行为。</p>\\n<p>在语法上，装饰器有如下几个特征。</p>\\n<p>（1）第一个字符（或者说前缀）是<code>@</code>，后面是一个表达式。</p>\\n<p>（2）<code>@</code>后面的表达式，<strong>必须是一个函数</strong>（或者执行后可以得到一个函数）。</p>\\n<p>（3）这个函数接受所修饰对象的一些相关值作为参数。</p>\\n<p>（4）这个函数要么不返回值，要么返回一个新对象取代所修饰的目标对象。</p>\\n<p>一般类有四个装饰器:</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token decorator\\"><span class=\\"token at operator\\">@</span><span class=\\"token function\\">frozen</span></span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Foo</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token decorator\\"><span class=\\"token at operator\\">@</span><span class=\\"token function\\">configurable</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token decorator\\"><span class=\\"token at operator\\">@</span><span class=\\"token function\\">enumerable</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function\\">method</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token decorator\\"><span class=\\"token at operator\\">@</span><span class=\\"token function\\">throttle</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function\\">expensiveMethod</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
