import{_ as s,Z as e,a0 as t,F as i,a2 as o,a1 as l,X as p,Y as c,$ as r}from"./framework-97fa2d96.js";const d={},u=e,n=t,h=i,k=o,v=l,g=r,m=p,f=c,b=g(`<h2 id="基础题" tabindex="-1"><a class="header-anchor" href="#基础题" aria-hidden="true">#</a> 基础题</h2><h3 id="请描述-tcp-三次握手和四次挥手" tabindex="-1"><a class="header-anchor" href="#请描述-tcp-三次握手和四次挥手" aria-hidden="true">#</a> 请描述 TCP 三次握手和四次挥手</h3><ol><li>先建立连接(确保双方都有收发消息的能力)</li><li>再传输内容(如发送一个 get 请求)</li><li>网络连接是 TCP 协议，传输内容是 HTTP 协议。</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202309042127410.png" alt="三次握手" tabindex="0" loading="lazy"><figcaption>三次握手</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/format,png-20230309230614791.png" alt="四次挥手" tabindex="0" loading="lazy"><figcaption>四次挥手</figcaption></figure><h2 id="for-in-和-for-of-的区别是什么" tabindex="-1"><a class="header-anchor" href="#for-in-和-for-of-的区别是什么" aria-hidden="true">#</a> for...in 和 for...of 的区别是什么</h2><p>在 JavaScript 中，<code>for...in</code> 和 <code>for...of</code> 是两种不同的循环语句，区别如下：</p><ol><li><p><code>for...in</code> 循环：</p><ul><li>用于迭代对象的可枚举属性。</li><li>循环变量是对象的属性名（字符串类型）。</li><li>可以用于迭代普通对象、数组和原型链上的属性。</li><li>注意：<code>for...in</code> 循环不保证按照特定的顺序遍历对象的属性。</li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// 输出属性名：a, b, c</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出属性值：1, 2, 3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>for...of</code> 循环：</p><ul><li>用于迭代可迭代对象（例如<strong>数组</strong>、<strong>字符串</strong>、<strong>Set</strong>、<strong>Map</strong> 等）的元素。</li><li>循环变量是对象的值，而不是索引或属性名。</li><li>不能直接用于迭代普通对象，需要通过转换或手动迭代对象的属性。</li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> element <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token comment">// 输出数组元素：1, 2, 3</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token comment">// 输出字符串字符：H, e, l, l, o</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>总结：</p><ul><li><code>for...in</code> 用于迭代对象的属性名。</li><li><code>for...of</code> 用于迭代可迭代对象的元素值。</li><li><code>for...in</code> 适用于迭代<strong>对象</strong>的属性，而 <code>for...of</code> 适用于迭代<strong>数组</strong>、<strong>字符串</strong>等可迭代对象的元素。</li></ul><h3 id="offsetheight、scrollheight-和-clientheight-的区别是什么" tabindex="-1"><a class="header-anchor" href="#offsetheight、scrollheight-和-clientheight-的区别是什么" aria-hidden="true">#</a> offsetHeight、scrollHeight 和 clientHeight 的区别是什么</h3><ul><li>offsetHeight 包含了元素的整体高度，包括内容、内边距和<strong>边框</strong>。 <ul><li>offsetHeight 和 offsetWidth = content + padding + border</li></ul></li><li>scrollHeight 包含了元素内容的整体高度，<strong>包括溢出部分</strong>。 <ul><li>scrollHeight 和 scrollWidth = padding + 实际内容尺寸</li></ul></li><li>clientHeight 表示元素可见区域的高度，不包括滚动条、边框和外边距。 <ul><li>clientHeight 和 clientWidth = content + padding</li></ul></li></ul><h3 id="vue-组件通讯有几种方式" tabindex="-1"><a class="header-anchor" href="#vue-组件通讯有几种方式" aria-hidden="true">#</a> Vue 组件通讯有几种方式?</h3><ul><li>props 和 $emit</li><li>provide 和 inject</li><li>Vuex 和 pinia</li><li>$ref</li><li>自定义事件 evenBus</li></ul><h3 id="严格模式的特点" tabindex="-1"><a class="header-anchor" href="#严格模式的特点" aria-hidden="true">#</a> 严格模式的特点</h3><p>使用: 在头部声明 <code>&#39;use strict&#39;</code>。</p><ul><li><p>全局变量必须先声明</p></li><li><p>禁止用 with</p><ul><li><p>with 是用于在指定的对象上创建一个代码块作用域，以便在该作用域内可以更方便地访问对象的属性和方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">with</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在此代码块中可以直接使用 object 的属性和方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>创建 eval 作用域</p><ul><li><p>eval 是 JavaScript 中的一个内置函数，它接受一个字符串作为参数，并将该字符串作为 JavaScript 代码进行解析和执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>禁止 this 指向 window</p></li><li><p>函数参数不能重名</p></li></ul><h3 id="http-跨域请求时为何发送-options-请求" tabindex="-1"><a class="header-anchor" href="#http-跨域请求时为何发送-options-请求" aria-hidden="true">#</a> HTTP 跨域请求时为何发送 options 请求</h3><ul><li>options 请求是跨域请求之前的与检查;</li><li>它是浏览器自行发起的，无需干预。</li></ul><h2 id="深入原理" tabindex="-1"><a class="header-anchor" href="#深入原理" aria-hidden="true">#</a> 深入原理</h2><h3 id="js-内存垃圾回收用什么算法" tabindex="-1"><a class="header-anchor" href="#js-内存垃圾回收用什么算法" aria-hidden="true">#</a> JS 内存垃圾回收用什么算法</h3><ol><li><p>标记清除（Mark and Sweep）：这是 JavaScript 中最常见的垃圾回收机制。它的工作原理是通过标记那些不再被引用的对象，然后将它们清除（回收）掉。该算法通过从根对象开始，递归遍历整个对象图，并标记所有可访问的对象。然后，清除阶段将清除未被标记的对象。</p></li><li><p>引用计数（Reference Counting）：【已废弃】该算法跟踪每个对象被引用的次数。当对象的引用计数为零时，即没有任何引用指向它时，该对象就可以被回收。然而，引用计数算法难以处理循环引用的情况，即使循环引用的对象已经不再被使用，它们的引用计数也不会降为零，导致内存泄漏。</p></li></ol><blockquote><p><strong>闭包是内存泄漏嘛?</strong></p><p>闭包不是内存泄漏！区别是闭包数据是无法被回收清除。</p></blockquote><h3 id="如何检测-js-内存泄漏" tabindex="-1"><a class="header-anchor" href="#如何检测-js-内存泄漏" aria-hidden="true">#</a> 如何检测 JS 内存泄漏</h3><p>使用浏览器的开发者工具：现代浏览器（如 Chrome、Firefox）提供了内置的开发者工具，其中包含用于分析 JavaScript 内存使用情况的功能。用&quot;Memory&quot;或&quot;Performance&quot;选项卡来监测内存的分配和释放情况，查找潜在的内存泄漏问题。</p><p>若内存一直在增加，而无法释放，则存在内存泄漏。</p><blockquote><p>内存泄漏的场景有哪些?</p><p>以 Vue 举例:</p><ul><li>被全局变量、函数引用，组件销毁时未清除；</li><li>被全局事件、定时器引用，组件销毁时未清楚；</li><li>被自定义事件引用，组件销毁时未清除。</li></ul></blockquote><h3 id="浏览器和-node-js-的事件循环有什么区别" tabindex="-1"><a class="header-anchor" href="#浏览器和-node-js-的事件循环有什么区别" aria-hidden="true">#</a> 浏览器和 Node.js 的事件循环有什么区别?</h3><blockquote><p>宏任务和微任务</p><ul><li>宏任务：如 setTimeout、setInterval 和网络请求等；</li><li>微任务：如 Promise、async/await；</li><li>微任务在下一轮 DOM 渲染之前执行，宏任务在之后执行。</li></ul></blockquote><ul><li>浏览器和 node.js 的 event loop 流程基本相同;</li><li>node.js 宏任务和微任务分类型，有优先级。</li><li>推荐使用 <code>setImmediate</code> 代替 <code>process.nextTick</code></li></ul>`,30);function j(y,x){const a=h("RouterLink");return m(),f("div",null,[b,u("p",null,[n("具体可看"),v(a,{to:"/JavaScript/Node01.html"},{default:k(()=>[n("《node 基础》")]),_:1})])])}const w=s(d,[["render",j],["__file","interview15.html.vue"]]);export{w as default};
