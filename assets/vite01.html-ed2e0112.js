import{_ as i,Z as o,a0 as r,F as c,a1 as l,X as d,Y as p,$ as u}from"./framework-5dd7fabc.js";const h={},s=o,e=r,v=c,n=l,t=u,m=d,_=p,b=s("h1",{id:"vite-使用总结",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#vite-使用总结","aria-hidden":"true"},"#"),e(" Vite 使用总结")],-1),g=s("p",null,"Vite 是一种新型前端构建工具，官方定位：下一代前端开发与构建工具，因此主要由俩部分组成：",-1),f={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.vitejs.net/guide/features.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.vitejs.net/guide/features.html#hot-module-replacement",target:"_blank",rel:"noopener noreferrer"},x={href:"https://rollupjs.org/",target:"_blank",rel:"noopener noreferrer"},V=t(`<h2 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理" aria-hidden="true">#</a> 底层原理</h2><ol><li>原生 ES 模块支持：Vite 利用现代浏览器对原生 ES 模块的支持，无需事先打包，可以直接在浏览器中按需加载和编译模块代码，从而实现更快的开发体验和更短的构建时间。</li><li>HTTP/2 Server Push 技术：通过 HTTP/2 服务器推送技术，Vite 可以在浏览器请求一个 HTML 页面时，将该页面所依赖的 JavaScript、CSS 和其他资源文件预先推送到浏览器缓存中，以加快页面加载速度。</li><li>中间件架构：Vite 初期使用了基于 Koa 的中间件架构，vite2 中已不再使用 Koa 了，而是使用 Connect 来搭建服务器。由于大多数逻辑应该通过插件钩子而不是中间件来完成，因此对中间件的需求大大减少。内部服务器的应用，现在是一个很好的旧版的 connect 实例，而不是 Koa。</li><li>插件化架构：Vite 采用插件化架构，在内核提供的基础上，允许开发者使用自定义插件来扩展 Vite 的功能和特性，例如 TypeScript 支持、CSS 预处理器、打包压缩等。</li><li>多进程编译：Vite 利用多进程编译技术，在开发模式下快速进行增量编译，提高了构建效率。此外，在生产模式下，Vite 支持基于 Rollup 进行代码打包和压缩，以提高应用的性能和加载速度。</li></ol><h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能" aria-hidden="true">#</a> 功能</h2><h3 id="天然对-typescript-支持" tabindex="-1"><a class="header-anchor" href="#天然对-typescript-支持" aria-hidden="true">#</a> 天然对 TypeScript 支持</h3><p>只需导入，vite 会直接使用 ESBuild 来完成编译。但是需要注意的是，vite 只对 TypeScript 进行转译工作，并 <strong>不</strong> 执行任何类型检查。</p><h3 id="天然支持对-css-支持" tabindex="-1"><a class="header-anchor" href="#天然支持对-css-支持" aria-hidden="true">#</a> 天然支持对 CSS 支持</h3><p>不同于 Webpack，vite 可以直接支持 css 的处理，直接导入 <code>.css</code> 文件将会把内容插入到 <code>&lt;style&gt;</code> 标签中，同时也带有 HMR 支持。也能够以字符串的形式检索处理后的、作为其模块默认导出的 CSS。</p><p>并且可以直接支持 css 预处理器，如支持<code>.scss</code>, <code>.sass</code>, <code>.less</code>, <code>.styl</code> 和 <code>.stylus</code> 文件的内置支持。没有必要为它们安装特定的 Vite 插件，但必须安装相应的预处理器依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> sass
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),C={href:"https://github.com/jonathantneal/postcss-nesting",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"postcss.config.js",-1),T=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> postcss postcss-preset-env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// postcss.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;postcss-preset-env&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打包项目" tabindex="-1"><a class="header-anchor" href="#打包项目" aria-hidden="true">#</a> 打包项目</h3><p>除了良好的本地服务支持外，vite 利用 rollup 完成对项目的打包。（在 2022 年 vite 完成了几个大版的升级，其中因为就 Rollup 从 2.0 升级到 3.0，连带 Vite 也完成了一个大版的升级）</p><p>打包非常便利：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: npx vite build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>本地预览：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$: npx vite preview
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8);function j(E,N){const a=v("ExternalLinkIcon");return m(),_("div",null,[b,g,s("ul",null,[s("li",null,[e("一个开发服务器，它基于 "),s("a",f,[e("原生 ES 模块"),n(a)]),e(" 提供了 "),s("a",k,[e("丰富的内建功能"),n(a)]),e("，如速度快到惊人的 "),s("a",S,[e("模块热更新(HMR)"),n(a)]),e("；")]),s("li",null,[e("一套构建指令，它使用 "),s("a",x,[e("Rollup"),n(a)]),e(" 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。")])]),V,s("p",null,[e("不过，Vite 的目标是现代浏览器，因此它建议开发者使用原生 CSS 变量和实现 CSSWG 草案的 PostCSS 插件（例如 "),s("a",C,[e("postcss-nesting"),n(a)]),e("）来编写简单的、符合未来标准的 CSS。所以虽然直接支持 postcss 的转换，但还是需要安装 postcss，和配置 "),y,e(" 的配置文件。")]),T])}const B=i(h,[["render",j],["__file","vite01.html.vue"]]);export{B as default};
