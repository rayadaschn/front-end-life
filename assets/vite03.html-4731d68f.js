import{_ as a,Z as e,a0 as p,F as t,a1 as o,X as c,Y as i,$ as l}from"./framework-5dd7fabc.js";const r={},n=e,u=p,d=t,k=o,v=l,m=c,g=i,b=v(`<p>给 Vite Proxy 代理添加响应头。</p><p>vite 的 proxy 代理同 webpack 类型，在 <code>server.proxy</code> 下进行:</p><p>类型为： <code>Record&lt;string, string | ProxyOptions&gt;</code>，意思是期望接收一个 { key: options } 对象。任何请求路径以 key 值开头的请求将被代理到对应的目标。如果 key 值以 <code>^</code> 开头，将被识别为 RegExp。<code>configure</code> 选项可用于访问 proxy 实例。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果使用了非相对的 基础路径 base，则必须在每个 key 值前加上该 base。</p></div><p>使用示例:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  server<span class="token operator">:</span> <span class="token punctuation">{</span>
    proxy<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 字符串简写写法：http://localhost:5173/foo -&gt; http://localhost:4567/foo</span>
      <span class="token string-property property">&#39;/foo&#39;</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:4567&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// 带选项写法：http://localhost:5173/api/bar -&gt; http://jsonplaceholder.typicode.com/bar</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        target<span class="token operator">:</span> <span class="token string">&#39;http://jsonplaceholder.typicode.com&#39;</span><span class="token punctuation">,</span>
        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/api</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 正则表达式写法：http://localhost:5173/fallback/ -&gt; http://jsonplaceholder.typicode.com/</span>
      <span class="token string-property property">&#39;^/fallback/.*&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        target<span class="token operator">:</span> <span class="token string">&#39;http://jsonplaceholder.typicode.com&#39;</span><span class="token punctuation">,</span>
        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/fallback</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 使用 proxy 实例</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        target<span class="token operator">:</span> <span class="token string">&#39;http://jsonplaceholder.typicode.com&#39;</span><span class="token punctuation">,</span>
        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token function-variable function">configure</span><span class="token operator">:</span> <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// proxy 是 &#39;http-proxy&#39; 的实例</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 代理 websockets 或 socket.io 写法：ws://localhost:5173/socket.io -&gt; ws://localhost:5174/socket.io</span>
      <span class="token string-property property">&#39;/socket.io&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        target<span class="token operator">:</span> <span class="token string">&#39;ws://localhost:5174&#39;</span><span class="token punctuation">,</span>
        ws<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加代理访问的真实地址" tabindex="-1"><a class="header-anchor" href="#添加代理访问的真实地址" aria-hidden="true">#</a> 添加代理访问的真实地址</h2><p>由于走的是代理，因此在浏览器上并不能显示的获取实际本地服务的请求，我们这里做点小改动。</p><p>通过 ts 的类型定义可以知道 ProxyOptions 有以下属性:</p><figure><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202309231058072.png" alt="ProxyOptions" tabindex="0" loading="lazy"><figcaption>ProxyOptions</figcaption></figure><ol><li><p><code>rewrite?: (path: string) =&gt; string;</code>：这是一个可选属性，表示重写路径的函数。它接受一个字符串参数 path，并返回一个新的字符串作为重写后的路径。</p></li><li><p><code>configure?: (proxy: HttpProxy.Server, options: ProxyOptions) =&gt; void;</code>：这也是一个可选属性，表示配置代理服务器的函数。它接受两个参数，一个是 proxy，表示代理服务器对象，另一个是 options，表示 ProxyOptions 对象本身。这个函数可以用来监听代理服务器的事件或进行其他配置操作。</p></li><li><p><code>bypass?: (req: http.IncomingMessage, res: http.ServerResponse, options: ProxyOptions) =&gt; void | null | undefined | false | string;</code>：同样是可选属性，表示类似于 webpack-dev-server 的绕过函数，也就是代理的核心通过它来实现代理转发。它接受三个参数，分别是 HTTP 请求对象 req、HTTP 响应对象 res 和 ProxyOptions 对象本身。</p><p>在 bypass 函数中，可以<strong>根据具体的逻辑来判断是否需要绕过代理服务器</strong>。如果需要绕过，可以执行一些自定义的操作，比如直接发送请求给目标服务器，或返回自定义的响应。如果不需要绕过，可以不执行任何操作，让代理服务器按照正常的流程进行转发和响应。</p><p>需要注意的是，bypass 函数可以返回以下几种值：</p><ul><li><code>void</code>：表示不绕过代理服务器，继续按照正常流程处理请求。</li><li><code>null、undefined、false</code>：表示绕过代理服务器，不执行转发操作。</li><li><strong>字符串</strong>：表示绕过代理服务器，并将请求转发到指定的路径或 URL。</li></ul></li></ol><p>所以利用 bypass 函数，我们可以在返回响应头上添加实际请求的路径。</p><p>在 vite.config.ts 中的 server 属性里进行配置：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 本地开发服务，也可以配置接口代理
 *
 * <span class="token keyword">@see</span> https://cn.vitejs.dev/config/#server-proxy
 */</span>
server<span class="token operator">:</span> <span class="token punctuation">{</span>
  port<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>
  proxy<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;/devapi&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      target<span class="token operator">:</span> <span class="token string">&#39;http://jsonplaceholder.typicode.com&#39;</span><span class="token punctuation">,</span>
      changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/devapi</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">bypass</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>rewrite <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> proxyUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span>
            options<span class="token punctuation">.</span><span class="token function">rewrite</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span>
            options<span class="token punctuation">.</span>target <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">.</span>href
          res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;x-req-proxyUrl&#39;</span><span class="token punctuation">,</span> proxyUrl<span class="token punctuation">)</span>
          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>proxyUrl<span class="token punctuation">)</span> <span class="token comment">// 服务器打印访问代理地址</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&#39;/devapi&#39;</code>：这是代理的路径匹配模式，当客户端请求的路径以/devapi 开头时，将触发代理服务器的转发操作。</p><p><code>target: &#39;http://jsonplaceholder.typicode.com&#39;</code>：目标服务器的 URL，代理服务器会将匹配到的请求转发到该 URL 指定的服务器上。</p><p><code>changeOrigin: true</code>：设置为 true 时，代理服务器会在转发请求时修改 Host 请求头，确保目标服务器能够正确识别请求的来源。</p><p><code>rewrite: (path) =&gt; path.replace(/^\\/devapi/, &#39;&#39;)</code>：重写函数，用于修改请求路径。在这个例子中，将请求路径中的<code>/devapi</code>部分替换为空字符串，以便在转发请求时去掉该部分路径。</p><p><code>bypass(req, res, options)</code>：绕过函数，用于自定义操作。在这个例子中，如果定义了 rewrite 函数并且请求的 URL 存在，就会执行以下操作：</p><p>使用 <code>options.rewrite(req.url)</code> （即上文中自定义的重写 rewrite 函数）将请求 URL 进行重写，得到一个新的 URL 地址。</p><p>将重写后的 URL 设置为响应头的<code>x-req-proxyUrl</code>字段，以便在响应中返回给客户端。</p><p>在服务器的控制台打印访问代理地址（重写后的 URL）的信息。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,23),h={href:"https://cn.vitejs.dev/config/server-options.html#server-proxy",target:"_blank",rel:"noopener noreferrer"};function y(x,f){const s=d("ExternalLinkIcon");return m(),g("div",null,[b,n("ul",null,[n("li",null,[n("a",h,[u("开发服务器选项"),k(s)])])])])}const w=a(r,[["render",y],["__file","vite03.html.vue"]]);export{w as default};
