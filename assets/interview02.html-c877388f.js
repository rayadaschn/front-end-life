import{_ as n,X as s,Y as a,$ as e}from"./framework-97fa2d96.js";const p={},o=e,t=s,c=a,l=o(`<p>在此梳理 JS 基础知识的一些问题。</p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li>值类型和引用类型</li><li><a href="#2">typeof 运算符</a></li><li><a href="#%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D">手写深拷贝</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">类型转换</a></li><li><a href="#5">var 和 let const 的区别</a></li><li><a href="#6">typeof 返回哪些类型</a></li><li><a href="#7">数组的 pop、push、unshift、shift 分别是什么？</a></li><li><a href="#%E6%95%B0%E7%BB%84%E6%9C%89%E5%93%AA%E4%BA%9B%E7%BA%AF%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95">数组有哪些纯函数方法</a></li></ul><h3 id="值类型和引用类型" tabindex="-1"><a class="header-anchor" href="#值类型和引用类型" aria-hidden="true">#</a> 值类型和引用类型</h3><p>值类型： Number、String、Boolean、Symbol、undefined</p><p>引用类型：Object、Array、Null(特殊引用类型、指针指向空地址)、Function(特殊引用类型,但不存储数据,所以没有&quot;拷贝、复制函数&quot;的说法)</p><h3 id="typeof-运算符" tabindex="-1"><a class="header-anchor" href="#typeof-运算符" aria-hidden="true">#</a> typeof 运算符 <span id="2"></span></h3><p>作用： 识别所有值类型、识别函数和判断是否是引用类型（不可再细分）</p><h3 id="手写深拷贝" tabindex="-1"><a class="header-anchor" href="#手写深拷贝" aria-hidden="true">#</a> 手写深拷贝</h3><p>步骤:</p><ol><li>判断是否为 objec array 类型或者 null, 否则直接返回;</li><li>判断是否为数组类型, 若为数组则定义拷贝类型为数组类型,否则为对象类型;</li><li>遍历待拷贝数据的非原型属性, 则递归拷贝。（此处无需再判断属性是否为复杂类型，递归中会自行判断）</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&#39;上海&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">tool</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> copyObj <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 也可用 Array.isArray(obj)，或者 Object.prototype.toString.call(obj) === &#39;[object, Array]&#39;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 保证 key 不是原型属性</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 递归调用</span>
        copyObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> copyObj
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> obj
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><p>首先总结常用的隐式类型转换，能够产生隐式类型转换的有 if、逻辑运算、<code>+-</code>拼接字符串和 <code>==</code>。</p><ul><li><p>if 判断</p><p>if 其实判断的是 truly 变量和 falsely 变量。</p><blockquote><p>假设有一个变量为 a：</p><ul><li>若 <code>!!a === true</code> 则表示为 truly 变量</li><li>若 <code>!!a === false</code> 则表示为 falsely 变量</li></ul></blockquote><p>falsely 变量有 6 个：0、false、&#39;&#39;（空字符串）、null、undefined 和 NaN，其余全部是 truly 变量</p></li><li><p><code>+-</code>字符串拼接</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;100&#39;</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token comment">// &#39;10010&#39;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">&#39;100&#39;</span> <span class="token operator">-</span> <span class="token number">10</span> <span class="token comment">// 90</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">+</span> <span class="token string">&#39;10&#39;</span> <span class="token comment">// &#39;true10&#39;</span>
<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token comment">// &#39;11&#39;</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">-</span> <span class="token string">&#39;10&#39;</span> <span class="token comment">// &#39;-9&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加号会转换为字符串拼接; 减号两边都会转换为数值, 再进行减法; Boolean 类型则看拼接的类型。</p></li><li><p>&quot;==&quot;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">100</span> <span class="token operator">==</span> <span class="token string">&#39;100&#39;</span> <span class="token comment">// true</span>
<span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// true</span>
<span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token comment">// true</span>
<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// true</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>除用 <code>== null</code> 判断 <code>null</code> 或 <code>undefined</code> 类型外, 其余一律用 <code>===</code></p><p><code>val == null</code> 相当于 <code>val === null || val === undefined</code>，原因在于 <code>null</code> 和 <code>undefined</code> 在隐式转换时都会转换为 <code>false</code>。</p></blockquote></li></ul><p>总结规律:</p><ol><li>如果两个操作数的类型相同，那么它们将按照相等性规则进行比较，返回相应的布尔值。</li><li>如果一个操作数是 <code>null</code>，另一个操作数是 <code>undefined</code>，则它们相等。</li><li>如果一个操作数是<strong>数字</strong>，另一个操作数是字符串，JavaScript 会尝试将字符串转换为数字，然后进行比较。</li><li>如果一个操作数是<strong>布尔值</strong>，另一个操作数是非布尔值（除了 <code>null</code> 和 <code>undefined</code>），JavaScript 会尝试将布尔值转换为数字（<code>true</code> 转换为 1，<code>false</code> 转换为 0），然后进行比较。</li><li>如果一个操作数是<strong>对象</strong>，另一个操作数是原始类型（数字、字符串、布尔值），JavaScript 会尝试调用对象的 <code>valueOf()</code> 或 <code>toString()</code> 方法，将对象转换为原始类型的值，然后进行比较。</li></ol><p>强制类型转换（显式类型转换）：</p><ol><li><p>字符串转换：使用 <code>String()</code> 函数或 <code>toString()</code> 方法将其他类型的值转换为字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">123</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// 输出 &quot;123&quot;</span>

<span class="token keyword">let</span> bool <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">let</span> boolStr <span class="token operator">=</span> bool<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boolStr<span class="token punctuation">)</span> <span class="token comment">// 输出 &quot;true&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数值转换：使用 <code>Number()</code> 函数将其他类型的值转换为数值，此外还有 <code>parseInt</code> 和 <code>parseFloat</code>（<code>parseInt</code> 和 <code>parseFloat</code> 的第二个参数为要转换成的进制）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;456&#39;</span>
<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// 输出 456</span>

<span class="token keyword">let</span> bool <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">let</span> boolNum <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boolNum<span class="token punctuation">)</span> <span class="token comment">// 输出 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>布尔转换：使用 <code>Boolean()</code> 函数将其他类型的值转换为布尔值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">let</span> bool <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token comment">// 输出 false</span>

<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span>
<span class="token keyword">let</span> strBool <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strBool<span class="token punctuation">)</span> <span class="token comment">// 输出 true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="var-和-let-const-的区别" tabindex="-1"><a class="header-anchor" href="#var-和-let-const-的区别" aria-hidden="true">#</a> var 和 let const 的区别 <span id="5"></span></h3><p>在 JavaScript 中，<code>var</code>、<code>let</code>和<code>const</code>是用于声明变量的关键字，它们之间有一些重要的区别。</p><ol><li><p>作用域：<code>var</code>声明的变量存在函数作用域或全局作用域，而<code>let</code>和<code>const</code>声明的变量存在块级作用域。块级作用域由一对大括号 <code>{}</code> 来定义，例如 if 语句、循环或函数等。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用 var</span>
<span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// x 在整个函数作用域内都可见</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 输出 2</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 输出 2</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用 let</span>
<span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// x 只在块级作用域内有效</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 输出 2</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 输出 1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>变量提升（Hoisting）：使用 <code>var</code> 声明的变量会被提升到其作用域的顶部，可以在声明之前访问到（但是值为 <code>undefined</code>），而使用 <code>let</code> 和 <code>const</code> 声明的变量不会被提升。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用 var</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 输出 undefined</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span>

<span class="token comment">// 使用 let</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 抛出 ReferenceError: x is not defined</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重复声明：使用 <code>var</code> 可以多次声明同一个变量而不会报错，而使用 <code>let</code> 或 <code>const</code> 在同一个作用域内重复声明同一个变量会抛出错误。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用 var</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 有效，但不推荐这样做</span>

<span class="token comment">// 使用 let</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 抛出 SyntaxError: Identifier &#39;x&#39; has already been declared</span>

<span class="token comment">// 使用 const</span>
<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 抛出 SyntaxError: Identifier &#39;x&#39; has already been declared</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可变性：使用 <code>var</code> 和 <code>let</code> 声明的变量是可变的（可重新赋值），而使用 <code>const</code> 声明的变量是不可变的（常量），一旦被赋值就不能再修改。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用 var</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span>
x <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 可以重新赋值</span>

<span class="token comment">// 使用 let</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span>
x <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 可以重新赋值</span>

<span class="token comment">// 使用 const</span>
<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">1</span>
x <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 抛出 TypeError: Assignment to constant variable.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="typeof-返回哪些类型" tabindex="-1"><a class="header-anchor" href="#typeof-返回哪些类型" aria-hidden="true">#</a> typeof 返回哪些类型 <span id="6"></span></h3><p><code>typeof</code> 是 JavaScript 的一个操作符，用于返回一个值的数据类型。<code>typeof</code> 可以返回以下类型的字符串：</p><ol><li><code>&quot;undefined&quot;</code>：表示未定义的值。</li><li><code>&quot;boolean&quot;</code>：表示布尔值类型。</li><li><code>&quot;number&quot;</code>：表示数字类型，包括整数和浮点数。</li><li><code>&quot;string&quot;</code>：表示字符串类型。</li><li><code>&quot;object&quot;</code>：表示对象或 null。注意，函数也是对象类型。</li><li><code>&quot;function&quot;</code>：表示函数类型。</li><li><code>&quot;symbol&quot;</code>：表示符号类型（ES2015 新增）。</li><li><code>&quot;bigint&quot;</code>：表示大整数类型（ES2020 新增）。</li></ol><p>以下是一些示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// 输出 &quot;undefined&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 输出 &quot;boolean&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token comment">// 输出 &quot;number&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出 &quot;string&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 &quot;bigint&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 &quot;symbol&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 输出 &quot;object&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 输出 &quot;object&quot;，这是 typeof 的一个历史遗留问题</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 输出 &quot;function&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需要注意的是，<code>typeof null</code> 返回 <code>&quot;object&quot;</code> 是 JavaScript 的一个历史遗留问题，实际上 null 是一个特殊的原始值，不属于对象类型。</p></blockquote><h3 id="数组的-pop、push、unshift、shift-分别是什么" tabindex="-1"><a class="header-anchor" href="#数组的-pop、push、unshift、shift-分别是什么" aria-hidden="true">#</a> 数组的 pop、push、unshift、shift 分别是什么？ <span id="7"></span></h3><ol><li><p><code>pop()</code>: <code>pop()</code> 方法从数组的末尾移除一个元素，并<strong>返回该元素的值</strong>。它会<strong>修改原始数组</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> removedElement <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 输出 [1, 2, 3]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>removedElement<span class="token punctuation">)</span> <span class="token comment">// 输出 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>push()</code>: <code>push()</code> 方法向数组的末尾添加一个或多个元素，并<strong>返回新数组的长度</strong>。它会<strong>修改原始数组</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> newLength <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 输出 [1, 2, 3, 4, 5]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newLength<span class="token punctuation">)</span> <span class="token comment">// 输出 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>unshift()</code>: <code>unshift()</code> 方法向数组的开头添加一个或多个元素，并<strong>返回新数组的长度</strong>。它会<strong>修改原始数组</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> newLength <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 输出 [1, 2, 3, 4]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newLength<span class="token punctuation">)</span> <span class="token comment">// 输出 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>shift()</code>: <code>shift()</code> 方法从数组的开头移除一个元素，并<strong>返回该元素的值</strong>。它会<strong>修改原始数组</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> shiftedElement <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 输出 [2, 3, 4]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shiftedElement<span class="token punctuation">)</span> <span class="token comment">// 输出 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>这些方法提供了对数组进行栈（后进先出）和队列（先进先出）操作的能力。<code>pop()</code> 和 <code>push()</code> 在数组的末尾进行操作，而 <code>unshift()</code> 和 <code>shift()</code> 在数组的开头进行操作。这些方法都会修改原始数组，并返回相应的值或长度。</p><h3 id="数组有哪些纯函数方法" tabindex="-1"><a class="header-anchor" href="#数组有哪些纯函数方法" aria-hidden="true">#</a> 数组有哪些纯函数方法?</h3><p>纯函数是指在执行过程中不会修改原始数据，并且每次调用都返回一个新的数组。</p><ol><li><p><code>concat()</code>: 连接两个或多个数组，并返回一个新数组，不会修改原始数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> newArr <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment">// 输出 [1, 2, 3, 4, 5, 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>slice()</code>: 返回一个新数组，其中包含原始数组中指定部分的浅拷贝，不会修改原始数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment">// 输出 [2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>map()</code>: 创建一个新数组，其元素是对原始数组元素调用提供的函数的结果，不会修改原始数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment">// 输出 [2, 4, 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>filter()</code>: 创建一个新数组，其中包含原始数组中满足条件的所有元素，不会修改原始数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment">// 输出 [3, 4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>除 pop、push、shift、unshift 外的几个非纯函数：</p><ol><li><p><code>reduce()</code>: 对数组中的每个元素执行一个提供的函数，并将结果汇总为单个值，不会修改原始数组，没有返回数组不是纯函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> accumulator <span class="token operator">+</span> item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token comment">// 输出 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>every()</code>: 检测数组中的所有元素是否都满足给定的条件，返回一个布尔值，不会修改原始数组，没有返回数组不是纯函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> allPositive <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>allPositive<span class="token punctuation">)</span> <span class="token comment">// 输出 true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>some()</code>: 检测数组中是否至少有一个元素满足给定的条件，返回一个布尔值，不会修改原始数组，没有返回数组不是纯函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> hasNegative <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hasNegative<span class="token punctuation">)</span> <span class="token comment">// 输出 false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>forEach()</code>: 数组循环，不返回值，可修改原数组，不是纯函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> item <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 输出 [2, 4, 6, 8]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>splice()</code>: splice() 方法可以用于删除、插入和替换数组中的元素。它接受多个参数，其中最常用的是<strong>起始索引</strong>和<strong>要删除的元素数量</strong>。非纯函数，会直接修改原始数组，并返回被删除的元素组成的新数组（如果有的话）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> removed <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 从索引 1 开始删除 2 个元素</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 输出 [1, 4, 5]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>removed<span class="token punctuation">)</span> <span class="token comment">// 输出 [2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,36),i=[l];function u(r,d){return t(),c("div",null,i)}const m=n(p,[["render",u],["__file","interview02.html.vue"]]);export{m as default};
