import{_ as n,X as s,Y as a,$ as t}from"./framework-97fa2d96.js";const p={},o=t,e=s,c=a,l=o(`<p>装饰器（Decorator）是一种语法结构，用来在定义时修改类（class）的行为。</p><p>在语法上，装饰器有如下几个特征。</p><p>（1）第一个字符（或者说前缀）是<code>@</code>，后面是一个表达式。</p><p>（2）<code>@</code>后面的表达式，<strong>必须是一个函数</strong>（或者执行后可以得到一个函数）。</p><p>（3）这个函数接受所修饰对象的一些相关值作为参数。</p><p>（4）这个函数要么不返回值，要么返回一个新对象取代所修饰的目标对象。</p><p>一般类有四个装饰器:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">frozen</span></span>
<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">configurable</span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">enumerable</span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">throttle</span></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token function">expensiveMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个用在类本身（<code>@frozen</code>），另外三个用在类的方法（<code>@configurable</code>、<code>@enumerable</code>、<code>@throttle</code>）。</p><h2 id="执行顺序" tabindex="-1"><a class="header-anchor" href="#执行顺序" aria-hidden="true">#</a> 执行顺序</h2><p>装饰器的执行分为两个阶段。</p><p>（1）评估（evaluation）：计算<code>@</code>符号后面的表达式的值，得到的应该是函数。</p><p>（2）应用（application）：将评估装饰器后得到的函数，应用于所装饰对象。</p><p>也就是说，装饰器的执行顺序是，先评估所有装饰器表达式的值，再将其应用于当前类。应用装饰器时，顺序依次为<strong>方法装饰器</strong>和<strong>属性装饰器</strong>，然后是<strong>类装饰器</strong>。</p><p>应用实例:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">评估 @d(): </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> context<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">应用 @d(): </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
  <span class="token keyword">return</span> str
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">d</span></span><span class="token punctuation">(</span><span class="token string">&#39;类装饰器&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">d</span></span><span class="token punctuation">(</span><span class="token string">&#39;静态属性装饰器&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">static</span> staticField <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;静态属性值&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">d</span></span><span class="token punctuation">(</span><span class="token string">&#39;原型方法&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">[</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;计算方法名&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">d</span></span><span class="token punctuation">(</span><span class="token string">&#39;实例属性&#39;</span><span class="token punctuation">)</span>
  instanceField <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;实例属性值&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>理想输出:</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code><span class="token operator">/</span><span class="token operator">/</span> <span class="token string">&quot;评估 @d(): 类装饰器&quot;</span>
<span class="token operator">/</span><span class="token operator">/</span> <span class="token string">&quot;评估 @d(): 静态属性装饰器&quot;</span>
<span class="token operator">/</span><span class="token operator">/</span> <span class="token string">&quot;评估 @d(): 原型方法&quot;</span>
<span class="token operator">/</span><span class="token operator">/</span> <span class="token string">&quot;计算方法名&quot;</span>
<span class="token operator">/</span><span class="token operator">/</span> <span class="token string">&quot;评估 @d(): 实例属性&quot;</span>
<span class="token operator">/</span><span class="token operator">/</span> <span class="token string">&quot;应用 @d(): 原型方法&quot;</span>
<span class="token operator">/</span><span class="token operator">/</span> <span class="token string">&quot;应用 @d(): 静态属性装饰器&quot;</span>
<span class="token operator">/</span><span class="token operator">/</span> <span class="token string">&quot;应用 @d(): 实例属性&quot;</span>
<span class="token operator">/</span><span class="token operator">/</span> <span class="token string">&quot;应用 @d(): 类装饰器&quot;</span>
<span class="token operator">/</span><span class="token operator">/</span> <span class="token string">&quot;静态属性值&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是经过笔者测试用 deno 运行后结果为:</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code>计算方法名
静态属性值
评估 <span class="token operator">@</span>d<span class="token operator">(</span><span class="token operator">)</span><span class="token operator">:</span> 静态属性装饰器
应用 <span class="token operator">@</span>d<span class="token operator">(</span><span class="token operator">)</span><span class="token operator">:</span> 静态属性装饰器
评估 <span class="token operator">@</span>d<span class="token operator">(</span><span class="token operator">)</span><span class="token operator">:</span> 原型方法
应用 <span class="token operator">@</span>d<span class="token operator">(</span><span class="token operator">)</span><span class="token operator">:</span> 原型方法
评估 <span class="token operator">@</span>d<span class="token operator">(</span><span class="token operator">)</span><span class="token operator">:</span> 实例属性
应用 <span class="token operator">@</span>d<span class="token operator">(</span><span class="token operator">)</span><span class="token operator">:</span> 实例属性
评估 <span class="token operator">@</span>d<span class="token operator">(</span><span class="token operator">)</span><span class="token operator">:</span> 类装饰器
应用 <span class="token operator">@</span>d<span class="token operator">(</span><span class="token operator">)</span><span class="token operator">:</span> 类装饰器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),i=[l];function r(u,k){return e(),c("div",null,i)}const v=n(p,[["render",r],["__file","ts01.html.vue"]]);export{v as default};
