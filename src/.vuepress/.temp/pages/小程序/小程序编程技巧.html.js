export const data = JSON.parse("{\"key\":\"v-abbfda4a\",\"path\":\"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7.html\",\"title\":\"小程序\",\"lang\":\"en-US\",\"frontmatter\":{\"title\":\"小程序\",\"order\":2,\"icon\":\"mini-app\",\"date\":\"2023-02-07T00:00:00.000Z\",\"category\":[\"mini-app\"],\"tag\":[\"mini-app\"],\"description\":\"小程序 Debug 宝典 数据绑定： 在 WXML 中动态数据利用 Mustache 双括号语法将变量包裹起来，可以绑定动态内容及 组件 class 属性，需注意的是 控制的变量需要放在双括号内，才能生效。如： &lt;view wx:if=\\\"{{value}}\\\" &gt;&lt;/view&gt; 数据更新 this.setData : 小程序的渲染过程是逻辑层负责生产、处理数据，利用 setData 传递数据到渲染层。其中，从逻辑层传递到渲染层是 异步 的，而 this.data 的修改是 同步 的。因此，连续多次的调用 this.setData 会导致 JS线程一直处于编译执行渲染阶段，造成卡顿。官方优化建议： 避免频繁调用 setData ; 避免每次 setData 都传递大量数据; 在后台页面进行 setData\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://mister-hope.github.io/front-end-life/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Huy's Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"小程序\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"小程序 Debug 宝典 数据绑定： 在 WXML 中动态数据利用 Mustache 双括号语法将变量包裹起来，可以绑定动态内容及 组件 class 属性，需注意的是 控制的变量需要放在双括号内，才能生效。如： &lt;view wx:if=\\\"{{value}}\\\" &gt;&lt;/view&gt; 数据更新 this.setData : 小程序的渲染过程是逻辑层负责生产、处理数据，利用 setData 传递数据到渲染层。其中，从逻辑层传递到渲染层是 异步 的，而 this.data 的修改是 同步 的。因此，连续多次的调用 this.setData 会导致 JS线程一直处于编译执行渲染阶段，造成卡顿。官方优化建议： 避免频繁调用 setData ; 避免每次 setData 都传递大量数据; 在后台页面进行 setData\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"en-US\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-02-09T07:00:38.000Z\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"mini-app\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-02-07T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-02-09T07:00:38.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"小程序\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2023-02-07T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-02-09T07:00:38.000Z\\\",\\\"author\\\":[]}\"]]},\"headers\":[],\"git\":{\"createdTime\":1675694747000,\"updatedTime\":1675926038000,\"contributors\":[{\"name\":\"Huy\",\"email\":\"rayadaschn@gmail.com\",\"commits\":3}]},\"readingTime\":{\"minutes\":0.74,\"words\":222},\"filePathRelative\":\"小程序/小程序编程技巧.md\",\"localizedDate\":\"February 7, 2023\",\"excerpt\":\"<h1> 小程序 Debug 宝典</h1>\\n<ol>\\n<li>\\n<p>数据绑定： 在 <code>WXML</code> 中动态数据利用 <code>Mustache</code> 双括号语法将变量包裹起来，可以绑定动态内容及 组件 class 属性，需注意的是 <strong>控制的变量需要放在双括号内</strong>，才能生效。如：</p>\\n<div class=\\\"language-HTML line-numbers-mode\\\" data-ext=\\\"HTML\\\"><pre class=\\\"language-HTML\\\"><code>&lt;view wx:if=\\\"{{value}}\\\" &gt;&lt;/view&gt;\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div></div></div></li>\\n<li>\\n<p>数据更新 <code>this.setData</code> :</p>\\n<p>小程序的渲染过程是逻辑层负责生产、处理数据，利用 <code>setData</code> 传递数据到渲染层。其中，从逻辑层传递到渲染层是 <strong>异步</strong> 的，而 <strong><code>this.data</code></strong>  的修改是  <strong>同步</strong> 的。因此，连续多次的调用 <code>this.setData</code> 会导致 JS线程一直处于编译执行渲染阶段，造成卡顿。官方优化建议：</p>\\n<ul>\\n<li>避免频繁调用 <code>setData</code> ;</li>\\n<li>避免每次 <code>setData</code> 都传递大量数据;</li>\\n<li>在后台页面进行 <code>setData</code></li>\\n</ul>\\n</li>\\n</ol>\",\"autoDesc\":true}")
