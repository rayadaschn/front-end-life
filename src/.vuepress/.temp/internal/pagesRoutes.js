export const pagesRoutes = [
  ["v-8daa1a0e","/",{"y":"h","t":"Huy","i":"home"},["/index.html","/README.md"]],
  ["v-e76ffe66","/CSS/CSSFundamentals.html",{"c":["CSS"],"g":["CSS"],"e":"<h1> CSS 基本常识</h1>\n<blockquote>\n<p>三读《CSS 世界》，记录一些基本常识笔记，以便加固理解。</p>\n<p>说是基本常识，实际上还是算内容进阶。</p>\n</blockquote>\n<h2> 基础内容</h2>\n<ul>\n<li>\n<p><strong>长度单位</strong></p>\n<ul>\n<li>相对字体长度单位：<code>em</code> 、<code>rem</code>、<code>ch</code>（字符 0 的宽度）；</li>\n<li>相对视区长度单位： <code>vh</code>（视高）、<code>vw</code>（视宽）。</li>\n</ul>\n</li>\n<li>\n<p><strong>选择器</strong></p>\n<ul>\n<li>类 选择器：“<code>.</code>” 开头；</li>\n<li>ID 选择器：“<code>#</code>” 开头；</li>\n<li>属性选择器： 指含有“<code>[]</code>”选择器，如 <code>[title]{}</code>；</li>\n<li>伪类选择器： 指前面有一个英文冒号（<code>:</code>）</li>\n<li>伪元素选择器： 指前面有一个英文冒号（<code>::</code>），如： <code>::before</code>、<code>::after</code>。</li>\n</ul>\n</li>\n<li>\n<p><strong>关系选择器</strong></p>\n<ul>\n<li>后代选择器： 空格连接；</li>\n<li>相邻后代选择器：<code>&gt;</code> 连接；</li>\n<li>兄弟选择器：<code>~</code> 连接；</li>\n<li>相邻兄弟选择器：+连接。</li>\n</ul>\n</li>\n<li>\n<p><strong>块级元素</strong></p>\n<p><code>display</code> 为 <code>block</code>、<code>table</code>和如 <code>&lt;li&gt;</code>元素的 <code>list-item</code> 。</p>\n<p>代表: <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;table&gt;</code> 等</p>\n<p>块级元素具有换行特性，可以配合 <code>clear</code> 属性清除浮动带来的影响。</p>\n<ul>\n<li><code>list-item</code>是标记盒子，专门用于存放圆点和数字这些项目符号。</li>\n<li>如行内块 <code>display：inline-block</code> ，实际上是由俩个盒子共同组成，一个内部块级的“容器盒子”和一个外部的内联级的外在盒子共同组成。</li>\n</ul>\n</li>\n<li>\n<p><strong>内联元素</strong></p>\n<p><code>display</code> 为<code>inline</code>、 <code>inline-bloc</code> 和 <code>inline-table</code>。</p>\n<p>如： <code>&lt;span&gt;</code>、 <code>&lt;button&gt;</code> 、 <code>&lt;img&gt;</code> 、<code>&lt;em&gt;</code></p>\n<p>需要注意的是，内联盒子模型中，存在一个幽灵空白节点，在 <code>line-height</code> 和 <code>vertical-align</code> 影响巨大。</p>\n<h3> 内容区域、内联盒子、行框盒子、包含盒子</h3>\n<ul>\n<li>\n<p><strong>内容区域(content area)</strong>：是一种围绕文字看不见的盒子，其大小仅受字符本身特性控制，本质上是一个字符盒子（character box）。内容区域的大小与 <code>font-size</code> 大小和 <code>font-family</code> 相关，与 <code>line-height</code> 没有任何关系。</p>\n</li>\n<li>\n<p><strong>内联盒子(inline boxes)</strong>：<strong>每个行内元素会生成一个行内框</strong>，行内框是一个浏览器渲染模型中的一个概念，无法显示出来。内联盒子不会让内容成块显示，而是排成一行。</p>\n<p>如：外部包含inline水平的标签(span、a、em、strong等)，则属于内联盒子。如果是个光秃秃的文字，则属于匿名内联盒子。行内框默认等于内容区域，除非设置了padding。</p>\n</li>\n<li>\n<p><strong>行框盒子(line boxes)：</strong> <strong>每一行就是一个行框盒子，每个行框盒子又是由一个一个内联盒子组成</strong>。行框盒子是浏览器渲染模式中的一个概念，无法显示出来。行框高度等于本行中所有行内框高度的最大值。<strong>当有多行内容时，每一行都有自己的行框</strong>。</p>\n</li>\n<li>\n<p><strong>包含盒子(containing box)</strong>：或者准确为<strong>包含块</strong>，<strong>由一行一行的行框盒子组成</strong>，<strong>高度就是单行文本高度的累加</strong>。</p>\n</li>\n</ul>\n<figure><img src=\"https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/20230318123201.png\" alt=\"盒子模型\" tabindex=\"0\" loading=\"lazy\"><figcaption>盒子模型</figcaption></figure>\n</li>\n<li>\n<p><strong>幽灵空白节点</strong>，内联元素的所有解析和渲染表现就如同每个行框盒子的前面有一个“空白节点”，这个“空白节点”永远透明，不占据任何宽度，看不见也无法通过脚本获取，就如同幽灵一样，但又确确实实地存在，表现如图文本节点一般。</p>\n</li>\n</ul>","y":"a","t":"CSS 基本常识","i":"style"},["/CSS/CSSFundamentals","/CSS/CSSFundamentals.md"]],
  ["v-81dd6fb8","/CSS/DifferentMethodsToAchieveCentering.html",{"c":["CSS"],"g":["CSS"],"e":"<h1> 多种方式实现居中</h1>\n<p>[toc]</p>\n<p>实现元素居中显示，有很多相关总结，但是还是有很多可以絮叨的地方。在此再记录一遍（你就是抄人家的ヽ(；´Д｀)ﾉ ）</p>\n<p>先看示例代码：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>son son-size<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> 居中内容 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"多种方式实现居中","i":"style","O":2},["/CSS/DifferentMethodsToAchieveCentering","/CSS/DifferentMethodsToAchieveCentering.md"]],
  ["v-46e3c1bf","/CSS/FlexboxLayoutTechniques.html",{"c":["CSS"],"g":["CSS"],"e":"<h1> 弹性布局 flex</h1>\n<blockquote>\n<p>读《CSS 新世界》flex 布局篇笔记</p>\n</blockquote>\n<h2> 子项特性</h2>\n<ol>\n<li>flex 子项块转化</li>\n<li>flex 子项浮动失效</li>\n<li>flex 子项支持 z-index 属性</li>\n<li><strong>flex 子项的 margin 值不会合并</strong></li>\n<li>flex 子项是格式化的尺寸</li>\n<li>flex 子项若被绝对定位，则会脱离弹性布局</li>\n</ol>\n<h2> 布局设置</h2>\n<ol>\n<li>\n<p><strong>flex-direction</strong> 属性与整体布局方向</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><pre class=\"language-css\"><code><span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> row | row-reverse | column | column-reverse<span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><strong>flex-wrap</strong> 属性与整体布局的换行表现</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><pre class=\"language-css\"><code><span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> nowrap | wrap | wrap-reverse<span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><strong>flex-flow</strong> 属性是 <strong>flex-direction</strong> 和 flex-wrap 的缩写</p>\n</li>\n</ol>","y":"a","t":"弹性布局 flex","i":"style","O":1},["/CSS/FlexboxLayoutTechniques","/CSS/FlexboxLayoutTechniques.md"]],
  ["v-74368525","/CSS/",{"c":["Guide"],"e":"<h2> Catalog</h2>\n<ul>\n<li><a href=\"/front-end-life/CSS/FlexboxLayoutTechniques.html\" target=\"blank\">flex 布局技巧</a></li>\n<li><a href=\"/front-end-life/CSS/DifferentMethodsToAchieveCentering.html\" target=\"blank\">多种方式实现居中</a></li>\n<li><a href=\"/front-end-life/CSS/CSSFundamentals.html\" target=\"blank\">CSS 基本常识</a></li>\n</ul>","y":"a","t":"CSS备忘录","i":"style","I":0},["/CSS/index.html","/CSS/README.md"]],
  ["v-381879ca","/Framework/",{"c":["Guide"],"e":"<h2> Catalog</h2>\n<ul>\n<li><a href=\"/front-end-life/Framework/Vue3%E4%B8%AD%E7%9A%84script-setup.html\" target=\"blank\">Vue3中的script-setup</a></li>\n<li><a href=\"/front-end-life/Framework/Vue3%E4%B8%AD%E7%9A%84%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C.html\" target=\"blank\">Vue3中的全局注册</a></li>\n<li><a href=\"/front-end-life/Framework/Vue3%E4%B8%AD%E7%9A%84%E6%87%92%E5%8A%A0%E8%BD%BD.html\" target=\"blank\">Vue3中的懒加载</a></li>\n<li><a href=\"/front-end-life/Framework/Vue3%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD%E5%AE%9E%E4%BE%8B.html\" target=\"blank\">Vue3中的动态路由懒加载实例</a></li>\n<li><a href=\"/front-end-life/Framework/React01.html\" target=\"blank\">React 基础语法</a></li>\n<li><a href=\"/front-end-life/Framework/React02.html\" target=\"blank\">React 工程化开发</a></li>\n<li><a href=\"React04\">React之数据管理 Redux</a></li>\n<li><a href=\"/front-end-life/Framework/React05.html\" target=\"blank\">React之路由管理</a></li>\n</ul>","y":"a","t":"框架类","i":"vue","I":0},["/Framework/index.html","/Framework/README.md"]],
  ["v-64848c03","/Framework/React01.html",{"c":["框架"],"g":["React"],"u":false,"e":"<h1> React 基础语法</h1>\n<blockquote>\n<p>今天开始学习 Reac 系列，先从最基本的语法入手。</p>\n<p>本文的 React18 为基础学习（和早期版本略有不同），参考文档为<a href=\"https://react.dev/learn\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a>。</p>\n</blockquote>\n<h2> 开发依赖</h2>\n<p>开发React必须依赖三个核心库：</p>\n<ul>\n<li>react：包含 react 所必须的核心代码，包含 React Web 和 react-native 所共同拥有的代码；</li>\n<li>react-dom：react 渲染在不同平台所需要的核心代码，针对 web 和 native 所完成的事情不同：\n<ul>\n<li>web 端：react-dom 会将 jsx 最终渲染成真实的 DOM，显示在浏览器中；</li>\n<li>native 端：react-dom 会将 jsx 最终渲染成原生的控件（如 Android 中的 Button，IOS 中的 UIButton）。</li>\n</ul>\n</li>\n<li>babel：将 jsx 转换为 React 代码的转换工具，可以将 ES6 等高级语法转换为大多数浏览器都支持的 ES5 语法。默认情况下，React 开发式不需要 babel 的，但是这时需要我们用 <code>React.createElement</code> 来编写代码，导致代码较为臃肿，且可读性较差。所以为了直接上手 jsx（JavaScript XML 语法），我们借助 babel 来帮助我们将 jsx 代码转换 <code>React.createElement</code>。</li>\n</ul>","y":"a","t":"React 基础语法","i":"react"},["/Framework/React01","/Framework/React01.md"]],
  ["v-663964a2","/Framework/React02.html",{"c":["框架"],"g":["React"],"u":false,"e":"<h1> React 工程化开发</h1>\n<p>随着代码的增加，在项目中注定无法在一个 HMLT 文件内编写完所有的工作，并且随着需求的增加，也要求我们将页面进行组件化切分，因此 Reac 中有了以下几种分类：</p>\n<ul>\n<li>根据组件的定义方式，可以分为：函数组件(<code>Functional Component</code> )和类组件(<code>Class Component</code>)；</li>\n<li>根据组件内部是否有状态需要维护，可以分成：无状态组件(<code>Stateless Component</code> )和有状态组件(<code>Stateful Component</code>)，也就是有无 state 数据；</li>\n<li>根据组件的不同职责，可以分成：展示型组件(<code>Presentational Component</code>)和容器型组件(<code>Container Component</code>)；</li>\n</ul>","y":"a","t":"React 工程化开发","i":"react"},["/Framework/React02","/Framework/React02.md"]],
  ["v-67ee3d41","/Framework/React03.html",{"c":["框架"],"g":["React"],"u":false,"e":"<h1> React 高阶组件、动画及 CSS</h1>\n<h2> 高阶组件</h2>\n<p><strong>高阶组件(High-Order-Component)</strong> 接受 React 组件作为输入，输出一个新的 React 组件。</p>\n<ul>\n<li>高阶组件不是组件，是增强函数，可以输入一个元组件，输出一个新的增强组件</li>\n<li>高阶组件的主要作用是代码复用，操作状态和参数</li>\n</ul>\n<p>定义一个高阶组件:</p>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> PureComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hoc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Cpn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 定义类组件</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">NewCpn</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cpn</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Bob<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> NewCpn<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"React 高阶组件、动画及 CSS","i":"react"},["/Framework/React03","/Framework/React03.md"]],
  ["v-69a315e0","/Framework/React04.html",{"c":["框架"],"g":["React"],"u":false,"e":"<h1> React之数据管理 Redux</h1>\n<h2> JavaScript 中的纯函数</h2>\n<p>在 JavaScript 中，纯函数是指具有以下两个特性的函数：</p>\n<ol>\n<li>相同的输入总是返回相同的输出</li>\n<li>函数执行期间没有副作用，也就是说它不会修改任何在函数作用域外部的状态，如全局变量、输入参数、引用参数等。</li>\n</ol>\n<p>因为纯函数的输出仅仅由输入决定，所以它们在并发编程和缓存数据等方面非常有用。由于不会修改外部状态，纯函数通常比有副作用的函数更容易测试、调试和优化。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"React之数据管理 Redux","i":"react"},["/Framework/React04","/Framework/React04.md"]],
  ["v-6b57ee7f","/Framework/React05.html",{"c":["框架"],"g":["React"],"u":false,"e":"<h1> React之路由管理</h1>\n<h2> 前言</h2>\n<p>前端路由的核心是改变 URL，但是也没不进行整体的刷新。由此带来了俩种模式：Hash 和HTML5 的 History。</p>\n<h3> URL 的 hash</h3>\n<p><strong>URL的hash也就是锚点(#)</strong>，本质上是改变<code>window.location</code>的<code>href</code>属性；我们可以通过直接赋值<code>location.hash</code>来改变<code>href</code>，但是页面不发生刷新。</p>\n<p>以下是最常用的用法，当用户点击页面中的链接时，可以使用 hash 来实现不同内容的展示，而不需要重新加载整个页面。以下是一个简单的 HTML 示例，演示了如何在页面中使用 hash：</p>","y":"a","t":"React之路由管理","i":"react"},["/Framework/React05","/Framework/React05.md"]],
  ["v-6d0cc71e","/Framework/React06.html",{"c":["框架"],"g":["React"],"u":true,"e":"<h1> React之Hooks</h1>\n<p>React Hooks 是 React 16.8 新增的功能，它允许函数组件中使用状态和其他 React 特性。Hooks 可以帮助我们更轻松地编写可复用、独立和易于测试的组件，并且可以避免类组件中常见的代码冗余和样板代码。</p>\n<p>先看看，在过去的Class 组件中所存在的问题：</p>\n<ul>\n<li>复杂组件难以理解；</li>\n<li>ES6 中的 class 和 React 中的 this 指向入门难度较高；</li>\n<li>组件复用状态较难。复用组件必须使用高阶组件，使得流程较为繁琐。</li>\n</ul>\n<p>在之前的 React 版本中，类组件是唯一能够使用 React 特性的方式。而函数组件则只能渲染静态数据和返回 DOM 元素。但随着函数组件的流行，开发人员往往希望在函数组件中使用状态和其他 React 特性。看一个函数式组件的样例:</p>","y":"a","t":"React之Hooks","i":"react"},["/Framework/React06","/Framework/React06.md"]],
  ["v-503be2bd","/Framework/Vue3%E4%B8%AD%E7%9A%84script-setup.html",{"c":["框架"],"g":["Vue"],"u":false,"e":"<h1> Vue3 中的 script-setup</h1>\n<h2> 1. 动物园里有什么?</h2>\n<p>在 <code>Vue@3.1.4</code> 以后 Vue 加入了 <strong><code>set-up</code></strong> 语法糖，以助于高效开发。先抛开其它其它概念，由于在 Vue3 中， template 模版如果需要使用 <strong><code>script</code></strong> 中的变量，需要在 <strong><code>setup()</code></strong> 中 <code>return{}</code> 抛出。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Vue3 中的标准组件格式 <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defineComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 定义变量...</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 抛出变量...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Vue3中的script-setup","i":"vue","O":1},["/Framework/Vue3中的script-setup.html","/Framework/Vue3%E4%B8%AD%E7%9A%84script-setup","/Framework/Vue3中的script-setup.md","/Framework/Vue3%E4%B8%AD%E7%9A%84script-setup.md"]],
  ["v-d966ffba","/Framework/Vue3%E4%B8%AD%E7%9A%84%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C.html",{"c":["框架"],"g":["Vue"],"u":false,"e":"<h1> Vue3 中的全局注册</h1>\n<h2> 1. 动物园里有什么?</h2>\n<p>在 <code>Vue3</code> 中当我们想用某个功能，并且想要这个能够全局生效时，我们通常会说去安装一个插件。如我们想全局注册 <code>element-plus</code> 的 <code>Icons-vue</code> 图标组件，我们得在 <code>main.ts</code> 内部加入如下代码 <a href=\"https://element-plus.gitee.io/en-US/component/icon.html#register-all-icons\" target=\"_blank\" rel=\"noopener noreferrer\">注册所有图标</a> ：</p>","y":"a","t":"Vue3中的全局注册","i":"vue","O":2},["/Framework/Vue3中的全局注册.html","/Framework/Vue3%E4%B8%AD%E7%9A%84%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C","/Framework/Vue3中的全局注册.md","/Framework/Vue3%E4%B8%AD%E7%9A%84%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C.md"]],
  ["v-ed0b73b4","/Framework/Vue3%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD%E5%AE%9E%E4%BE%8B.html",{"c":["框架"],"g":["Vue"],"u":false,"e":"<h1> Vue3中的动态路由懒加载实例</h1>\n<p>在《<a href=\"/front-end-life/Framework/Vue3%E4%B8%AD%E7%9A%84%E6%87%92%E5%8A%A0%E8%BD%BD.html\" target=\"blank\">Vue3 中的懒加载</a> 》一文中，我们总结了懒加载的实现方式。那懒加载最好用在什么地方呢？其实很常见，如在后台管理系统中，因为权限不同我们需要依据后端返回的数据，展现不同的菜单。菜单不同对应的二级列表路由地址不同，这个时候可不能一股脑的将所有子组件全部注册进去，否则，依据地址我们可以实现越权查看不同权限人的界面。</p>","y":"a","t":"Vue3中的动态路由懒加载实例","i":"vue","O":4},["/Framework/Vue3中的动态路由懒加载实例.html","/Framework/Vue3%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD%E5%AE%9E%E4%BE%8B","/Framework/Vue3中的动态路由懒加载实例.md","/Framework/Vue3%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD%E5%AE%9E%E4%BE%8B.md"]],
  ["v-fe6b7be6","/Framework/Vue3%E4%B8%AD%E7%9A%84%E6%87%92%E5%8A%A0%E8%BD%BD.html",{"c":["框架"],"g":["Vue"],"u":false,"e":"<h1> Vue3 中的懒加载</h1>\n<h2> 1. 动物园里有什么?</h2>\n<p>我们都知道前端项目完成之后，需要对页面进行优化。首当其冲的便是优化首页加载速率，方法有很多，我们来看看其中重要的一项<strong>懒加载</strong>。</p>\n<p>顾名思义，懒加载，就是加载页面的时候不是同步全部加载完成，而是在需要的时候进行加载。由此，产生俩个定义：<strong>同步组件</strong>和<strong>异步组件</strong>。</p>\n<p><strong>同步组件</strong>就是在页面打包时，组件会同所有代码一同打包到一个文件中。体积大了，加载的速率也就慢了。使用很简单，调用时直接静态 <code>import</code> 导入就行了，导入对象在加载时就被编译（无法做到按需编译，降低首页加载速度）。当然也不是没有好处的，<strong>静态导入能够更好的初始化依赖，而且更有利于静态分析工具和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Tree_shaking\" target=\"_blank\" rel=\"noopener noreferrer\">tree shaking</a> 发挥作用。所以不是必要情况，优先使用静态导入。</strong></p>","y":"a","t":"Vue3中的懒加载","i":"vue","O":3},["/Framework/Vue3中的懒加载.html","/Framework/Vue3%E4%B8%AD%E7%9A%84%E6%87%92%E5%8A%A0%E8%BD%BD","/Framework/Vue3中的懒加载.md","/Framework/Vue3%E4%B8%AD%E7%9A%84%E6%87%92%E5%8A%A0%E8%BD%BD.md"]],
  ["v-d27007b4","/JavaScript/Google%E6%B5%8F%E8%A7%88%E5%99%A8console.log%E3%80%8C%E5%BC%82%E6%AD%A5%E6%89%93%E5%8D%B0%E7%8E%B0%E8%B1%A1%E3%80%8D.html",{"c":["javascript"],"g":["javascript"],"e":"<h1> Google 浏览器 console.log「异步打印现象」</h1>\n<h2> 结论</h2>\n<blockquote>\n<p>针对在浏览器控制台出现打印结果和代码执行顺序不一致这种「异步现象」。网上主要有两种说法，笔者这里更喜欢第一种，好理解且符合笔者的测试</p>\n<ul>\n<li>浏览器出于优化的目地，默认不会展开所有对象，只有当手动点击展开时才去”读取对应的值“来进行展示。「点击」是一个代码执行完成之后的行为，所以对深层对象的打印总是最后时刻的快照。</li>\n<li>不同的浏览器可能有自己的 console.log 实现机制，受限于 I/O 性能可能打印的时机会与代码执行的时机不匹配。也就是说如果打印的时机如果较为靠后，那么打印时因为引用型的数据发生了修改，所以出现改变前后打印结果都一致的现象</li>\n</ul>\n</blockquote>","y":"a","t":"Google浏览器console.log「异步打印现象」","i":"javascript","O":2},["/JavaScript/Google浏览器console.log「异步打印现象」.html","/JavaScript/Google%E6%B5%8F%E8%A7%88%E5%99%A8console.log%E3%80%8C%E5%BC%82%E6%AD%A5%E6%89%93%E5%8D%B0%E7%8E%B0%E8%B1%A1%E3%80%8D","/JavaScript/Google浏览器console.log「异步打印现象」.md","/JavaScript/Google%E6%B5%8F%E8%A7%88%E5%99%A8console.log%E3%80%8C%E5%BC%82%E6%AD%A5%E6%89%93%E5%8D%B0%E7%8E%B0%E8%B1%A1%E3%80%8D.md"]],
  ["v-d42a4496","/JavaScript/JavaScript%E4%B8%AD%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97.html",{"c":["javascript"],"g":["javascript"],"e":"<h1> JavaScript 中的位运算</h1>\n<p>在 <strong>JavaScript</strong> 中, <strong>移位运算</strong>就是对二进制进行有规律低移位。在本篇中, 将要简要总结 <strong>js位运算</strong> 的常用方法及技巧。在 <strong>算法中的整除和整乘</strong> 常以 <strong>位运算</strong> 代替 <strong><code>Math</code></strong> 方法，速度确实提升很多。常用的位移运算有三种:</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token operator\">&lt;&lt;</span>     <span class=\"token comment\">//左移</span>\n<span class=\"token operator\">&gt;&gt;</span>     <span class=\"token comment\">//带符号右移</span>\n<span class=\"token operator\">&gt;&gt;&gt;</span>    <span class=\"token comment\">//无符号右移</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"JavaScript中的位运算","i":"javascript","O":3},["/JavaScript/JavaScript中的位运算.html","/JavaScript/JavaScript%E4%B8%AD%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97","/JavaScript/JavaScript中的位运算.md","/JavaScript/JavaScript%E4%B8%AD%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97.md"]],
  ["v-1877ed7f","/JavaScript/JavaScript%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7.html",{"c":["javascript"],"g":["javascript"],"u":false,"e":"<h1> JavaScript实用小技巧</h1>\n<blockquote>\n<p>记录一些 JavaScript 实用的小技巧</p>\n</blockquote>\n<ul>\n<li>\n<p>对象的比较</p>\n<p>由于对象不是常量，所以比较俩个对象是否相同不能用 <code>===</code> 全等或是 <code>==</code> 比较符进行比较。我们很快可以想到用 <code>JSON.stringigy()</code> 函数进行比较。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Dionysia'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Dionysia'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当然，这里依然有局限性，就是键值的顺序问题，并且 <code>JSON</code>并不能代表所有的类型，它不能识别 <code>undefined</code> ：</p>\n<div class=\"language-JavaScript line-numbers-mode\" data-ext=\"JavaScript\"><pre class=\"language-JavaScript\"><code>let a = { name: 'Dionysia'};\nlet b = { name: 'Dionysia', age: undefined};\n\nconsole.log(JSON.stringify(a) === JSON.stringify(b)); //true\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>为此，我们的目标比较俩个对象是否相等的要素有：键值对属性一一对应（属性长度）、是否存在嵌套对象？以下是一种较为朴素的解法：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">objA<span class=\"token punctuation\">,</span> objB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 俩对象指向同一片内存</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objA <span class=\"token operator\">===</span> objB<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 判断是否为对象, 若不为对象且不指向同一片内存,则返回 false</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">typeof</span> objA <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span>\n    objA <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token keyword\">typeof</span> objB <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span>\n    objB <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 两者均为对象, 开始缩小比较范围</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>objB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 长度满足要求, 进行深层次比较</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">in</span> objA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 对象枚举遍历, 检查是否有对应属性</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objB<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 迭代遍历属性 防止其为对象</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> objB<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 都通过了, 返回 true</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>但是这依旧有问题，为此较好的处理边界的方式是 Lodash 库里的 <code>_.isEqual()</code>（或者是 <code>Underscore</code>库里的 <code>_.isEqual()</code>）。</p>\n</li>\n</ul>","y":"a","t":"JavaScript实用小技巧","i":"javascript"},["/JavaScript/JavaScript实用小技巧.html","/JavaScript/JavaScript%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7","/JavaScript/JavaScript实用小技巧.md","/JavaScript/JavaScript%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7.md"]],
  ["v-568d3b89","/JavaScript/",{"c":["Guide"],"e":"<h2> Catalog</h2>\n<ul>\n<li>\n<p><a href=\"/front-end-life/JavaScript/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%92%8C%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96.html\" target=\"blank\">代码规范和自动格式化</a></p>\n</li>\n<li>\n<p><a href=\"/front-end-life/JavaScript/Google%E6%B5%8F%E8%A7%88%E5%99%A8console.log%E3%80%8C%E5%BC%82%E6%AD%A5%E6%89%93%E5%8D%B0%E7%8E%B0%E8%B1%A1%E3%80%8D.html\" target=\"blank\">Google 浏览器 console.log「异步打印现象」</a></p>\n</li>\n<li>\n<p><a href=\"/front-end-life/JavaScript/JavaScript%E4%B8%AD%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97.html\" target=\"blank\">JavaScript 中的位运算</a></p>\n</li>\n<li>\n<p><a href=\"/front-end-life/JavaScript/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3this%E6%8C%87%E5%90%91.html\" target=\"blank\">彻底理解 this 指向</a></p>\n</li>\n<li>\n<p><a href=\"/front-end-life/JavaScript/%E5%8E%9F%E5%9E%8B_%E5%8E%9F%E5%9E%8B%E9%93%BE_new%E7%9A%84%E4%BA%8C%E4%B8%89%E4%BA%8B.html\" target=\"blank\">原型-原型链-new 的二三事</a></p>\n</li>\n<li>\n<p><a href=\"/front-end-life/JavaScript/%E5%BC%82%E6%AD%A5%E5%B0%8F%E6%A1%88%E4%BE%8B.html\" target=\"blank\">异步小案例</a></p>\n</li>\n<li>\n<p><a href=\"/front-end-life/JavaScript/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%9F%8B%E7%82%B9%E5%AE%9E%E7%8E%B0.html\" target=\"blank\">前端代码埋点实现</a></p>\n</li>\n<li>\n<p><a href=\"/front-end-life/JavaScript/%E5%9C%A8JS%E4%B8%AD%E4%BC%98%E9%9B%85%E5%9C%B0%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF.html\" target=\"blank\">在 JS 中优雅地实现继承</a></p>\n</li>\n<li>\n<p><a href=\"/front-end-life/JavaScript/%E4%BB%A4%E4%BA%BA%E5%9B%B0%E6%83%91%E7%9A%84%E9%97%AD%E5%8C%85.html\" target=\"blank\">令人困惑的闭包</a></p>\n</li>\n</ul>","y":"a","t":"JavaScript","i":"javascript","I":0},["/JavaScript/index.html","/JavaScript/README.md"]],
  ["v-2f5b5962","/JavaScript/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%92%8C%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96.html",{"c":["javascript"],"g":["javascript"],"e":"<h1> 代码规范和自动格式化</h1>\n<p>​ 在团队开发中，统一代码规范是必不可少的。<a href=\"https://cn.eslint.org/docs/user-guide/configuring\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>ESlint</strong></a> 是我们前端工程化中代码检测的一款常用工具。它不仅可以检测 <code>JS</code> 还支持 <code>Vue</code> 和 <code>JSX</code> 。</p>\n<h2> 安装和使用</h2>\n<p>环境要求: <a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js</a> (&gt;=6.14), npm version 3+。</p>","y":"a","t":"代码规范和自动格式化","i":"javascript","O":1},["/JavaScript/代码规范和自动格式化.html","/JavaScript/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%92%8C%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96","/JavaScript/代码规范和自动格式化.md","/JavaScript/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%92%8C%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96.md"]],
  ["v-5dc87674","/JavaScript/%E4%BB%A4%E4%BA%BA%E5%9B%B0%E6%83%91%E7%9A%84%E9%97%AD%E5%8C%85.html",{"c":["javascript"],"g":["javascript"],"u":false,"e":"<h1> 令人困惑的闭包</h1>\n<p>终于来到闭包了，闭包其实挺难的。不信，你看下面的代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> item <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> item<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"令人困惑的闭包","i":"javascript","O":9},["/JavaScript/令人困惑的闭包.html","/JavaScript/%E4%BB%A4%E4%BA%BA%E5%9B%B0%E6%83%91%E7%9A%84%E9%97%AD%E5%8C%85","/JavaScript/令人困惑的闭包.md","/JavaScript/%E4%BB%A4%E4%BA%BA%E5%9B%B0%E6%83%91%E7%9A%84%E9%97%AD%E5%8C%85.md"]],
  ["v-9d590286","/JavaScript/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%9F%8B%E7%82%B9%E5%AE%9E%E7%8E%B0.html",{"c":["javascript"],"g":["javascript"],"e":"<h1> 前端代码埋点实现</h1>\n<h2> 1. 环境及需求介绍</h2>\n<ul>\n<li>环境： <code>Vue2.7</code></li>\n<li>需求：全页面访问、事件点击等全监听</li>\n</ul>\n<h2> 2. 封装逻辑</h2>\n<ul>\n<li>由于需要监听页面访问事件，为了统一封装，我们将用到 <code>Mixins</code> 混入监听页面的生命周期；</li>\n<li>所有的事件发送参数分为公参和特定事件参数，因此我们需要将公参数据进行提取，统一修改。</li>\n<li>埋点的核心逻辑，用到的是 GIF 请求发送</li>\n</ul>\n<p>使用 GIF 请求发送的原因其实很好理解：</p>","y":"a","t":"前端代码埋点实现","i":"javascript","O":7},["/JavaScript/前端代码埋点实现.html","/JavaScript/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%9F%8B%E7%82%B9%E5%AE%9E%E7%8E%B0","/JavaScript/前端代码埋点实现.md","/JavaScript/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%9F%8B%E7%82%B9%E5%AE%9E%E7%8E%B0.md"]],
  ["v-53a92e37","/JavaScript/%E5%8E%9F%E5%9E%8B_%E5%8E%9F%E5%9E%8B%E9%93%BE_new%E7%9A%84%E4%BA%8C%E4%B8%89%E4%BA%8B.html",{"c":["javascript"],"g":["javascript"],"u":true,"e":"<h1> 原型-原型链-new 的二三事</h1>\n<h2> 1. 到底是什么?</h2>\n<p>笔者在 <a href=\"/front-end-life/JavaScript/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3this%E6%8C%87%E5%90%91.html\" target=\"blank\">彻底理解 this 指向</a> 一文中，简单描述了 new 一个对象的过程。在此，再进行进一步的梳理。</p>\n<p><strong><code>new</code></strong> 关键字到底做了什么事情？</p>\n<ul>\n<li>首先创建一个空对象，这个空对象将会作为执行构造函数(<code>constructor</code>)之后的返回的对象实例。</li>\n<li>对创建的空对象的原型(<code>newObj.__proto__</code>)指向构造函数的原型属性(<code>Function.prototype</code>)。</li>\n<li>将这个空对象赋值给构造函数内部的 this，并执行构造函数逻辑。</li>\n<li>依据构造函数执行逻辑，返回第一步所创建的对象或构造函数的显示返回值（必须是对象）。</li>\n</ul>","y":"a","t":"原型-原型链-new的二三事","i":"javascript","O":5},["/JavaScript/原型_原型链_new的二三事.html","/JavaScript/%E5%8E%9F%E5%9E%8B_%E5%8E%9F%E5%9E%8B%E9%93%BE_new%E7%9A%84%E4%BA%8C%E4%B8%89%E4%BA%8B","/JavaScript/原型_原型链_new的二三事.md","/JavaScript/%E5%8E%9F%E5%9E%8B_%E5%8E%9F%E5%9E%8B%E9%93%BE_new%E7%9A%84%E4%BA%8C%E4%B8%89%E4%BA%8B.md"]],
  ["v-1a99e9da","/JavaScript/%E5%9C%A8JS%E4%B8%AD%E4%BC%98%E9%9B%85%E5%9C%B0%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF.html",{"c":["javascript"],"g":["javascript"],"u":false,"e":"<h1> 在 JS 中优雅地实现继承</h1>\n<p>在 <a href=\"/front-end-life/JavaScript/%E5%8E%9F%E5%9E%8B_%E5%8E%9F%E5%9E%8B%E9%93%BE_new%E7%9A%84%E4%BA%8C%E4%B8%89%E4%BA%8B.html\" target=\"blank\">原型_原型链_new 的二三事</a> 中，我们讨论了原型和原型链的实现关系。在本文，我们再来看看如何去实现继承。</p>\n<h2> 1. 是什么?</h2>\n<p>继承是面向对象中的一个重点，笔者也是反复学习了多次（时而懂，时而不懂，其实就是不懂，哈哈哈）。</p>","y":"a","t":"在 JS 中优雅地实现继承","i":"javascript","O":8},["/JavaScript/在JS中优雅地实现继承.html","/JavaScript/%E5%9C%A8JS%E4%B8%AD%E4%BC%98%E9%9B%85%E5%9C%B0%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF","/JavaScript/在JS中优雅地实现继承.md","/JavaScript/%E5%9C%A8JS%E4%B8%AD%E4%BC%98%E9%9B%85%E5%9C%B0%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF.md"]],
  ["v-741bc49e","/JavaScript/%E5%BC%82%E6%AD%A5%E5%B0%8F%E6%A1%88%E4%BE%8B.html",{"c":["javascript"],"g":["javascript"],"e":"<h1> 异步小案例</h1>\n<h2> 红绿灯控制任务</h2>\n<p>红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次，如果让 3 个灯不断交替地重复亮呢？</p>\n<div class=\"language-JavaScript line-numbers-mode\" data-ext=\"JavaScript\"><pre class=\"language-JavaScript\"><code>function red() {\n    console.log('red');\n}\n\nfunction green() {\n    console.log('green')\n}\n\nfunction yellow() {\n    console.log('yellow')\n}\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"异步小案例","i":"javascript","O":6},["/JavaScript/异步小案例.html","/JavaScript/%E5%BC%82%E6%AD%A5%E5%B0%8F%E6%A1%88%E4%BE%8B","/JavaScript/异步小案例.md","/JavaScript/%E5%BC%82%E6%AD%A5%E5%B0%8F%E6%A1%88%E4%BE%8B.md"]],
  ["v-6c18eb91","/JavaScript/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3this%E6%8C%87%E5%90%91.html",{"c":["javascript"],"g":["javascript"],"u":true,"e":"<h1> 彻底理解 this 指向</h1>\n<p>|<code>this</code> 指向纷繁复杂，笔者也是学习了多遍才算搞懂。常学常新，不同阶段看都有收获。</p>\n<h2> 1. 什么是 <code>this</code></h2>\n<p>在常见的面向对象语言（如 java、C++）中，<code>this</code> 通常只出现在 <strong>类方法中</strong> 。this 也是用于指代当前调用的对象，但是 JavaScript 中的 this 则更加灵活，因此，也是一大难点。</p>\n<p><strong>一句话总结 this 的指向</strong>： <strong>“谁调用它， this 就指向谁”</strong>。</p>","y":"a","t":"彻底理解 this 指向","i":"javascript","O":4},["/JavaScript/彻底理解this指向.html","/JavaScript/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3this%E6%8C%87%E5%90%91","/JavaScript/彻底理解this指向.md","/JavaScript/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3this%E6%8C%87%E5%90%91.md"]],
  ["v-ed24a584","/MiniApp/",{"c":["Guide"],"e":"<h2> Catalog</h2>\n<ul>\n<li><a href=\"/front-end-life/MiniApp/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7.html\" target=\"blank\">小程序编程技巧</a></li>\n</ul>\n","y":"a","t":"小程序","i":"mini-app","I":0},["/MiniApp/index.html","/MiniApp/README.md"]],
  ["v-25c2f620","/MiniApp/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7.html",{"d":"2023-02-07T00:00:00.000Z","l":"February 7, 2023","c":["mini-app"],"g":["mini-app"],"e":"<h1> 小程序 Debug 宝典</h1>\n<ol>\n<li>\n<p>数据绑定： 在 <code>WXML</code> 中动态数据利用 <code>Mustache</code> 双括号语法将变量包裹起来，可以绑定动态内容及 组件 class 属性，需注意的是 <strong>控制的变量需要放在双括号内</strong>，才能生效。如：</p>\n<div class=\"language-HTML line-numbers-mode\" data-ext=\"HTML\"><pre class=\"language-HTML\"><code>&lt;view wx:if=\"{{value}}\" &gt;&lt;/view&gt;\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>数据更新 <code>this.setData</code> :</p>\n<p>小程序的渲染过程是逻辑层负责生产、处理数据，利用 <code>setData</code> 传递数据到渲染层。其中，从逻辑层传递到渲染层是 <strong>异步</strong> 的，而 <strong><code>this.data</code></strong>  的修改是  <strong>同步</strong> 的。因此，连续多次的调用 <code>this.setData</code> 会导致 JS线程一直处于编译执行渲染阶段，造成卡顿。官方优化建议：</p>\n<ul>\n<li>避免频繁调用 <code>setData</code> ;</li>\n<li>避免每次 <code>setData</code> 都传递大量数据;</li>\n<li>在后台页面进行 <code>setData</code></li>\n</ul>\n</li>\n</ol>","y":"a","t":"小程序","i":"mini-app","O":2},["/MiniApp/小程序编程技巧.html","/MiniApp/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7","/MiniApp/小程序编程技巧.md","/MiniApp/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7.md"]],
  ["v-64a8442e","/OneMoreThing/NetWork.html",{"c":["anonymous"],"g":["note"],"u":false,"e":"<h1> 计算机网络自顶向下_第八版</h1>\n<h2> Chap 1 计算机网络和因特网</h2>\n<p>第一章对计算机网络做了简要概括，算是抛砖引玉式教学。</p>\n<h3> 互联网是什么?</h3>\n<p>因特网是一个世界范围内的计算机网络，即一个互联了遍及全世界数十亿计算设备的网络。</p>\n<figure><img src=\"https://camo.githubusercontent.com/4370d8524d833b945269cc9f9b457b24af407001a6c7f68ed9f2310dca75c7a7/68747470733a2f2f747661312e73696e61696d672e636e2f6c617267652f3030386933736b4e6c7931677072616239383135736a333075303133736173772e6a7067\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","t":"计算机网络自顶向下_第八版","i":"note"},["/OneMoreThing/NetWork","/OneMoreThing/NetWork.md"]],
  ["v-75868943","/OneMoreThing/",{"c":["Guide"],"e":"<h2> Catalog</h2>\n<ul>\n<li><a href=\"/front-end-life/OneMoreThing/%E4%BC%98%E8%B4%A8%E5%8D%9A%E6%96%87.html\" target=\"blank\">优质博文</a></li>\n<li><a href=\"/front-end-life/OneMoreThing/%E4%BC%98%E7%A7%80%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91%E6%8A%80%E5%B7%A7.html\" target=\"blank\">优秀文档编辑技巧</a></li>\n</ul>\n","y":"a","t":"不止代码","i":"anonymous","I":0},["/OneMoreThing/index.html","/OneMoreThing/README.md"]],
  ["v-14544db8","/OneMoreThing/%E4%BC%98%E7%A7%80%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91%E6%8A%80%E5%B7%A7.html",{"d":"2023-03-12T00:00:00.000Z","l":"March 12, 2023","c":["anonymous"],"g":["note"],"u":false,"e":"<h1> 优秀文档编辑技巧</h1>\n<h2> 总述</h2>\n<ul>\n<li>想清楚，再下笔</li>\n<li>多从「用户视角」出发</li>\n<li>用好的「结构」让读者理解你的思路</li>\n<li>选择合适的「呈现形式」，突出重点</li>\n<li>保持「精简」</li>\n<li>清晰的表达</li>\n<li>「细节」决定成败</li>\n<li>保持输入，不断「迭代」</li>\n</ul>\n<p>写个人博客，已经有近一个月了。以做技术记录出发，「面向小黄鸭编程」的方式,确实更容易坚持下来，做起来也更有成就感。但是，总是感觉自身的写作还不是很好，为此，总结一下「字节跳动优秀文档」的编辑技巧(原文档链接见参考文档)。</p>","y":"a","t":"优秀文档编辑技巧","i":"note"},["/OneMoreThing/优秀文档编辑技巧.html","/OneMoreThing/%E4%BC%98%E7%A7%80%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91%E6%8A%80%E5%B7%A7","/OneMoreThing/优秀文档编辑技巧.md","/OneMoreThing/%E4%BC%98%E7%A7%80%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91%E6%8A%80%E5%B7%A7.md"]],
  ["v-0f82cdc4","/OneMoreThing/%E4%BC%98%E8%B4%A8%E5%8D%9A%E6%96%87.html",{"d":"2023-03-12T00:00:00.000Z","l":"March 12, 2023","c":["anonymous"],"g":["note"],"u":false,"e":"<h1> 大千世界</h1>\n<h1> 记录一些优质博文:</h1>\n<ol>\n<li><a href=\"https://placeless.net/\" target=\"_blank\" rel=\"noopener noreferrer\">minefield (placeless.net)</a></li>\n<li><a href=\"https://sliu.vip/\" target=\"_blank\" rel=\"noopener noreferrer\">技术查阅手册 | 刘硕的技术查阅手册 </a></li>\n</ol>\n","y":"a","t":"优质博文","i":"note"},["/OneMoreThing/优质博文.html","/OneMoreThing/%E4%BC%98%E8%B4%A8%E5%8D%9A%E6%96%87","/OneMoreThing/优质博文.md","/OneMoreThing/%E4%BC%98%E8%B4%A8%E5%8D%9A%E6%96%87.md"]],
  ["v-5f3e853c","/SystemRequirements/GIthub%E6%B7%BB%E5%8A%A0GPG%E7%AD%BE%E5%90%8D.html",{"d":"2023-03-09T00:00:00.000Z","l":"March 9, 2023","c":["linux"],"g":["linux"],"u":false,"e":"<h1> GIthub 添加 GPG 签名</h1>\n<p>出于参与开源项目或是保护自身开源项目的安全考虑，在 GIthub 分支保护中，有一项 GPG 签名的设置。</p>\n<p>当然，这不是它诞生的主要目的。我们可以看看提交的 Commit 记录，发现就算是不一个账号，如果在本地的 <code>git config</code> 中设置相同的 user 信息，最终提交的用户就是一样的。这个在网上有一个很形象的比喻：你的同事获取到了你的 <code>git config</code> ，便可以假装你删库跑路了。哈哈哈哈</p>\n<p>而签名就是可以证明，你是不是真正的代码提交者，所以可以用于可靠的代码审计和追踪了。（删库跑路也不行了）</p>","y":"a","t":"GIthub添加GPG 签名","i":"linux"},["/SystemRequirements/GIthub添加GPG签名.html","/SystemRequirements/GIthub%E6%B7%BB%E5%8A%A0GPG%E7%AD%BE%E5%90%8D","/SystemRequirements/GIthub添加GPG签名.md","/SystemRequirements/GIthub%E6%B7%BB%E5%8A%A0GPG%E7%AD%BE%E5%90%8D.md"]],
  ["v-fa440e10","/SystemRequirements/GitOperationManuals.html",{"d":"2023-02-1","l":"February 1, 2023","c":["linux"],"g":["linux"],"u":false,"e":"<h1> Git 操作手册指南</h1>\n<h2> 分支管理规范</h2>\n<ul>\n<li>\n<p><strong>master</strong> 主分支，受保护，不存放源代码，不直接提交代码，所有的 上线文件 需要推送到此分支。</p>\n</li>\n<li>\n<p><strong>develop</strong> 受保护，主分支，不能直接提交代码，在这个分支只能增加从 <strong>feat</strong> 合并 过来的 <strong>commit</strong>。</p>\n</li>\n<li>\n<p><strong>feature</strong> 开发新功能，以 <strong>develop</strong> 为基础，创建该分支， 命名规范：<code>feature/xxx</code> 。开发完成后，提交合并请求到 release 分支进行提测。</p>\n</li>\n<li>\n<p><strong>release</strong> 提测分支:</p>\n<p>当有一组 <strong>feature</strong> 开发完成，首先会合并到 <strong>develop</strong> 分支，进入提测时，会创建 <strong>release</strong> 分支。 如果测试过程中若存在 <strong>bug</strong> 需要修复，则直接由开发者在 <strong>release</strong> 分支修复并提交。 当测试完成之后，合并 <strong>release</strong> 分支到 <strong>master</strong> 和 <strong>develop</strong> 分支，此时 <strong>master</strong> 为最新代码，用作上线。</p>\n</li>\n<li>\n<p><strong>hotfix</strong> 修复分支，从 <strong>develop</strong> 切出，命名规则同<strong>feature</strong>， 以 <code>hotfix/</code> 命名。</p>\n</li>\n</ul>","y":"a","t":"Git 操作手册","i":"linux"},["/SystemRequirements/GitOperationManuals","/SystemRequirements/GitOperationManuals.md"]],
  ["v-43de855c","/SystemRequirements/LinuxServerConfigurationRecord.html",{"d":"2023-02-1","l":"February 1, 2023","c":["linux"],"g":["linux"],"u":false,"e":"<h1> Linux 服务器配置记录</h1>\n<h2> 目录</h2>\n<p>[toc]</p>\n<h2> 操作指令记录</h2>\n<blockquote>\n<p>linux 操作指令语法 <strong>[<code>命令 可选参数 操作的对象</code>]</strong></p>\n</blockquote>\n<ol>\n<li>\n<p>基本操作指令(增删改查)</p>\n<ul>\n<li>增</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">mkdir</span> 文件夹1 文件夹2\n<span class=\"token function\">touch</span> fileName.txt\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>删除 remove</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>可选参数<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>文件名<span class=\"token punctuation\">]</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>可选参数如:</p>\n<ol>\n<li>\n<p><strong>-f</strong> : 强制删除, 无提示。 <code>rm -f /removeDir</code></p>\n</li>\n<li>\n<p><strong>-r</strong> : 递归删除文件夹，有提示，需输入 y 同意 。 <code>rm -r /removeDir</code></p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">rm</span>  <span class=\"token parameter variable\">-rf</span>  /tmp/*  <span class=\"token comment\"># 删除tmp下所有内容</span>\n<span class=\"token function\">rm</span>  <span class=\"token parameter variable\">-rf</span>  /tmp/   <span class=\"token comment\"># 不加*是会直接删除这个文件夹</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>\n<ul>\n<li>改</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token builtin class-name\">cd</span> /     <span class=\"token comment\"># 切换到根目录</span>\n<span class=\"token builtin class-name\">cd</span> ./tmp <span class=\"token comment\"># 切换到当前的子目录</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>    <span class=\"token comment\"># 切换到上一级目录</span>\n<span class=\"token builtin class-name\">cd</span> ~     <span class=\"token comment\"># 切换到自身用户的 home 目录</span>\n<span class=\"token builtin class-name\">cd</span> -     <span class=\"token comment\"># 切换到上一次工作目录</span>\n\n<span class=\"token builtin class-name\">exit</span>     <span class=\"token comment\"># 退出Linux</span>\n<span class=\"token function\">clear</span>    <span class=\"token comment\"># 清空屏幕</span>\n<span class=\"token function\">history</span>  <span class=\"token comment\"># 查看历史指令</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>移动复制文件操作\n<ol>\n<li>复制 <code>cp [options] source dest</code></li>\n</ol>\n</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># -f 为覆盖已存在的文件而不提示; -r 为递归复制目标文件夹</span>\n$: <span class=\"token function\">cp</span> test.txt test.txt.bak  <span class=\"token comment\"># 拷贝单个文件</span>\n\n$: <span class=\"token function\">cp</span> –r test/ newtest\n<span class=\"token comment\"># 将当前目录 test/ 下的所有文件复制到新目录 newtest 下</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>移动和重命名 mv</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>$: <span class=\"token function\">mv</span> ./test.txt  <span class=\"token punctuation\">..</span>/   <span class=\"token comment\"># 把当前目录下的test.txt移动到上一级目录去</span>\n\n$: <span class=\"token function\">mv</span> name.txt  newName.txt    <span class=\"token comment\"># 将“name.txt”重命名为 newName.txt”</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>重定向符号 &gt; 和 &gt;&gt;</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token operator\">&gt;</span>  <span class=\"token comment\"># 重定向输出覆盖符，覆盖写</span>\n<span class=\"token operator\">&gt;&gt;</span> <span class=\"token comment\"># 重定向追加输出符，追加写入</span>\n\n$: <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"覆盖写入txt文件的内容\"</span> <span class=\"token operator\">&gt;</span> test.txt\n$: <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"追加写入txt文件的内容\"</span> <span class=\"token operator\">&gt;</span> test.txt\n<span class=\"token comment\"># echo 是通用 shell 指令,用于字符串的输出, 写在其它指令为显示命令执行结果</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>\n<p>查</p>\n<ol>\n<li>首先看用户信息的一些操作:</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># [指令]</span>\n$: <span class=\"token function\">whoami</span>    <span class=\"token comment\"># 查看用户名,当前为 root</span>\n$: <span class=\"token function\">hostname</span>  <span class=\"token comment\"># 查看主机名,当前为 localhost</span>\n$: <span class=\"token builtin class-name\">pwd</span>       <span class=\"token comment\"># 查看当前所在文件目录(绝对路径),当前为 ~</span>\n<span class=\"token comment\"># 指令前的 \"#\" 为用户权限提示符: \"#\" 为root用户; \"$\" 为普通用户</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>查看文件夹内容 ls (list)</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>$: <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span>     <span class=\"token comment\"># 查看文件详细信息, 可用 ll 代替</span>\n$: ll\n\n<span class=\"token comment\"># -a 可查看隐藏文件, 即以 \".\"开头的文件</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>查看文件内容</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">cat</span> <span class=\"token punctuation\">[</span>文件名<span class=\"token punctuation\">]</span>\n$: <span class=\"token function\">cat</span> <span class=\"token parameter variable\">-n</span> <span class=\"token punctuation\">[</span>文件名<span class=\"token punctuation\">]</span>    <span class=\"token comment\"># 显示行号</span>\n\n$: <span class=\"token function\">head</span> <span class=\"token parameter variable\">-5</span> file.txt  <span class=\"token comment\"># 显示文件的头5行</span>\n$: <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-5</span> file.txt  <span class=\"token comment\"># 显示文件的后5行</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li>查找 find</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">find</span> <span class=\"token punctuation\">[</span>查找位置<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">-name</span> <span class=\"token punctuation\">[</span>查找文件名称<span class=\"token punctuation\">]</span>\n$: <span class=\"token function\">find</span> / <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.txt\"</span>  <span class=\"token comment\"># 在根目录开始查找 \".txt\"结尾的文件, \"*\"为通配符</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n<li>\n<p>添加用户权限(读写权限)</p>\n</li>\n</ol>","y":"a","t":"Linux服务器配置记录","i":"linux"},["/SystemRequirements/LinuxServerConfigurationRecord","/SystemRequirements/LinuxServerConfigurationRecord.md"]],
  ["v-4c008f7a","/SystemRequirements/Mac%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95.html",{"d":"2023-02-1","l":"February 1, 2023","c":["linux"],"g":["linux"],"u":false,"e":"<h1> Mac 配置记录</h1>\n<p>该博文记录新 Mac 收到后的相关配置说明，仅做记录。</p>\n<p>[toc]</p>\n<h2> Mac 基本设置</h2>\n<p>初始用户名较为重要，慎重选择。</p>\n<p>快捷键记录:</p>\n<ul>\n<li>系统级别\n<ul>\n<li><strong>command + w 关闭窗口</strong></li>\n<li>command + m 最小化窗口</li>\n<li><strong>command + q 退出当前程序</strong></li>\n<li>command + c 复制</li>\n<li>command + v 粘贴</li>\n<li><strong>command + , 当前程序设置面板</strong></li>\n<li>command + + 放大内容</li>\n<li>command + - 缩小内容</li>\n<li>command + s 保存</li>\n<li>control + f 光标前进一格</li>\n<li>control + b 光标后退一格</li>\n<li>control + p 光标向上一行</li>\n<li>control + n 光标向下一行</li>\n<li>control + d 向前删除</li>\n<li>control + h 向后删除</li>\n<li>control + e 到行尾</li>\n<li>control + a 到行首</li>\n</ul>\n</li>\n<li>终端\n<ul>\n<li>control + w 按单词删除已输入内容</li>\n</ul>\n</li>\n<li>浏览器\n<ul>\n<li><strong>command + r 刷新</strong></li>\n<li><strong>command + l 进入地址栏</strong></li>\n</ul>\n</li>\n</ul>","y":"a","t":"Mac配置记录","i":"linux"},["/SystemRequirements/Mac配置记录.html","/SystemRequirements/Mac%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95","/SystemRequirements/Mac配置记录.md","/SystemRequirements/Mac%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95.md"]],
  ["v-42bffff7","/SystemRequirements/",{"c":["Guide"],"e":"<h2> Catalog</h2>\n<ul>\n<li><a href=\"/front-end-life/SystemRequirements/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86.html\" target=\"blank\">数据加密原理</a></li>\n<li><a href=\"/front-end-life/SystemRequirements/Mac%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95.html\" target=\"blank\">Mac 配置记录</a></li>\n<li><a href=\"/front-end-life/SystemRequirements/%E4%B8%BAmac%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%90%8Cgit%E8%B4%A6%E5%8F%B7.html\" target=\"blank\">为 Mac 配置不同的 Git 账号</a></li>\n<li><a href=\"/front-end-life/SystemRequirements/%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86.html\" target=\"blank\">为 MacOS 设置终端代理</a></li>\n<li><a href=\"/front-end-life/SystemRequirements/LinuxServerConfigurationRecord.html\" target=\"blank\">Linux 操作记录</a></li>\n<li><a href=\"/front-end-life/SystemRequirements/GitOperationManuals.html\" target=\"blank\">GitLab 操作手册指南</a></li>\n<li><a href=\"/front-end-life/SystemRequirements/%E4%BD%BF%E7%94%A8PicGo+GitHub%E5%9B%BE%E5%BA%8A.html\" target=\"blank\">使用 PicGo+GitHub 图床</a></li>\n<li><a href=\"/front-end-life/SystemRequirements/GIthub%E6%B7%BB%E5%8A%A0GPG%E7%AD%BE%E5%90%8D.html\" target=\"blank\">GIthub 添加 GPG 签名</a></li>\n</ul>","y":"a","t":"Mac&Linux配置","i":"linux","I":0},["/SystemRequirements/index.html","/SystemRequirements/README.md"]],
  ["v-3edd403f","/SystemRequirements/%E4%B8%BAmac%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%90%8Cgit%E8%B4%A6%E5%8F%B7.html",{"d":"2023-02-1","l":"February 1, 2023","c":["linux"],"g":["linux"],"u":false,"e":"<h1> 为 Mac 配置不同的 Git 账号</h1>\n<p>[toc]</p>\n<h2> 总结</h2>\n<p>【注】全文的用户环境为 MacOS，一些文件的目录有所不同。</p>\n<ul>\n<li>\n<p>检查配置</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>$: <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--list</span>  <span class=\"token comment\"># 加 --global 为全局配置查看  </span>\n\n// 配置全局git用户名\n$: <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"zhangsan\"</span>\n// 配置全局git提交邮箱\n$: <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"emailA@gmail.com\"</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>创建本地秘钥</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>$: ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> <span class=\"token string\">'emailA.gmail.com'</span>\n<span class=\"token comment\"># 三次回车, 可以不设置相应存储密码。emailA 的秘钥为全局git通用</span>\n\n<span class=\"token comment\"># 设置第二个邮箱 emailB@gmail.com</span>\n$: ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-f</span> ~/.ssh/id_rsa_emailB@gmail.com <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"emailB@gmail.com\"</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>远程添加公钥</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># 复制邮箱的公钥(默认全局私钥为: id_rsa) 到远程</span>\n$: pbcopy <span class=\"token operator\">&lt;</span> ~/.ssh/id_rsa.pub\n\n<span class=\"token comment\"># 额外的第二个邮箱 emailB@gmail.com，复制公钥到远程</span>\n$: pbcopy <span class=\"token operator\">&lt;</span> ~/.ssh/id_rsa_emailB@gmail.com.pub\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>配置 <strong>config</strong> 文件</p>\n<p>打开 git 配置文件所在文件夹： <code>open ~/.ssh</code></p>\n<p>创建 <code>config</code> 文件（没有后缀）：</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># 通用配置,解决git版本过高问题</span>\nHost *\nUseKeychain <span class=\"token function\">yes</span>\nAddKeysToAgent <span class=\"token function\">yes</span>\nIdentityFile ~/.ssh/id_rsa\nKexAlgorithms +diffie-hellman-group1-sha1\n\n<span class=\"token comment\"># 全局默认邮箱</span>\nHost gitlab.xxx.cn\nHostname gitlab.xxx.cn\nIdentityFile ~/.ssh/id_rsa\nUser company\n\n<span class=\"token comment\"># gmail</span>\nHost gmail.github.com\nHostname github.com\nIdentityFile ~/.ssh/id_rsa_emailB@gmail.com\nUser gmail\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>测试连接</p>\n<p>格式： <code>ssh -T git@{config里面的user}.{config里面的Hostname}</code></p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># 全局默认的个人账户，若没有配置 config， 则直接 ssh -T git@gitlab.xxx.cn</span>\n$: <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-T</span> git@company.gitlab.xxx.cn\n\n<span class=\"token comment\"># 额外配置邮箱 &lt;User&gt; 为全局配置中的 User</span>\n$: <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-T</span> git@gmail.github.com\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>clone 使用</p>\n<p>格式： <code>git clone git@{config里面的user}.{config里面的Hostname}:{具体项目地址}.git</code></p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># User 为 'gmail' </span>\n$: <span class=\"token function\">git</span> clone git@gmail.github.com:vuejs/vue.git\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>不同项目不同的邮箱</p>\n<p>由于存在多个账户，为避免提交代码时使用个人邮箱，在每个项目前，最好进行git邮箱检查。</p>\n<p>若 <code>git config --list</code> 局部本地配置与预期不符，则进行局部设置。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>$: <span class=\"token builtin class-name\">cd</span> 项目名 \n<span class=\"token comment\"># 设置该项目使用的git账号和邮箱</span>\n$: <span class=\"token function\">git</span> config user.name <span class=\"token string\">'AnotherName'</span>\n$: <span class=\"token function\">git</span> config user.email <span class=\"token string\">'AnotherEmail'</span>\n<span class=\"token comment\"># 查看该项目git账号是否正确</span>\n$: <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--list</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>","y":"a","t":"为 Mac 配置不同的 Git 账号","i":"linux"},["/SystemRequirements/为mac配置不同git账号.html","/SystemRequirements/%E4%B8%BAmac%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%90%8Cgit%E8%B4%A6%E5%8F%B7","/SystemRequirements/为mac配置不同git账号.md","/SystemRequirements/%E4%B8%BAmac%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%90%8Cgit%E8%B4%A6%E5%8F%B7.md"]],
  ["v-31c7d7a5","/SystemRequirements/%E4%BD%BF%E7%94%A8PicGo_GitHub%E5%9B%BE%E5%BA%8A.html",{"d":"2023-03-09T00:00:00.000Z","l":"March 9, 2023","c":["linux"],"g":["linux"],"u":false,"e":"<h1> 使用PicGo+GitHub 图床</h1>\n<p>图床有很多，看了半天最终入手 <code>PicGo</code> ，开源简单省心。为此记录一下配置过程。</p>\n<h2> 创建自己的 GitHub 图床</h2>\n<p>首先要创建一个新的仓库，注意点是：</p>\n<ul>\n<li>选择 Public 开源</li>\n<li>应当新增一个 <code>Readme.md</code> ，好处在于会自定义生成 <code>main</code> 分支</li>\n</ul>\n<p>创建完仓库后，我们从个人头像处进入账户设置（<code>Settings</code>） ,找到左侧边栏最底部的开发者设置（<code>Developer settings</code>）：</p>","y":"a","t":"使用PicGo+GitHub 图床","i":"linux"},["/SystemRequirements/使用PicGo_GitHub图床.html","/SystemRequirements/%E4%BD%BF%E7%94%A8PicGo_GitHub%E5%9B%BE%E5%BA%8A","/SystemRequirements/使用PicGo+GitHub图床.html","/SystemRequirements/%E4%BD%BF%E7%94%A8PicGo+GitHub%E5%9B%BE%E5%BA%8A.html","/SystemRequirements/使用PicGo+GitHub图床.md","/SystemRequirements/%E4%BD%BF%E7%94%A8PicGo+GitHub%E5%9B%BE%E5%BA%8A.md"]],
  ["v-6b229620","/SystemRequirements/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86.html",{"d":"2023-02-1","l":"February 1, 2023","c":["linux"],"g":["linux"],"u":false,"e":"<h1> 数据加密原理</h1>\n<p>常用的是将对称加密同非对称加密相结合。各自具体原理，可见《<a href=\"https://cloud.tencent.com/developer/article/1738898\" target=\"_blank\" rel=\"noopener noreferrer\">前端敏感数据加密方案及实现</a>》、《<a href=\"https://segmentfault.com/a/1190000024523772\" target=\"_blank\" rel=\"noopener noreferrer\">数字签名和数字证书</a>》。</p>\n<p>1、前端加密方式：</p>","y":"a","t":"数据加密原理","i":"linux"},["/SystemRequirements/数据加密原理.html","/SystemRequirements/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86","/SystemRequirements/数据加密原理.md","/SystemRequirements/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86.md"]],
  ["v-be7b8d38","/SystemRequirements/%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86.html",{"d":"2023-02-1","l":"February 1, 2023","c":["linux"],"g":["linux"],"u":false,"e":"<h1> 为 MacOS 设置终端代理</h1>\n<h2> 环境</h2>\n<p>代理软件: <a href=\"https://github.com/yichengchen/clashX/tags\" target=\"_blank\" rel=\"noopener noreferrer\">ClashX</a> , 软件的终端混合代理端口号默认为: <strong>7890</strong>\nHTTP 代理端口号 和 Socks5 代理端口号默认未设置。</p>\n<h2> 为终端设置代理</h2>\n<ol>\n<li>\n<p>临时配置</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>$: <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span>http://127.0.0.1:7890\n$: <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span><span class=\"token variable\">$http_proxy</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>此时已设置好代理。</p>\n</li>\n<li>\n<p>快捷指令脚本</p>\n<p>临时设置，代码过长，因此为其设置快捷指令。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># 脚本内容</span>\n<span class=\"token comment\"># 开启代理</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">proxy_on</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span>http://127.0.0.1:7890\n    <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span><span class=\"token punctuation\">\\</span><span class=\"token variable\">$http_proxy</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"终端代理已开启。\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 关闭代理</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">proxy_off</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token builtin class-name\">unset</span> http_proxy https_proxy\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"终端代理已关闭。\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>指令脚本，我们一般写在 <code>~/.bash_profile</code> 内，因此，我们可以在终端输入如下指令，自动创建该文件。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">cat</span> <span class=\"token operator\">&gt;</span> ~/.bash_profile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">EOF\nfunction proxy_on() {\n    export http_proxy=http://127.0.0.1:7890\n    export https_proxy=\\<span class=\"token variable\">$http_proxy</span>\n    echo -e \"终端代理已开启。\"\n}\n\nfunction proxy_off(){\n    unset http_proxy https_proxy\n    echo -e \"终端代理已关闭。\"\n}\nEOF</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>创建完脚本指令后，我们还需为每次打开 zsh 或者 终端 去 <code>source ~/.bash_profile</code> 该脚本。因此，我们应该在 <code>~/.zshrc</code> 中末尾追加该指令</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># ~/.zshrc 文件</span>\n<span class=\"token comment\"># .... 其它配置</span>\n\n<span class=\"token builtin class-name\">source</span> ~/.bash_profile\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>","y":"a","t":"为 MacOS 设置终端代理","i":"linux"},["/SystemRequirements/终端设置代理.html","/SystemRequirements/%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86","/SystemRequirements/终端设置代理.md","/SystemRequirements/%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86.md"]],
  ["v-3706649a","/404.html",{"y":"p","t":""},["/404"]],
  ["v-5bc93818","/category/",{"y":"p","t":"Category"},["/category/index.html"]],
  ["v-744d024e","/tag/",{"y":"p","t":"Tag"},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"y":"p","t":"Articles"},["/article/index.html"]],
  ["v-154dc4c4","/star/",{"y":"p","t":"Star"},["/star/index.html"]],
  ["v-01560935","/timeline/",{"y":"p","t":"Timeline"},["/timeline/index.html"]],
  ["v-65ee2aa4","/category/css/",{"y":"p","t":"CSS Category"},["/category/css/index.html"]],
  ["v-b3142c4c","/tag/css/",{"y":"p","t":"CSS Tag"},["/tag/css/index.html"]],
  ["v-ac0c2a6a","/category/guide/",{"y":"p","t":"Guide Category"},["/category/guide/index.html"]],
  ["v-0d223344","/tag/react/",{"y":"p","t":"React Tag"},["/tag/react/index.html"]],
  ["v-5baeeb3d","/category/%E6%A1%86%E6%9E%B6/",{"y":"p","t":"框架 Category"},["/category/框架/","/category/%E6%A1%86%E6%9E%B6/index.html"]],
  ["v-b302da92","/tag/vue/",{"y":"p","t":"Vue Tag"},["/tag/vue/index.html"]],
  ["v-e2bac56c","/category/javascript/",{"y":"p","t":"javascript Category"},["/category/javascript/index.html"]],
  ["v-3b951558","/tag/javascript/",{"y":"p","t":"javascript Tag"},["/tag/javascript/index.html"]],
  ["v-098d6e68","/category/mini-app/",{"y":"p","t":"mini-app Category"},["/category/mini-app/index.html"]],
  ["v-40d69b56","/tag/mini-app/",{"y":"p","t":"mini-app Tag"},["/tag/mini-app/index.html"]],
  ["v-5ee3d90c","/category/anonymous/",{"y":"p","t":"anonymous Category"},["/category/anonymous/index.html"]],
  ["v-28e08cef","/tag/note/",{"y":"p","t":"note Tag"},["/tag/note/index.html"]],
  ["v-9c48d85a","/category/linux/",{"y":"p","t":"linux Category"},["/category/linux/index.html"]],
  ["v-211f44ee","/tag/linux/",{"y":"p","t":"linux Tag"},["/tag/linux/index.html"]],
]
